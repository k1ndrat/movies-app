%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: bw_hexa_028.eps
%%Creator: Adobe Illustrator(R) 16.0
%%For: Zydd
%%CreationDate: 8/17/2016
%%BoundingBox: 0 0 980 970
%%HiResBoundingBox: 0 0 980 969.9488
%%CropBox: 0 0 980 969.9488
%%LanguageLevel: 3
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 16.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 16.0.0 x682 R agm 4.6676 ct 5.2591%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
3 3010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.3-c011 66.145661, 2012/02/06-14:56:27        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS6 (Windows)</xmp:CreatorTool>
         <xmp:CreateDate>2016-08-17T20:28:03+02:00</xmp:CreateDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9I65qmleUfKV5qLRLDpm&#xA;iWTyJbRAIoit4/gijHQbKFUYq808ofltcefdOtfN/wCZs0upzamgu9O8uCV49OsreajwqIYyvqSF&#xA;OJYvX3qRirFfyu8h+YbDylo/5keRIrZ9e1MXMuseXp+ENnd28t1I0aW7KFFrLElFSnw026bFVnMv&#xA;5wedp7dLTTfy0139PSEx+neLFDp6PuAxvORDKNv2Vr44qmv5ffl/q1jqdz5w843Sal511FPTYxV+&#xA;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&#xA;cY5TahYzwW4rx/fNGfS32/bpiqWfk55ih1/8tNAvE+GeG1SzvIa/FHcWg9CVWHVTyjrQ9iMVYbp9&#xA;l56/KfUL210zRp/NP5eXdw91Z22n0bUdNad+ckSQMazxVJKhT8yO6qeWX/OQ35VzMIr3U5dHuuXF&#xA;7bU7W4tXU+DMyemP+DxV6Bp+o6fqNpHeafdRXlnKKxXNvIssbDxV0JU4q8385s+hfnT5M8xyMU0/&#xA;Wba58t3ctDxWWRhc2iFulZZV4j5Yqn/5o+Q5/N+g28enXY07zBpN1HqOh6iRURXUNeIegLem4JDA&#xA;exoaUxVjVn+dGr6FCtv+Y/lbUdEuYmEc2r2UD32lv/xYJYebpUb8KE4qyny1+bX5b+ZroWmja/a3&#xA;F4TRbSQtbzsfBYpxHIx+QxVlc0MU0LwyqHikUpIjbhlYUII9xirzP/nH25a28l3HlO5IGpeUdQu9&#xA;Kukr8RRZmlhkof2Xjk+E96YqhNZ0Dzr5E846p5s8n6d/iDQNfYXGv+XVkEdzHdIvE3Voz1DF+rp1&#xA;PbtxVR0P/OQ35cRuYNbkv/Ld4pAa01ewuYJBXbcoksY3/wArFWeaLr+h67ZLfaNf2+o2bbCe1lSV&#xA;K0rxJQmh36HfFXnv55qum/4R85SBja+Wdagk1EgVCWd0PQmlP+oStMVZj578n6d5z8o6h5dvZDFB&#xA;fxj07mMBmilRhJFKvSvF1B679MVZBiqR695W8necNNMGsWFpq9lICqO4WQihofTlX4kIYdVYHFWC&#xA;/laNV8qeedd/LS6u5r/SLS0h1fy1cXLc5o7KVzDJAzH7Sxyjip9j40CqI82BLL8+fIV1byFbnVbD&#xA;VrC+RT9q2t40uYuQHYS1696U74q9OxVTluLeFo1llSNpW4RK7BS7UrxWvU/LFXl/5o/lZpaaddec&#xA;fKMaeX/OWiwyXlrfWIEC3AhBkeC5RAElWRQV+IfP4dsVZv5O16DzX5L0nWpIkMer2MU1xb8SYw0s&#xA;Y9WOj9VDcl364qwz/nHG5dvy2FgDzt9J1G/sLOT+eCO4ZkNe/wBun0Yq9QxVLtT0ry/r9pNY6la2&#xA;uqWqsY5redEnRXpuCrBuLUb54q8x8taNcflt+all5W0qSWTyV5st7q407T5XLiwvrMCWVYmbk3pv&#xA;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&#xA;lSDTLNZ5LaEiysI2SBWKLSOJWPwRrsFr0GKv/9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>980.000000</stDim:w>
            <stDim:h>969.948730</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -969.949 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 969.949 li
980 969.949 li
980 0 li
cp
clp
0 0 mo
980 0 li
980 969.949 li
0 969.949 li
0 0 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
f
gsave
0 0 mo
980 0 li
980 969.949 li
0 969.949 li
0 0 li
cp
clp
-70 3.5 mo
-46.6665 32.8999 -23.3335 33.1333 0 4.2002 cv
0 -4.2002 li
-23.3335 27.5332 -46.6665 27.7666 -70 -3.5 cv
-70 3.5 li
cp
.0392157 .0392157 .0392157 rgb
f
.1 lw
0 lc
0 lj
4 ml
[] 0 dsh
true sadj
-70 3.5 mo
-46.6665 32.8999 -23.3335 33.1333 0 4.2002 cv
0 -4.2002 li
-23.3335 27.5332 -46.6665 27.7666 -70 -3.5 cv
-70 3.5 li
cp
@
70 3.5 mo
93.3335 32.8999 116.667 33.1333 140 4.2002 cv
140 -4.2002 li
116.667 27.5332 93.3335 27.7666 70 -3.5 cv
70 3.5 li
cp
f
70 3.5 mo
93.3335 32.8999 116.667 33.1333 140 4.2002 cv
140 -4.2002 li
116.667 27.5332 93.3335 27.7666 70 -3.5 cv
70 3.5 li
cp
@
66.9688 1.75 mo
53.1743 36.6572 64.6392 56.9814 101.363 62.7217 cv
108.637 58.522 li
69.4888 54.1812 57.6201 34.0908 73.0313 -1.75 cv
66.9688 1.75 li
cp
f
66.9688 1.75 mo
53.1743 36.6572 64.6392 56.9814 101.363 62.7217 cv
108.637 58.522 li
69.4888 54.1812 57.6201 34.0908 73.0313 -1.75 cv
66.9688 1.75 li
cp
@
66.9688 -1.75 mo
29.8413 3.75732 17.9722 23.8477 31.3628 58.522 cv
38.6372 62.7217 li
22.8223 26.6479 34.2866 6.32373 73.0313 1.75 cv
66.9688 -1.75 li
cp
f
66.9688 -1.75 mo
29.8413 3.75732 17.9722 23.8477 31.3628 58.522 cv
38.6372 62.7217 li
22.8223 26.6479 34.2866 6.32373 73.0313 1.75 cv
66.9688 -1.75 li
cp
@
70 -3.5 mo
46.6665 -32.8999 23.3335 -33.1333 0 -4.2002 cv
0 4.2002 li
23.3335 -27.5332 46.6665 -27.7666 70 3.5 cv
70 -3.5 li
cp
f
70 -3.5 mo
46.6665 -32.8999 23.3335 -33.1333 0 -4.2002 cv
0 4.2002 li
23.3335 -27.5332 46.6665 -27.7666 70 3.5 cv
70 -3.5 li
cp
@
73.0313 -1.75 mo
86.8257 -36.6572 75.3608 -56.9814 38.6372 -62.7217 cv
31.3628 -58.522 li
70.5112 -54.1812 82.3799 -34.0908 66.9688 1.75 cv
73.0313 -1.75 li
cp
f
73.0313 -1.75 mo
86.8257 -36.6572 75.3608 -56.9814 38.6372 -62.7217 cv
31.3628 -58.522 li
70.5112 -54.1812 82.3799 -34.0908 66.9688 1.75 cv
73.0313 -1.75 li
cp
@
73.0313 1.75 mo
110.159 -3.75732 122.028 -23.8477 108.637 -58.522 cv
101.363 -62.7217 li
117.178 -26.6479 105.713 -6.32373 66.9688 -1.75 cv
73.0313 1.75 li
cp
f
73.0313 1.75 mo
110.159 -3.75732 122.028 -23.8477 108.637 -58.522 cv
101.363 -62.7217 li
117.178 -26.6479 105.713 -6.32373 66.9688 -1.75 cv
73.0313 1.75 li
cp
@
210 3.5 mo
233.333 32.8999 256.667 33.1333 280 4.2002 cv
280 -4.2002 li
256.667 27.5332 233.333 27.7666 210 -3.5 cv
210 3.5 li
cp
f
210 3.5 mo
233.333 32.8999 256.667 33.1333 280 4.2002 cv
280 -4.2002 li
256.667 27.5332 233.333 27.7666 210 -3.5 cv
210 3.5 li
cp
@
206.969 1.75 mo
193.174 36.6572 204.639 56.9814 241.363 62.7217 cv
248.637 58.522 li
209.489 54.1812 197.62 34.0908 213.031 -1.75 cv
206.969 1.75 li
cp
f
206.969 1.75 mo
193.174 36.6572 204.639 56.9814 241.363 62.7217 cv
248.637 58.522 li
209.489 54.1812 197.62 34.0908 213.031 -1.75 cv
206.969 1.75 li
cp
@
206.969 -1.75 mo
169.841 3.75732 157.972 23.8477 171.363 58.522 cv
178.637 62.7217 li
162.822 26.6479 174.287 6.32373 213.031 1.75 cv
206.969 -1.75 li
cp
f
206.969 -1.75 mo
169.841 3.75732 157.972 23.8477 171.363 58.522 cv
178.637 62.7217 li
162.822 26.6479 174.287 6.32373 213.031 1.75 cv
206.969 -1.75 li
cp
@
210 -3.5 mo
186.667 -32.8999 163.333 -33.1333 140 -4.2002 cv
140 4.2002 li
163.333 -27.5332 186.667 -27.7666 210 3.5 cv
210 -3.5 li
cp
f
210 -3.5 mo
186.667 -32.8999 163.333 -33.1333 140 -4.2002 cv
140 4.2002 li
163.333 -27.5332 186.667 -27.7666 210 3.5 cv
210 -3.5 li
cp
@
213.031 -1.75 mo
226.826 -36.6572 215.361 -56.9814 178.637 -62.7217 cv
171.363 -58.522 li
210.511 -54.1812 222.38 -34.0908 206.969 1.75 cv
213.031 -1.75 li
cp
f
213.031 -1.75 mo
226.826 -36.6572 215.361 -56.9814 178.637 -62.7217 cv
171.363 -58.522 li
210.511 -54.1812 222.38 -34.0908 206.969 1.75 cv
213.031 -1.75 li
cp
@
213.031 1.75 mo
250.159 -3.75732 262.028 -23.8477 248.637 -58.522 cv
241.363 -62.7217 li
257.178 -26.6479 245.713 -6.32373 206.969 -1.75 cv
213.031 1.75 li
cp
f
213.031 1.75 mo
250.159 -3.75732 262.028 -23.8477 248.637 -58.522 cv
241.363 -62.7217 li
257.178 -26.6479 245.713 -6.32373 206.969 -1.75 cv
213.031 1.75 li
cp
@
350 3.5 mo
373.333 32.8999 396.667 33.1333 420 4.2002 cv
420 -4.2002 li
396.667 27.5332 373.333 27.7666 350 -3.5 cv
350 3.5 li
cp
f
350 3.5 mo
373.333 32.8999 396.667 33.1333 420 4.2002 cv
420 -4.2002 li
396.667 27.5332 373.333 27.7666 350 -3.5 cv
350 3.5 li
cp
@
346.969 1.75 mo
333.175 36.6572 344.639 56.9814 381.362 62.7217 cv
388.638 58.522 li
349.488 54.1812 337.62 34.0908 353.031 -1.75 cv
346.969 1.75 li
cp
f
346.969 1.75 mo
333.175 36.6572 344.639 56.9814 381.362 62.7217 cv
388.638 58.522 li
349.488 54.1812 337.62 34.0908 353.031 -1.75 cv
346.969 1.75 li
cp
@
346.969 -1.75 mo
309.841 3.75732 297.972 23.8477 311.362 58.522 cv
318.638 62.7217 li
302.822 26.6479 314.287 6.32373 353.031 1.75 cv
346.969 -1.75 li
cp
f
346.969 -1.75 mo
309.841 3.75732 297.972 23.8477 311.362 58.522 cv
318.638 62.7217 li
302.822 26.6479 314.287 6.32373 353.031 1.75 cv
346.969 -1.75 li
cp
@
350 -3.5 mo
326.667 -32.8999 303.333 -33.1333 280 -4.2002 cv
280 4.2002 li
303.333 -27.5332 326.667 -27.7666 350 3.5 cv
350 -3.5 li
cp
f
350 -3.5 mo
326.667 -32.8999 303.333 -33.1333 280 -4.2002 cv
280 4.2002 li
303.333 -27.5332 326.667 -27.7666 350 3.5 cv
350 -3.5 li
cp
@
353.031 -1.75 mo
366.825 -36.6572 355.361 -56.9814 318.638 -62.7217 cv
311.362 -58.522 li
350.512 -54.1812 362.38 -34.0908 346.969 1.75 cv
353.031 -1.75 li
cp
f
353.031 -1.75 mo
366.825 -36.6572 355.361 -56.9814 318.638 -62.7217 cv
311.362 -58.522 li
350.512 -54.1812 362.38 -34.0908 346.969 1.75 cv
353.031 -1.75 li
cp
@
353.031 1.75 mo
390.159 -3.75732 402.027 -23.8477 388.638 -58.522 cv
381.362 -62.7217 li
397.178 -26.6479 385.713 -6.32373 346.969 -1.75 cv
353.031 1.75 li
cp
f
353.031 1.75 mo
390.159 -3.75732 402.027 -23.8477 388.638 -58.522 cv
381.362 -62.7217 li
397.178 -26.6479 385.713 -6.32373 346.969 -1.75 cv
353.031 1.75 li
cp
@
490 3.5 mo
513.333 32.8999 536.667 33.1333 560 4.2002 cv
560 -4.2002 li
536.667 27.5332 513.333 27.7666 490 -3.5 cv
490 3.5 li
cp
f
490 3.5 mo
513.333 32.8999 536.667 33.1333 560 4.2002 cv
560 -4.2002 li
536.667 27.5332 513.333 27.7666 490 -3.5 cv
490 3.5 li
cp
@
486.969 1.75 mo
473.175 36.6572 484.639 56.9814 521.362 62.7217 cv
528.638 58.522 li
489.488 54.1812 477.62 34.0908 493.031 -1.75 cv
486.969 1.75 li
cp
f
486.969 1.75 mo
473.175 36.6572 484.639 56.9814 521.362 62.7217 cv
528.638 58.522 li
489.488 54.1812 477.62 34.0908 493.031 -1.75 cv
486.969 1.75 li
cp
@
486.969 -1.75 mo
449.841 3.75732 437.973 23.8477 451.362 58.522 cv
458.638 62.7217 li
442.822 26.6479 454.287 6.32373 493.031 1.75 cv
486.969 -1.75 li
cp
f
486.969 -1.75 mo
449.841 3.75732 437.973 23.8477 451.362 58.522 cv
458.638 62.7217 li
442.822 26.6479 454.287 6.32373 493.031 1.75 cv
486.969 -1.75 li
cp
@
490 -3.5 mo
466.667 -32.8999 443.333 -33.1333 420 -4.2002 cv
420 4.2002 li
443.333 -27.5332 466.667 -27.7666 490 3.5 cv
490 -3.5 li
cp
f
490 -3.5 mo
466.667 -32.8999 443.333 -33.1333 420 -4.2002 cv
420 4.2002 li
443.333 -27.5332 466.667 -27.7666 490 3.5 cv
490 -3.5 li
cp
@
493.031 -1.75 mo
506.825 -36.6572 495.361 -56.9814 458.638 -62.7217 cv
451.362 -58.522 li
490.512 -54.1812 502.38 -34.0908 486.969 1.75 cv
493.031 -1.75 li
cp
f
493.031 -1.75 mo
506.825 -36.6572 495.361 -56.9814 458.638 -62.7217 cv
451.362 -58.522 li
490.512 -54.1812 502.38 -34.0908 486.969 1.75 cv
493.031 -1.75 li
cp
@
493.031 1.75 mo
530.159 -3.75732 542.027 -23.8477 528.638 -58.522 cv
521.362 -62.7217 li
537.178 -26.6479 525.713 -6.32373 486.969 -1.75 cv
493.031 1.75 li
cp
f
493.031 1.75 mo
530.159 -3.75732 542.027 -23.8477 528.638 -58.522 cv
521.362 -62.7217 li
537.178 -26.6479 525.713 -6.32373 486.969 -1.75 cv
493.031 1.75 li
cp
@
630 3.5 mo
653.333 32.8999 676.667 33.1333 700 4.2002 cv
700 -4.2002 li
676.667 27.5332 653.333 27.7666 630 -3.5 cv
630 3.5 li
cp
f
630 3.5 mo
653.333 32.8999 676.667 33.1333 700 4.2002 cv
700 -4.2002 li
676.667 27.5332 653.333 27.7666 630 -3.5 cv
630 3.5 li
cp
@
626.969 1.75 mo
613.175 36.6572 624.639 56.9814 661.362 62.7217 cv
668.638 58.522 li
629.488 54.1812 617.62 34.0908 633.031 -1.75 cv
626.969 1.75 li
cp
f
626.969 1.75 mo
613.175 36.6572 624.639 56.9814 661.362 62.7217 cv
668.638 58.522 li
629.488 54.1812 617.62 34.0908 633.031 -1.75 cv
626.969 1.75 li
cp
@
626.969 -1.75 mo
589.841 3.75732 577.973 23.8477 591.362 58.522 cv
598.638 62.7217 li
582.822 26.6479 594.287 6.32373 633.031 1.75 cv
626.969 -1.75 li
cp
f
626.969 -1.75 mo
589.841 3.75732 577.973 23.8477 591.362 58.522 cv
598.638 62.7217 li
582.822 26.6479 594.287 6.32373 633.031 1.75 cv
626.969 -1.75 li
cp
@
630 -3.5 mo
606.667 -32.8999 583.333 -33.1333 560 -4.2002 cv
560 4.2002 li
583.333 -27.5332 606.667 -27.7666 630 3.5 cv
630 -3.5 li
cp
f
630 -3.5 mo
606.667 -32.8999 583.333 -33.1333 560 -4.2002 cv
560 4.2002 li
583.333 -27.5332 606.667 -27.7666 630 3.5 cv
630 -3.5 li
cp
@
633.031 -1.75 mo
646.825 -36.6572 635.361 -56.9814 598.638 -62.7217 cv
591.362 -58.522 li
630.512 -54.1812 642.38 -34.0908 626.969 1.75 cv
633.031 -1.75 li
cp
f
633.031 -1.75 mo
646.825 -36.6572 635.361 -56.9814 598.638 -62.7217 cv
591.362 -58.522 li
630.512 -54.1812 642.38 -34.0908 626.969 1.75 cv
633.031 -1.75 li
cp
@
633.031 1.75 mo
670.159 -3.75732 682.027 -23.8477 668.638 -58.522 cv
661.362 -62.7217 li
677.178 -26.6479 665.713 -6.32373 626.969 -1.75 cv
633.031 1.75 li
cp
f
633.031 1.75 mo
670.159 -3.75732 682.027 -23.8477 668.638 -58.522 cv
661.362 -62.7217 li
677.178 -26.6479 665.713 -6.32373 626.969 -1.75 cv
633.031 1.75 li
cp
@
770 3.5 mo
793.333 32.8999 816.667 33.1333 840 4.2002 cv
840 -4.2002 li
816.667 27.5332 793.333 27.7666 770 -3.5 cv
770 3.5 li
cp
f
770 3.5 mo
793.333 32.8999 816.667 33.1333 840 4.2002 cv
840 -4.2002 li
816.667 27.5332 793.333 27.7666 770 -3.5 cv
770 3.5 li
cp
@
766.969 1.75 mo
753.175 36.6572 764.639 56.9814 801.362 62.7217 cv
808.638 58.522 li
769.488 54.1812 757.62 34.0908 773.031 -1.75 cv
766.969 1.75 li
cp
f
766.969 1.75 mo
753.175 36.6572 764.639 56.9814 801.362 62.7217 cv
808.638 58.522 li
769.488 54.1812 757.62 34.0908 773.031 -1.75 cv
766.969 1.75 li
cp
@
766.969 -1.75 mo
729.841 3.75732 717.973 23.8477 731.362 58.522 cv
738.638 62.7217 li
722.822 26.6479 734.287 6.32373 773.031 1.75 cv
766.969 -1.75 li
cp
f
766.969 -1.75 mo
729.841 3.75732 717.973 23.8477 731.362 58.522 cv
738.638 62.7217 li
722.822 26.6479 734.287 6.32373 773.031 1.75 cv
766.969 -1.75 li
cp
@
770 -3.5 mo
746.667 -32.8999 723.333 -33.1333 700 -4.2002 cv
700 4.2002 li
723.333 -27.5332 746.667 -27.7666 770 3.5 cv
770 -3.5 li
cp
f
770 -3.5 mo
746.667 -32.8999 723.333 -33.1333 700 -4.2002 cv
700 4.2002 li
723.333 -27.5332 746.667 -27.7666 770 3.5 cv
770 -3.5 li
cp
@
773.031 -1.75 mo
786.825 -36.6572 775.361 -56.9814 738.638 -62.7217 cv
731.362 -58.522 li
770.512 -54.1812 782.38 -34.0908 766.969 1.75 cv
773.031 -1.75 li
cp
f
773.031 -1.75 mo
786.825 -36.6572 775.361 -56.9814 738.638 -62.7217 cv
731.362 -58.522 li
770.512 -54.1812 782.38 -34.0908 766.969 1.75 cv
773.031 -1.75 li
cp
@
773.031 1.75 mo
810.159 -3.75732 822.027 -23.8477 808.638 -58.522 cv
801.362 -62.7217 li
817.178 -26.6479 805.713 -6.32373 766.969 -1.75 cv
773.031 1.75 li
cp
f
773.031 1.75 mo
810.159 -3.75732 822.027 -23.8477 808.638 -58.522 cv
801.362 -62.7217 li
817.178 -26.6479 805.713 -6.32373 766.969 -1.75 cv
773.031 1.75 li
cp
@
910 3.5 mo
933.333 32.8999 956.667 33.1333 980 4.2002 cv
980 -4.2002 li
956.667 27.5332 933.333 27.7666 910 -3.5 cv
910 3.5 li
cp
f
910 3.5 mo
933.333 32.8999 956.667 33.1333 980 4.2002 cv
980 -4.2002 li
956.667 27.5332 933.333 27.7666 910 -3.5 cv
910 3.5 li
cp
@
906.969 1.75 mo
893.175 36.6572 904.639 56.9814 941.362 62.7217 cv
948.638 58.522 li
909.488 54.1812 897.62 34.0908 913.031 -1.75 cv
906.969 1.75 li
cp
f
906.969 1.75 mo
893.175 36.6572 904.639 56.9814 941.362 62.7217 cv
948.638 58.522 li
909.488 54.1812 897.62 34.0908 913.031 -1.75 cv
906.969 1.75 li
cp
@
906.969 -1.75 mo
869.841 3.75732 857.973 23.8477 871.362 58.522 cv
878.638 62.7217 li
862.822 26.6479 874.287 6.32373 913.031 1.75 cv
906.969 -1.75 li
cp
f
906.969 -1.75 mo
869.841 3.75732 857.973 23.8477 871.362 58.522 cv
878.638 62.7217 li
862.822 26.6479 874.287 6.32373 913.031 1.75 cv
906.969 -1.75 li
cp
@
910 -3.5 mo
886.667 -32.8999 863.333 -33.1333 840 -4.2002 cv
840 4.2002 li
863.333 -27.5332 886.667 -27.7666 910 3.5 cv
910 -3.5 li
cp
f
910 -3.5 mo
886.667 -32.8999 863.333 -33.1333 840 -4.2002 cv
840 4.2002 li
863.333 -27.5332 886.667 -27.7666 910 3.5 cv
910 -3.5 li
cp
@
913.031 -1.75 mo
926.825 -36.6572 915.361 -56.9814 878.638 -62.7217 cv
871.362 -58.522 li
910.512 -54.1812 922.38 -34.0908 906.969 1.75 cv
913.031 -1.75 li
cp
f
913.031 -1.75 mo
926.825 -36.6572 915.361 -56.9814 878.638 -62.7217 cv
871.362 -58.522 li
910.512 -54.1812 922.38 -34.0908 906.969 1.75 cv
913.031 -1.75 li
cp
@
913.031 1.75 mo
950.159 -3.75732 962.027 -23.8477 948.638 -58.522 cv
941.362 -62.7217 li
957.178 -26.6479 945.713 -6.32373 906.969 -1.75 cv
913.031 1.75 li
cp
f
913.031 1.75 mo
950.159 -3.75732 962.027 -23.8477 948.638 -58.522 cv
941.362 -62.7217 li
957.178 -26.6479 945.713 -6.32373 906.969 -1.75 cv
913.031 1.75 li
cp
@
1050 -3.5 mo
1026.67 -32.8999 1003.33 -33.1333 980 -4.2002 cv
980 4.2002 li
1003.33 -27.5332 1026.67 -27.7666 1050 3.5 cv
1050 -3.5 li
cp
f
1050 -3.5 mo
1026.67 -32.8999 1003.33 -33.1333 980 -4.2002 cv
980 4.2002 li
1003.33 -27.5332 1026.67 -27.7666 1050 3.5 cv
1050 -3.5 li
cp
@
0 124.744 mo
23.3335 154.144 46.6665 154.377 70 125.443 cv
70 117.043 li
46.6665 148.777 23.3335 149.01 0 117.744 cv
0 124.744 li
cp
f
0 124.744 mo
23.3335 154.144 46.6665 154.377 70 125.443 cv
70 117.043 li
46.6665 148.777 23.3335 149.01 0 117.744 cv
0 124.744 li
cp
@
-3.03125 122.994 mo
-16.8257 157.901 -5.36084 178.225 31.3628 183.965 cv
38.6372 179.765 li
-.51123 175.425 -12.3799 155.334 3.03125 119.494 cv
-3.03125 122.994 li
cp
f
-3.03125 122.994 mo
-16.8257 157.901 -5.36084 178.225 31.3628 183.965 cv
38.6372 179.765 li
-.51123 175.425 -12.3799 155.334 3.03125 119.494 cv
-3.03125 122.994 li
cp
@
-3.03125 119.494 mo
-40.1587 125.001 -52.0278 145.091 -38.6372 179.765 cv
-31.3628 183.965 li
-47.1777 147.892 -35.7134 127.567 3.03125 122.994 cv
-3.03125 119.494 li
cp
f
-3.03125 119.494 mo
-40.1587 125.001 -52.0278 145.091 -38.6372 179.765 cv
-31.3628 183.965 li
-47.1777 147.892 -35.7134 127.567 3.03125 122.994 cv
-3.03125 119.494 li
cp
@
0 117.744 mo
-23.3335 88.3438 -46.6665 88.1104 -70 117.043 cv
-70 125.443 li
-46.6665 93.71 -23.3335 93.4771 0 124.744 cv
0 117.744 li
cp
f
0 117.744 mo
-23.3335 88.3438 -46.6665 88.1104 -70 117.043 cv
-70 125.443 li
-46.6665 93.71 -23.3335 93.4771 0 124.744 cv
0 117.744 li
cp
@
3.03125 119.494 mo
16.8257 84.5864 5.36084 64.2622 -31.3628 58.5215 cv
-38.6372 62.7217 li
.51123 67.0625 12.3799 87.1528 -3.03125 122.994 cv
3.03125 119.494 li
cp
f
3.03125 119.494 mo
16.8257 84.5864 5.36084 64.2622 -31.3628 58.5215 cv
-38.6372 62.7217 li
.51123 67.0625 12.3799 87.1528 -3.03125 122.994 cv
3.03125 119.494 li
cp
@
3.03125 122.994 mo
40.1587 117.486 52.0278 97.3955 38.6372 62.7217 cv
31.3628 58.5215 li
47.1777 94.5957 35.7134 114.919 -3.03125 119.494 cv
3.03125 122.994 li
cp
f
3.03125 122.994 mo
40.1587 117.486 52.0278 97.3955 38.6372 62.7217 cv
31.3628 58.5215 li
47.1777 94.5957 35.7134 114.919 -3.03125 119.494 cv
3.03125 122.994 li
cp
@
140 124.744 mo
163.333 154.144 186.667 154.377 210 125.443 cv
210 117.043 li
186.667 148.777 163.333 149.01 140 117.744 cv
140 124.744 li
cp
f
140 124.744 mo
163.333 154.144 186.667 154.377 210 125.443 cv
210 117.043 li
186.667 148.777 163.333 149.01 140 117.744 cv
140 124.744 li
cp
@
136.969 122.994 mo
123.174 157.901 134.639 178.225 171.363 183.965 cv
178.637 179.765 li
139.489 175.425 127.62 155.334 143.031 119.494 cv
136.969 122.994 li
cp
f
136.969 122.994 mo
123.174 157.901 134.639 178.225 171.363 183.965 cv
178.637 179.765 li
139.489 175.425 127.62 155.334 143.031 119.494 cv
136.969 122.994 li
cp
@
136.969 119.494 mo
99.8413 125.001 87.9722 145.091 101.363 179.765 cv
108.637 183.965 li
92.8223 147.892 104.287 127.567 143.031 122.994 cv
136.969 119.494 li
cp
f
136.969 119.494 mo
99.8413 125.001 87.9722 145.091 101.363 179.765 cv
108.637 183.965 li
92.8223 147.892 104.287 127.567 143.031 122.994 cv
136.969 119.494 li
cp
@
140 117.744 mo
116.667 88.3438 93.3335 88.1104 70 117.043 cv
70 125.443 li
93.3335 93.71 116.667 93.4771 140 124.744 cv
140 117.744 li
cp
f
140 117.744 mo
116.667 88.3438 93.3335 88.1104 70 117.043 cv
70 125.443 li
93.3335 93.71 116.667 93.4771 140 124.744 cv
140 117.744 li
cp
@
143.031 119.494 mo
156.826 84.5864 145.361 64.2622 108.637 58.5215 cv
101.363 62.7217 li
140.511 67.0625 152.38 87.1528 136.969 122.994 cv
143.031 119.494 li
cp
f
143.031 119.494 mo
156.826 84.5864 145.361 64.2622 108.637 58.5215 cv
101.363 62.7217 li
140.511 67.0625 152.38 87.1528 136.969 122.994 cv
143.031 119.494 li
cp
@
143.031 122.994 mo
180.159 117.486 192.028 97.3955 178.637 62.7217 cv
171.363 58.5215 li
187.178 94.5957 175.713 114.919 136.969 119.494 cv
143.031 122.994 li
cp
f
143.031 122.994 mo
180.159 117.486 192.028 97.3955 178.637 62.7217 cv
171.363 58.5215 li
187.178 94.5957 175.713 114.919 136.969 119.494 cv
143.031 122.994 li
cp
@
280 124.744 mo
303.333 154.144 326.667 154.377 350 125.443 cv
350 117.043 li
326.667 148.777 303.333 149.01 280 117.744 cv
280 124.744 li
cp
f
280 124.744 mo
303.333 154.144 326.667 154.377 350 125.443 cv
350 117.043 li
326.667 148.777 303.333 149.01 280 117.744 cv
280 124.744 li
cp
@
276.969 122.994 mo
263.174 157.901 274.639 178.225 311.362 183.965 cv
318.638 179.765 li
279.489 175.425 267.62 155.334 283.031 119.494 cv
276.969 122.994 li
cp
f
276.969 122.994 mo
263.174 157.901 274.639 178.225 311.362 183.965 cv
318.638 179.765 li
279.489 175.425 267.62 155.334 283.031 119.494 cv
276.969 122.994 li
cp
@
276.969 119.494 mo
239.841 125.001 227.972 145.091 241.363 179.765 cv
248.637 183.965 li
232.822 147.892 244.287 127.567 283.031 122.994 cv
276.969 119.494 li
cp
f
276.969 119.494 mo
239.841 125.001 227.972 145.091 241.363 179.765 cv
248.637 183.965 li
232.822 147.892 244.287 127.567 283.031 122.994 cv
276.969 119.494 li
cp
@
280 117.744 mo
256.667 88.3438 233.333 88.1104 210 117.043 cv
210 125.443 li
233.333 93.71 256.667 93.4771 280 124.744 cv
280 117.744 li
cp
f
280 117.744 mo
256.667 88.3438 233.333 88.1104 210 117.043 cv
210 125.443 li
233.333 93.71 256.667 93.4771 280 124.744 cv
280 117.744 li
cp
@
283.031 119.494 mo
296.826 84.5864 285.361 64.2622 248.637 58.5215 cv
241.363 62.7217 li
280.511 67.0625 292.38 87.1528 276.969 122.994 cv
283.031 119.494 li
cp
f
283.031 119.494 mo
296.826 84.5864 285.361 64.2622 248.637 58.5215 cv
241.363 62.7217 li
280.511 67.0625 292.38 87.1528 276.969 122.994 cv
283.031 119.494 li
cp
@
283.031 122.994 mo
320.159 117.486 332.027 97.3955 318.638 62.7217 cv
311.362 58.5215 li
327.178 94.5957 315.713 114.919 276.969 119.494 cv
283.031 122.994 li
cp
f
283.031 122.994 mo
320.159 117.486 332.027 97.3955 318.638 62.7217 cv
311.362 58.5215 li
327.178 94.5957 315.713 114.919 276.969 119.494 cv
283.031 122.994 li
cp
@
420 124.744 mo
443.333 154.144 466.667 154.377 490 125.443 cv
490 117.043 li
466.667 148.777 443.333 149.01 420 117.744 cv
420 124.744 li
cp
f
420 124.744 mo
443.333 154.144 466.667 154.377 490 125.443 cv
490 117.043 li
466.667 148.777 443.333 149.01 420 117.744 cv
420 124.744 li
cp
@
416.969 122.994 mo
403.175 157.901 414.639 178.225 451.362 183.965 cv
458.638 179.765 li
419.488 175.425 407.62 155.334 423.031 119.494 cv
416.969 122.994 li
cp
f
416.969 122.994 mo
403.175 157.901 414.639 178.225 451.362 183.965 cv
458.638 179.765 li
419.488 175.425 407.62 155.334 423.031 119.494 cv
416.969 122.994 li
cp
@
416.969 119.494 mo
379.841 125.001 367.973 145.091 381.362 179.765 cv
388.638 183.965 li
372.822 147.892 384.287 127.567 423.031 122.994 cv
416.969 119.494 li
cp
f
416.969 119.494 mo
379.841 125.001 367.973 145.091 381.362 179.765 cv
388.638 183.965 li
372.822 147.892 384.287 127.567 423.031 122.994 cv
416.969 119.494 li
cp
@
420 117.744 mo
396.667 88.3438 373.333 88.1104 350 117.043 cv
350 125.443 li
373.333 93.71 396.667 93.4771 420 124.744 cv
420 117.744 li
cp
f
420 117.744 mo
396.667 88.3438 373.333 88.1104 350 117.043 cv
350 125.443 li
373.333 93.71 396.667 93.4771 420 124.744 cv
420 117.744 li
cp
@
423.031 119.494 mo
436.825 84.5864 425.361 64.2622 388.638 58.5215 cv
381.362 62.7217 li
420.512 67.0625 432.38 87.1528 416.969 122.994 cv
423.031 119.494 li
cp
f
423.031 119.494 mo
436.825 84.5864 425.361 64.2622 388.638 58.5215 cv
381.362 62.7217 li
420.512 67.0625 432.38 87.1528 416.969 122.994 cv
423.031 119.494 li
cp
@
423.031 122.994 mo
460.159 117.486 472.027 97.3955 458.638 62.7217 cv
451.362 58.5215 li
467.178 94.5957 455.713 114.919 416.969 119.494 cv
423.031 122.994 li
cp
f
423.031 122.994 mo
460.159 117.486 472.027 97.3955 458.638 62.7217 cv
451.362 58.5215 li
467.178 94.5957 455.713 114.919 416.969 119.494 cv
423.031 122.994 li
cp
@
560 124.744 mo
583.333 154.144 606.667 154.377 630 125.443 cv
630 117.043 li
606.667 148.777 583.333 149.01 560 117.744 cv
560 124.744 li
cp
f
560 124.744 mo
583.333 154.144 606.667 154.377 630 125.443 cv
630 117.043 li
606.667 148.777 583.333 149.01 560 117.744 cv
560 124.744 li
cp
@
556.969 122.994 mo
543.175 157.901 554.639 178.225 591.362 183.965 cv
598.638 179.765 li
559.488 175.425 547.62 155.334 563.031 119.494 cv
556.969 122.994 li
cp
f
556.969 122.994 mo
543.175 157.901 554.639 178.225 591.362 183.965 cv
598.638 179.765 li
559.488 175.425 547.62 155.334 563.031 119.494 cv
556.969 122.994 li
cp
@
556.969 119.494 mo
519.841 125.001 507.973 145.091 521.362 179.765 cv
528.638 183.965 li
512.822 147.892 524.287 127.567 563.031 122.994 cv
556.969 119.494 li
cp
f
556.969 119.494 mo
519.841 125.001 507.973 145.091 521.362 179.765 cv
528.638 183.965 li
512.822 147.892 524.287 127.567 563.031 122.994 cv
556.969 119.494 li
cp
@
560 117.744 mo
536.667 88.3438 513.333 88.1104 490 117.043 cv
490 125.443 li
513.333 93.71 536.667 93.4771 560 124.744 cv
560 117.744 li
cp
f
560 117.744 mo
536.667 88.3438 513.333 88.1104 490 117.043 cv
490 125.443 li
513.333 93.71 536.667 93.4771 560 124.744 cv
560 117.744 li
cp
@
563.031 119.494 mo
576.825 84.5864 565.361 64.2622 528.638 58.5215 cv
521.362 62.7217 li
560.512 67.0625 572.38 87.1528 556.969 122.994 cv
563.031 119.494 li
cp
f
563.031 119.494 mo
576.825 84.5864 565.361 64.2622 528.638 58.5215 cv
521.362 62.7217 li
560.512 67.0625 572.38 87.1528 556.969 122.994 cv
563.031 119.494 li
cp
@
563.031 122.994 mo
600.159 117.486 612.027 97.3955 598.638 62.7217 cv
591.362 58.5215 li
607.178 94.5957 595.713 114.919 556.969 119.494 cv
563.031 122.994 li
cp
f
563.031 122.994 mo
600.159 117.486 612.027 97.3955 598.638 62.7217 cv
591.362 58.5215 li
607.178 94.5957 595.713 114.919 556.969 119.494 cv
563.031 122.994 li
cp
@
700 124.744 mo
723.333 154.144 746.667 154.377 770 125.443 cv
770 117.043 li
746.667 148.777 723.333 149.01 700 117.744 cv
700 124.744 li
cp
f
700 124.744 mo
723.333 154.144 746.667 154.377 770 125.443 cv
770 117.043 li
746.667 148.777 723.333 149.01 700 117.744 cv
700 124.744 li
cp
@
696.969 122.994 mo
683.175 157.901 694.639 178.225 731.362 183.965 cv
738.638 179.765 li
699.488 175.425 687.62 155.334 703.031 119.494 cv
696.969 122.994 li
cp
f
696.969 122.994 mo
683.175 157.901 694.639 178.225 731.362 183.965 cv
738.638 179.765 li
699.488 175.425 687.62 155.334 703.031 119.494 cv
696.969 122.994 li
cp
@
696.969 119.494 mo
659.841 125.001 647.973 145.091 661.362 179.765 cv
668.638 183.965 li
652.822 147.892 664.287 127.567 703.031 122.994 cv
696.969 119.494 li
cp
f
696.969 119.494 mo
659.841 125.001 647.973 145.091 661.362 179.765 cv
668.638 183.965 li
652.822 147.892 664.287 127.567 703.031 122.994 cv
696.969 119.494 li
cp
@
700 117.744 mo
676.667 88.3438 653.333 88.1104 630 117.043 cv
630 125.443 li
653.333 93.71 676.667 93.4771 700 124.744 cv
700 117.744 li
cp
f
700 117.744 mo
676.667 88.3438 653.333 88.1104 630 117.043 cv
630 125.443 li
653.333 93.71 676.667 93.4771 700 124.744 cv
700 117.744 li
cp
@
703.031 119.494 mo
716.825 84.5864 705.361 64.2622 668.638 58.5215 cv
661.362 62.7217 li
700.512 67.0625 712.38 87.1528 696.969 122.994 cv
703.031 119.494 li
cp
f
703.031 119.494 mo
716.825 84.5864 705.361 64.2622 668.638 58.5215 cv
661.362 62.7217 li
700.512 67.0625 712.38 87.1528 696.969 122.994 cv
703.031 119.494 li
cp
@
703.031 122.994 mo
740.159 117.486 752.027 97.3955 738.638 62.7217 cv
731.362 58.5215 li
747.178 94.5957 735.713 114.919 696.969 119.494 cv
703.031 122.994 li
cp
f
703.031 122.994 mo
740.159 117.486 752.027 97.3955 738.638 62.7217 cv
731.362 58.5215 li
747.178 94.5957 735.713 114.919 696.969 119.494 cv
703.031 122.994 li
cp
@
840 124.744 mo
863.333 154.144 886.667 154.377 910 125.443 cv
910 117.043 li
886.667 148.777 863.333 149.01 840 117.744 cv
840 124.744 li
cp
f
840 124.744 mo
863.333 154.144 886.667 154.377 910 125.443 cv
910 117.043 li
886.667 148.777 863.333 149.01 840 117.744 cv
840 124.744 li
cp
@
836.969 122.994 mo
823.175 157.901 834.639 178.225 871.362 183.965 cv
878.638 179.765 li
839.488 175.425 827.62 155.334 843.031 119.494 cv
836.969 122.994 li
cp
f
836.969 122.994 mo
823.175 157.901 834.639 178.225 871.362 183.965 cv
878.638 179.765 li
839.488 175.425 827.62 155.334 843.031 119.494 cv
836.969 122.994 li
cp
@
836.969 119.494 mo
799.841 125.001 787.973 145.091 801.362 179.765 cv
808.638 183.965 li
792.822 147.892 804.287 127.567 843.031 122.994 cv
836.969 119.494 li
cp
f
836.969 119.494 mo
799.841 125.001 787.973 145.091 801.362 179.765 cv
808.638 183.965 li
792.822 147.892 804.287 127.567 843.031 122.994 cv
836.969 119.494 li
cp
@
840 117.744 mo
816.667 88.3438 793.333 88.1104 770 117.043 cv
770 125.443 li
793.333 93.71 816.667 93.4771 840 124.744 cv
840 117.744 li
cp
f
840 117.744 mo
816.667 88.3438 793.333 88.1104 770 117.043 cv
770 125.443 li
793.333 93.71 816.667 93.4771 840 124.744 cv
840 117.744 li
cp
@
843.031 119.494 mo
856.825 84.5864 845.361 64.2622 808.638 58.5215 cv
801.362 62.7217 li
840.512 67.0625 852.38 87.1528 836.969 122.994 cv
843.031 119.494 li
cp
f
843.031 119.494 mo
856.825 84.5864 845.361 64.2622 808.638 58.5215 cv
801.362 62.7217 li
840.512 67.0625 852.38 87.1528 836.969 122.994 cv
843.031 119.494 li
cp
@
843.031 122.994 mo
880.159 117.486 892.027 97.3955 878.638 62.7217 cv
871.362 58.5215 li
887.178 94.5957 875.713 114.919 836.969 119.494 cv
843.031 122.994 li
cp
f
843.031 122.994 mo
880.159 117.486 892.027 97.3955 878.638 62.7217 cv
871.362 58.5215 li
887.178 94.5957 875.713 114.919 836.969 119.494 cv
843.031 122.994 li
cp
@
980 124.744 mo
1003.33 154.144 1026.67 154.377 1050 125.443 cv
1050 117.043 li
1026.67 148.777 1003.33 149.01 980 117.744 cv
980 124.744 li
cp
f
980 124.744 mo
1003.33 154.144 1026.67 154.377 1050 125.443 cv
1050 117.043 li
1026.67 148.777 1003.33 149.01 980 117.744 cv
980 124.744 li
cp
@
976.969 122.994 mo
963.175 157.901 974.639 178.225 1011.36 183.965 cv
1018.64 179.765 li
979.488 175.425 967.62 155.334 983.031 119.494 cv
976.969 122.994 li
cp
f
976.969 122.994 mo
963.175 157.901 974.639 178.225 1011.36 183.965 cv
1018.64 179.765 li
979.488 175.425 967.62 155.334 983.031 119.494 cv
976.969 122.994 li
cp
@
976.969 119.494 mo
939.841 125.001 927.973 145.091 941.362 179.765 cv
948.638 183.965 li
932.822 147.892 944.287 127.567 983.031 122.994 cv
976.969 119.494 li
cp
f
976.969 119.494 mo
939.841 125.001 927.973 145.091 941.362 179.765 cv
948.638 183.965 li
932.822 147.892 944.287 127.567 983.031 122.994 cv
976.969 119.494 li
cp
@
980 117.744 mo
956.667 88.3438 933.333 88.1104 910 117.043 cv
910 125.443 li
933.333 93.71 956.667 93.4771 980 124.744 cv
980 117.744 li
cp
f
980 117.744 mo
956.667 88.3438 933.333 88.1104 910 117.043 cv
910 125.443 li
933.333 93.71 956.667 93.4771 980 124.744 cv
980 117.744 li
cp
@
983.031 119.494 mo
996.825 84.5864 985.361 64.2622 948.638 58.5215 cv
941.362 62.7217 li
980.512 67.0625 992.38 87.1528 976.969 122.994 cv
983.031 119.494 li
cp
f
983.031 119.494 mo
996.825 84.5864 985.361 64.2622 948.638 58.5215 cv
941.362 62.7217 li
980.512 67.0625 992.38 87.1528 976.969 122.994 cv
983.031 119.494 li
cp
@
983.031 122.994 mo
1020.16 117.486 1032.03 97.3955 1018.64 62.7217 cv
1011.36 58.5215 li
1027.18 94.5957 1015.71 114.919 976.969 119.494 cv
983.031 122.994 li
cp
f
983.031 122.994 mo
1020.16 117.486 1032.03 97.3955 1018.64 62.7217 cv
1011.36 58.5215 li
1027.18 94.5957 1015.71 114.919 976.969 119.494 cv
983.031 122.994 li
cp
@
-70 245.987 mo
-46.6665 275.387 -23.3335 275.621 0 246.687 cv
0 238.287 li
-23.3335 270.021 -46.6665 270.254 -70 238.987 cv
-70 245.987 li
cp
f
-70 245.987 mo
-46.6665 275.387 -23.3335 275.621 0 246.687 cv
0 238.287 li
-23.3335 270.021 -46.6665 270.254 -70 238.987 cv
-70 245.987 li
cp
@
70 245.987 mo
93.3335 275.387 116.667 275.621 140 246.687 cv
140 238.287 li
116.667 270.021 93.3335 270.254 70 238.987 cv
70 245.987 li
cp
f
70 245.987 mo
93.3335 275.387 116.667 275.621 140 246.687 cv
140 238.287 li
116.667 270.021 93.3335 270.254 70 238.987 cv
70 245.987 li
cp
@
66.9688 244.237 mo
53.1743 279.145 64.6392 299.468 101.363 305.209 cv
108.637 301.009 li
69.4888 296.668 57.6201 276.578 73.0313 240.737 cv
66.9688 244.237 li
cp
f
66.9688 244.237 mo
53.1743 279.145 64.6392 299.468 101.363 305.209 cv
108.637 301.009 li
69.4888 296.668 57.6201 276.578 73.0313 240.737 cv
66.9688 244.237 li
cp
@
66.9688 240.737 mo
29.8413 246.244 17.9722 266.335 31.3628 301.009 cv
38.6372 305.209 li
22.8223 269.135 34.2866 248.811 73.0313 244.237 cv
66.9688 240.737 li
cp
f
66.9688 240.737 mo
29.8413 246.244 17.9722 266.335 31.3628 301.009 cv
38.6372 305.209 li
22.8223 269.135 34.2866 248.811 73.0313 244.237 cv
66.9688 240.737 li
cp
@
70 238.987 mo
46.6665 209.587 23.3335 209.354 0 238.287 cv
0 246.687 li
23.3335 214.954 46.6665 214.721 70 245.987 cv
70 238.987 li
cp
f
70 238.987 mo
46.6665 209.587 23.3335 209.354 0 238.287 cv
0 246.687 li
23.3335 214.954 46.6665 214.721 70 245.987 cv
70 238.987 li
cp
@
73.0313 240.737 mo
86.8257 205.83 75.3608 185.506 38.6372 179.766 cv
31.3628 183.965 li
70.5112 188.306 82.3799 208.396 66.9688 244.237 cv
73.0313 240.737 li
cp
f
73.0313 240.737 mo
86.8257 205.83 75.3608 185.506 38.6372 179.766 cv
31.3628 183.965 li
70.5112 188.306 82.3799 208.396 66.9688 244.237 cv
73.0313 240.737 li
cp
@
73.0313 244.237 mo
110.159 238.73 122.028 218.639 108.637 183.965 cv
101.363 179.766 li
117.178 215.839 105.713 236.163 66.9688 240.737 cv
73.0313 244.237 li
cp
f
73.0313 244.237 mo
110.159 238.73 122.028 218.639 108.637 183.965 cv
101.363 179.766 li
117.178 215.839 105.713 236.163 66.9688 240.737 cv
73.0313 244.237 li
cp
@
210 245.987 mo
233.333 275.387 256.667 275.621 280 246.687 cv
280 238.287 li
256.667 270.021 233.333 270.254 210 238.987 cv
210 245.987 li
cp
f
210 245.987 mo
233.333 275.387 256.667 275.621 280 246.687 cv
280 238.287 li
256.667 270.021 233.333 270.254 210 238.987 cv
210 245.987 li
cp
@
206.969 244.237 mo
193.174 279.145 204.639 299.468 241.363 305.209 cv
248.637 301.009 li
209.489 296.668 197.62 276.578 213.031 240.737 cv
206.969 244.237 li
cp
f
206.969 244.237 mo
193.174 279.145 204.639 299.468 241.363 305.209 cv
248.637 301.009 li
209.489 296.668 197.62 276.578 213.031 240.737 cv
206.969 244.237 li
cp
@
206.969 240.737 mo
169.841 246.244 157.972 266.335 171.363 301.009 cv
178.637 305.209 li
162.822 269.135 174.287 248.811 213.031 244.237 cv
206.969 240.737 li
cp
f
206.969 240.737 mo
169.841 246.244 157.972 266.335 171.363 301.009 cv
178.637 305.209 li
162.822 269.135 174.287 248.811 213.031 244.237 cv
206.969 240.737 li
cp
@
210 238.987 mo
186.667 209.587 163.333 209.354 140 238.287 cv
140 246.687 li
163.333 214.954 186.667 214.721 210 245.987 cv
210 238.987 li
cp
f
210 238.987 mo
186.667 209.587 163.333 209.354 140 238.287 cv
140 246.687 li
163.333 214.954 186.667 214.721 210 245.987 cv
210 238.987 li
cp
@
213.031 240.737 mo
226.826 205.83 215.361 185.506 178.637 179.766 cv
171.363 183.965 li
210.511 188.306 222.38 208.396 206.969 244.237 cv
213.031 240.737 li
cp
f
213.031 240.737 mo
226.826 205.83 215.361 185.506 178.637 179.766 cv
171.363 183.965 li
210.511 188.306 222.38 208.396 206.969 244.237 cv
213.031 240.737 li
cp
@
213.031 244.237 mo
250.159 238.73 262.028 218.639 248.637 183.965 cv
241.363 179.766 li
257.178 215.839 245.713 236.163 206.969 240.737 cv
213.031 244.237 li
cp
f
213.031 244.237 mo
250.159 238.73 262.028 218.639 248.637 183.965 cv
241.363 179.766 li
257.178 215.839 245.713 236.163 206.969 240.737 cv
213.031 244.237 li
cp
@
350 245.987 mo
373.333 275.387 396.667 275.621 420 246.687 cv
420 238.287 li
396.667 270.021 373.333 270.254 350 238.987 cv
350 245.987 li
cp
f
350 245.987 mo
373.333 275.387 396.667 275.621 420 246.687 cv
420 238.287 li
396.667 270.021 373.333 270.254 350 238.987 cv
350 245.987 li
cp
@
346.969 244.237 mo
333.175 279.145 344.639 299.468 381.362 305.209 cv
388.638 301.009 li
349.488 296.668 337.62 276.578 353.031 240.737 cv
346.969 244.237 li
cp
f
346.969 244.237 mo
333.175 279.145 344.639 299.468 381.362 305.209 cv
388.638 301.009 li
349.488 296.668 337.62 276.578 353.031 240.737 cv
346.969 244.237 li
cp
@
346.969 240.737 mo
309.841 246.244 297.972 266.335 311.362 301.009 cv
318.638 305.209 li
302.822 269.135 314.287 248.811 353.031 244.237 cv
346.969 240.737 li
cp
f
346.969 240.737 mo
309.841 246.244 297.972 266.335 311.362 301.009 cv
318.638 305.209 li
302.822 269.135 314.287 248.811 353.031 244.237 cv
346.969 240.737 li
cp
@
350 238.987 mo
326.667 209.587 303.333 209.354 280 238.287 cv
280 246.687 li
303.333 214.954 326.667 214.721 350 245.987 cv
350 238.987 li
cp
f
350 238.987 mo
326.667 209.587 303.333 209.354 280 238.287 cv
280 246.687 li
303.333 214.954 326.667 214.721 350 245.987 cv
350 238.987 li
cp
@
353.031 240.737 mo
366.825 205.83 355.361 185.506 318.638 179.766 cv
311.362 183.965 li
350.512 188.306 362.38 208.396 346.969 244.237 cv
353.031 240.737 li
cp
f
353.031 240.737 mo
366.825 205.83 355.361 185.506 318.638 179.766 cv
311.362 183.965 li
350.512 188.306 362.38 208.396 346.969 244.237 cv
353.031 240.737 li
cp
@
353.031 244.237 mo
390.159 238.73 402.027 218.639 388.638 183.965 cv
381.362 179.766 li
397.178 215.839 385.713 236.163 346.969 240.737 cv
353.031 244.237 li
cp
f
353.031 244.237 mo
390.159 238.73 402.027 218.639 388.638 183.965 cv
381.362 179.766 li
397.178 215.839 385.713 236.163 346.969 240.737 cv
353.031 244.237 li
cp
@
490 245.987 mo
513.333 275.387 536.667 275.621 560 246.687 cv
560 238.287 li
536.667 270.021 513.333 270.254 490 238.987 cv
490 245.987 li
cp
f
490 245.987 mo
513.333 275.387 536.667 275.621 560 246.687 cv
560 238.287 li
536.667 270.021 513.333 270.254 490 238.987 cv
490 245.987 li
cp
@
486.969 244.237 mo
473.175 279.145 484.639 299.468 521.362 305.209 cv
528.638 301.009 li
489.488 296.668 477.62 276.578 493.031 240.737 cv
486.969 244.237 li
cp
f
486.969 244.237 mo
473.175 279.145 484.639 299.468 521.362 305.209 cv
528.638 301.009 li
489.488 296.668 477.62 276.578 493.031 240.737 cv
486.969 244.237 li
cp
@
486.969 240.737 mo
449.841 246.244 437.973 266.335 451.362 301.009 cv
458.638 305.209 li
442.822 269.135 454.287 248.811 493.031 244.237 cv
486.969 240.737 li
cp
f
486.969 240.737 mo
449.841 246.244 437.973 266.335 451.362 301.009 cv
458.638 305.209 li
442.822 269.135 454.287 248.811 493.031 244.237 cv
486.969 240.737 li
cp
@
490 238.987 mo
466.667 209.587 443.333 209.354 420 238.287 cv
420 246.687 li
443.333 214.954 466.667 214.721 490 245.987 cv
490 238.987 li
cp
f
490 238.987 mo
466.667 209.587 443.333 209.354 420 238.287 cv
420 246.687 li
443.333 214.954 466.667 214.721 490 245.987 cv
490 238.987 li
cp
@
493.031 240.737 mo
506.825 205.83 495.361 185.506 458.638 179.766 cv
451.362 183.965 li
490.512 188.306 502.38 208.396 486.969 244.237 cv
493.031 240.737 li
cp
f
493.031 240.737 mo
506.825 205.83 495.361 185.506 458.638 179.766 cv
451.362 183.965 li
490.512 188.306 502.38 208.396 486.969 244.237 cv
493.031 240.737 li
cp
@
493.031 244.237 mo
530.159 238.73 542.027 218.639 528.638 183.965 cv
521.362 179.766 li
537.178 215.839 525.713 236.163 486.969 240.737 cv
493.031 244.237 li
cp
f
493.031 244.237 mo
530.159 238.73 542.027 218.639 528.638 183.965 cv
521.362 179.766 li
537.178 215.839 525.713 236.163 486.969 240.737 cv
493.031 244.237 li
cp
@
630 245.987 mo
653.333 275.387 676.667 275.621 700 246.687 cv
700 238.287 li
676.667 270.021 653.333 270.254 630 238.987 cv
630 245.987 li
cp
f
630 245.987 mo
653.333 275.387 676.667 275.621 700 246.687 cv
700 238.287 li
676.667 270.021 653.333 270.254 630 238.987 cv
630 245.987 li
cp
@
626.969 244.237 mo
613.175 279.145 624.639 299.468 661.362 305.209 cv
668.638 301.009 li
629.488 296.668 617.62 276.578 633.031 240.737 cv
626.969 244.237 li
cp
f
626.969 244.237 mo
613.175 279.145 624.639 299.468 661.362 305.209 cv
668.638 301.009 li
629.488 296.668 617.62 276.578 633.031 240.737 cv
626.969 244.237 li
cp
@
626.969 240.737 mo
589.841 246.244 577.973 266.335 591.362 301.009 cv
598.638 305.209 li
582.822 269.135 594.287 248.811 633.031 244.237 cv
626.969 240.737 li
cp
f
626.969 240.737 mo
589.841 246.244 577.973 266.335 591.362 301.009 cv
598.638 305.209 li
582.822 269.135 594.287 248.811 633.031 244.237 cv
626.969 240.737 li
cp
@
630 238.987 mo
606.667 209.587 583.333 209.354 560 238.287 cv
560 246.687 li
583.333 214.954 606.667 214.721 630 245.987 cv
630 238.987 li
cp
f
630 238.987 mo
606.667 209.587 583.333 209.354 560 238.287 cv
560 246.687 li
583.333 214.954 606.667 214.721 630 245.987 cv
630 238.987 li
cp
@
633.031 240.737 mo
646.825 205.83 635.361 185.506 598.638 179.766 cv
591.362 183.965 li
630.512 188.306 642.38 208.396 626.969 244.237 cv
633.031 240.737 li
cp
f
633.031 240.737 mo
646.825 205.83 635.361 185.506 598.638 179.766 cv
591.362 183.965 li
630.512 188.306 642.38 208.396 626.969 244.237 cv
633.031 240.737 li
cp
@
633.031 244.237 mo
670.159 238.73 682.027 218.639 668.638 183.965 cv
661.362 179.766 li
677.178 215.839 665.713 236.163 626.969 240.737 cv
633.031 244.237 li
cp
f
633.031 244.237 mo
670.159 238.73 682.027 218.639 668.638 183.965 cv
661.362 179.766 li
677.178 215.839 665.713 236.163 626.969 240.737 cv
633.031 244.237 li
cp
@
770 245.987 mo
793.333 275.387 816.667 275.621 840 246.687 cv
840 238.287 li
816.667 270.021 793.333 270.254 770 238.987 cv
770 245.987 li
cp
f
770 245.987 mo
793.333 275.387 816.667 275.621 840 246.687 cv
840 238.287 li
816.667 270.021 793.333 270.254 770 238.987 cv
770 245.987 li
cp
@
766.969 244.237 mo
753.175 279.145 764.639 299.468 801.362 305.209 cv
808.638 301.009 li
769.488 296.668 757.62 276.578 773.031 240.737 cv
766.969 244.237 li
cp
f
766.969 244.237 mo
753.175 279.145 764.639 299.468 801.362 305.209 cv
808.638 301.009 li
769.488 296.668 757.62 276.578 773.031 240.737 cv
766.969 244.237 li
cp
@
766.969 240.737 mo
729.841 246.244 717.973 266.335 731.362 301.009 cv
738.638 305.209 li
722.822 269.135 734.287 248.811 773.031 244.237 cv
766.969 240.737 li
cp
f
766.969 240.737 mo
729.841 246.244 717.973 266.335 731.362 301.009 cv
738.638 305.209 li
722.822 269.135 734.287 248.811 773.031 244.237 cv
766.969 240.737 li
cp
@
770 238.987 mo
746.667 209.587 723.333 209.354 700 238.287 cv
700 246.687 li
723.333 214.954 746.667 214.721 770 245.987 cv
770 238.987 li
cp
f
770 238.987 mo
746.667 209.587 723.333 209.354 700 238.287 cv
700 246.687 li
723.333 214.954 746.667 214.721 770 245.987 cv
770 238.987 li
cp
@
773.031 240.737 mo
786.825 205.83 775.361 185.506 738.638 179.766 cv
731.362 183.965 li
770.512 188.306 782.38 208.396 766.969 244.237 cv
773.031 240.737 li
cp
f
773.031 240.737 mo
786.825 205.83 775.361 185.506 738.638 179.766 cv
731.362 183.965 li
770.512 188.306 782.38 208.396 766.969 244.237 cv
773.031 240.737 li
cp
@
773.031 244.237 mo
810.159 238.73 822.027 218.639 808.638 183.965 cv
801.362 179.766 li
817.178 215.839 805.713 236.163 766.969 240.737 cv
773.031 244.237 li
cp
f
773.031 244.237 mo
810.159 238.73 822.027 218.639 808.638 183.965 cv
801.362 179.766 li
817.178 215.839 805.713 236.163 766.969 240.737 cv
773.031 244.237 li
cp
@
910 245.987 mo
933.333 275.387 956.667 275.621 980 246.687 cv
980 238.287 li
956.667 270.021 933.333 270.254 910 238.987 cv
910 245.987 li
cp
f
910 245.987 mo
933.333 275.387 956.667 275.621 980 246.687 cv
980 238.287 li
956.667 270.021 933.333 270.254 910 238.987 cv
910 245.987 li
cp
@
906.969 244.237 mo
893.175 279.145 904.639 299.468 941.362 305.209 cv
948.638 301.009 li
909.488 296.668 897.62 276.578 913.031 240.737 cv
906.969 244.237 li
cp
f
906.969 244.237 mo
893.175 279.145 904.639 299.468 941.362 305.209 cv
948.638 301.009 li
909.488 296.668 897.62 276.578 913.031 240.737 cv
906.969 244.237 li
cp
@
906.969 240.737 mo
869.841 246.244 857.973 266.335 871.362 301.009 cv
878.638 305.209 li
862.822 269.135 874.287 248.811 913.031 244.237 cv
906.969 240.737 li
cp
f
906.969 240.737 mo
869.841 246.244 857.973 266.335 871.362 301.009 cv
878.638 305.209 li
862.822 269.135 874.287 248.811 913.031 244.237 cv
906.969 240.737 li
cp
@
910 238.987 mo
886.667 209.587 863.333 209.354 840 238.287 cv
840 246.687 li
863.333 214.954 886.667 214.721 910 245.987 cv
910 238.987 li
cp
f
910 238.987 mo
886.667 209.587 863.333 209.354 840 238.287 cv
840 246.687 li
863.333 214.954 886.667 214.721 910 245.987 cv
910 238.987 li
cp
@
913.031 240.737 mo
926.825 205.83 915.361 185.506 878.638 179.766 cv
871.362 183.965 li
910.512 188.306 922.38 208.396 906.969 244.237 cv
913.031 240.737 li
cp
f
913.031 240.737 mo
926.825 205.83 915.361 185.506 878.638 179.766 cv
871.362 183.965 li
910.512 188.306 922.38 208.396 906.969 244.237 cv
913.031 240.737 li
cp
@
913.031 244.237 mo
950.159 238.73 962.027 218.639 948.638 183.965 cv
941.362 179.766 li
957.178 215.839 945.713 236.163 906.969 240.737 cv
913.031 244.237 li
cp
f
913.031 244.237 mo
950.159 238.73 962.027 218.639 948.638 183.965 cv
941.362 179.766 li
957.178 215.839 945.713 236.163 906.969 240.737 cv
913.031 244.237 li
cp
@
1050 238.987 mo
1026.67 209.587 1003.33 209.354 980 238.287 cv
980 246.687 li
1003.33 214.954 1026.67 214.721 1050 245.987 cv
1050 238.987 li
cp
f
1050 238.987 mo
1026.67 209.587 1003.33 209.354 980 238.287 cv
980 246.687 li
1003.33 214.954 1026.67 214.721 1050 245.987 cv
1050 238.987 li
cp
@
0 367.23 mo
23.3335 396.631 46.6665 396.864 70 367.931 cv
70 359.531 li
46.6665 391.264 23.3335 391.498 0 360.23 cv
0 367.23 li
cp
f
0 367.23 mo
23.3335 396.631 46.6665 396.864 70 367.931 cv
70 359.531 li
46.6665 391.264 23.3335 391.498 0 360.23 cv
0 367.23 li
cp
@
-3.03125 365.48 mo
-16.8257 400.388 -5.36084 420.712 31.3628 426.452 cv
38.6372 422.252 li
-.51123 417.912 -12.3799 397.821 3.03125 361.98 cv
-3.03125 365.48 li
cp
f
-3.03125 365.48 mo
-16.8257 400.388 -5.36084 420.712 31.3628 426.452 cv
38.6372 422.252 li
-.51123 417.912 -12.3799 397.821 3.03125 361.98 cv
-3.03125 365.48 li
cp
@
-3.03125 361.98 mo
-40.1587 367.488 -52.0278 387.579 -38.6372 422.252 cv
-31.3628 426.452 li
-47.1777 390.378 -35.7134 370.055 3.03125 365.48 cv
-3.03125 361.98 li
cp
f
-3.03125 361.98 mo
-40.1587 367.488 -52.0278 387.579 -38.6372 422.252 cv
-31.3628 426.452 li
-47.1777 390.378 -35.7134 370.055 3.03125 365.48 cv
-3.03125 361.98 li
cp
@
0 360.23 mo
-23.3335 330.831 -46.6665 330.597 -70 359.531 cv
-70 367.931 li
-46.6665 336.197 -23.3335 335.964 0 367.23 cv
0 360.23 li
cp
f
0 360.23 mo
-23.3335 330.831 -46.6665 330.597 -70 359.531 cv
-70 367.931 li
-46.6665 336.197 -23.3335 335.964 0 367.23 cv
0 360.23 li
cp
@
3.03125 361.98 mo
16.8257 327.073 5.36084 306.75 -31.3628 301.009 cv
-38.6372 305.209 li
.51123 309.549 12.3799 329.64 -3.03125 365.48 cv
3.03125 361.98 li
cp
f
3.03125 361.98 mo
16.8257 327.073 5.36084 306.75 -31.3628 301.009 cv
-38.6372 305.209 li
.51123 309.549 12.3799 329.64 -3.03125 365.48 cv
3.03125 361.98 li
cp
@
3.03125 365.48 mo
40.1587 359.974 52.0278 339.883 38.6372 305.209 cv
31.3628 301.009 li
47.1777 337.083 35.7134 357.407 -3.03125 361.98 cv
3.03125 365.48 li
cp
f
3.03125 365.48 mo
40.1587 359.974 52.0278 339.883 38.6372 305.209 cv
31.3628 301.009 li
47.1777 337.083 35.7134 357.407 -3.03125 361.98 cv
3.03125 365.48 li
cp
@
140 367.23 mo
163.333 396.631 186.667 396.864 210 367.931 cv
210 359.531 li
186.667 391.264 163.333 391.498 140 360.23 cv
140 367.23 li
cp
f
140 367.23 mo
163.333 396.631 186.667 396.864 210 367.931 cv
210 359.531 li
186.667 391.264 163.333 391.498 140 360.23 cv
140 367.23 li
cp
@
136.969 365.48 mo
123.174 400.388 134.639 420.712 171.363 426.452 cv
178.637 422.252 li
139.489 417.912 127.62 397.821 143.031 361.98 cv
136.969 365.48 li
cp
f
136.969 365.48 mo
123.174 400.388 134.639 420.712 171.363 426.452 cv
178.637 422.252 li
139.489 417.912 127.62 397.821 143.031 361.98 cv
136.969 365.48 li
cp
@
136.969 361.98 mo
99.8413 367.488 87.9722 387.579 101.363 422.252 cv
108.637 426.452 li
92.8223 390.378 104.287 370.055 143.031 365.48 cv
136.969 361.98 li
cp
f
136.969 361.98 mo
99.8413 367.488 87.9722 387.579 101.363 422.252 cv
108.637 426.452 li
92.8223 390.378 104.287 370.055 143.031 365.48 cv
136.969 361.98 li
cp
@
140 360.23 mo
116.667 330.831 93.3335 330.597 70 359.531 cv
70 367.931 li
93.3335 336.197 116.667 335.964 140 367.23 cv
140 360.23 li
cp
f
140 360.23 mo
116.667 330.831 93.3335 330.597 70 359.531 cv
70 367.931 li
93.3335 336.197 116.667 335.964 140 367.23 cv
140 360.23 li
cp
@
143.031 361.98 mo
156.826 327.073 145.361 306.75 108.637 301.009 cv
101.363 305.209 li
140.511 309.549 152.38 329.64 136.969 365.48 cv
143.031 361.98 li
cp
f
143.031 361.98 mo
156.826 327.073 145.361 306.75 108.637 301.009 cv
101.363 305.209 li
140.511 309.549 152.38 329.64 136.969 365.48 cv
143.031 361.98 li
cp
@
143.031 365.48 mo
180.159 359.974 192.028 339.883 178.637 305.209 cv
171.363 301.009 li
187.178 337.083 175.713 357.407 136.969 361.98 cv
143.031 365.48 li
cp
f
143.031 365.48 mo
180.159 359.974 192.028 339.883 178.637 305.209 cv
171.363 301.009 li
187.178 337.083 175.713 357.407 136.969 361.98 cv
143.031 365.48 li
cp
@
280 367.23 mo
303.333 396.631 326.667 396.864 350 367.931 cv
350 359.531 li
326.667 391.264 303.333 391.498 280 360.23 cv
280 367.23 li
cp
f
280 367.23 mo
303.333 396.631 326.667 396.864 350 367.931 cv
350 359.531 li
326.667 391.264 303.333 391.498 280 360.23 cv
280 367.23 li
cp
@
276.969 365.48 mo
263.174 400.388 274.639 420.712 311.362 426.452 cv
318.638 422.252 li
279.489 417.912 267.62 397.821 283.031 361.98 cv
276.969 365.48 li
cp
f
276.969 365.48 mo
263.174 400.388 274.639 420.712 311.362 426.452 cv
318.638 422.252 li
279.489 417.912 267.62 397.821 283.031 361.98 cv
276.969 365.48 li
cp
@
276.969 361.98 mo
239.841 367.488 227.972 387.579 241.363 422.252 cv
248.637 426.452 li
232.822 390.378 244.287 370.055 283.031 365.48 cv
276.969 361.98 li
cp
f
276.969 361.98 mo
239.841 367.488 227.972 387.579 241.363 422.252 cv
248.637 426.452 li
232.822 390.378 244.287 370.055 283.031 365.48 cv
276.969 361.98 li
cp
@
280 360.23 mo
256.667 330.831 233.333 330.597 210 359.531 cv
210 367.931 li
233.333 336.197 256.667 335.964 280 367.23 cv
280 360.23 li
cp
f
280 360.23 mo
256.667 330.831 233.333 330.597 210 359.531 cv
210 367.931 li
233.333 336.197 256.667 335.964 280 367.23 cv
280 360.23 li
cp
@
283.031 361.98 mo
296.826 327.073 285.361 306.75 248.637 301.009 cv
241.363 305.209 li
280.511 309.549 292.38 329.64 276.969 365.48 cv
283.031 361.98 li
cp
f
283.031 361.98 mo
296.826 327.073 285.361 306.75 248.637 301.009 cv
241.363 305.209 li
280.511 309.549 292.38 329.64 276.969 365.48 cv
283.031 361.98 li
cp
@
283.031 365.48 mo
320.159 359.974 332.027 339.883 318.638 305.209 cv
311.362 301.009 li
327.178 337.083 315.713 357.407 276.969 361.98 cv
283.031 365.48 li
cp
f
283.031 365.48 mo
320.159 359.974 332.027 339.883 318.638 305.209 cv
311.362 301.009 li
327.178 337.083 315.713 357.407 276.969 361.98 cv
283.031 365.48 li
cp
@
420 367.23 mo
443.333 396.631 466.667 396.864 490 367.931 cv
490 359.531 li
466.667 391.264 443.333 391.498 420 360.23 cv
420 367.23 li
cp
f
420 367.23 mo
443.333 396.631 466.667 396.864 490 367.931 cv
490 359.531 li
466.667 391.264 443.333 391.498 420 360.23 cv
420 367.23 li
cp
@
416.969 365.48 mo
403.175 400.388 414.639 420.712 451.362 426.452 cv
458.638 422.252 li
419.488 417.912 407.62 397.821 423.031 361.98 cv
416.969 365.48 li
cp
f
416.969 365.48 mo
403.175 400.388 414.639 420.712 451.362 426.452 cv
458.638 422.252 li
419.488 417.912 407.62 397.821 423.031 361.98 cv
416.969 365.48 li
cp
@
416.969 361.98 mo
379.841 367.488 367.973 387.579 381.362 422.252 cv
388.638 426.452 li
372.822 390.378 384.287 370.055 423.031 365.48 cv
416.969 361.98 li
cp
f
416.969 361.98 mo
379.841 367.488 367.973 387.579 381.362 422.252 cv
388.638 426.452 li
372.822 390.378 384.287 370.055 423.031 365.48 cv
416.969 361.98 li
cp
@
420 360.23 mo
396.667 330.831 373.333 330.597 350 359.531 cv
350 367.931 li
373.333 336.197 396.667 335.964 420 367.23 cv
420 360.23 li
cp
f
420 360.23 mo
396.667 330.831 373.333 330.597 350 359.531 cv
350 367.931 li
373.333 336.197 396.667 335.964 420 367.23 cv
420 360.23 li
cp
@
423.031 361.98 mo
436.825 327.073 425.361 306.75 388.638 301.009 cv
381.362 305.209 li
420.512 309.549 432.38 329.64 416.969 365.48 cv
423.031 361.98 li
cp
f
423.031 361.98 mo
436.825 327.073 425.361 306.75 388.638 301.009 cv
381.362 305.209 li
420.512 309.549 432.38 329.64 416.969 365.48 cv
423.031 361.98 li
cp
@
423.031 365.48 mo
460.159 359.974 472.027 339.883 458.638 305.209 cv
451.362 301.009 li
467.178 337.083 455.713 357.407 416.969 361.98 cv
423.031 365.48 li
cp
f
423.031 365.48 mo
460.159 359.974 472.027 339.883 458.638 305.209 cv
451.362 301.009 li
467.178 337.083 455.713 357.407 416.969 361.98 cv
423.031 365.48 li
cp
@
560 367.23 mo
583.333 396.631 606.667 396.864 630 367.931 cv
630 359.531 li
606.667 391.264 583.333 391.498 560 360.23 cv
560 367.23 li
cp
f
560 367.23 mo
583.333 396.631 606.667 396.864 630 367.931 cv
630 359.531 li
606.667 391.264 583.333 391.498 560 360.23 cv
560 367.23 li
cp
@
556.969 365.48 mo
543.175 400.388 554.639 420.712 591.362 426.452 cv
598.638 422.252 li
559.488 417.912 547.62 397.821 563.031 361.98 cv
556.969 365.48 li
cp
f
556.969 365.48 mo
543.175 400.388 554.639 420.712 591.362 426.452 cv
598.638 422.252 li
559.488 417.912 547.62 397.821 563.031 361.98 cv
556.969 365.48 li
cp
@
556.969 361.98 mo
519.841 367.488 507.973 387.579 521.362 422.252 cv
528.638 426.452 li
512.822 390.378 524.287 370.055 563.031 365.48 cv
556.969 361.98 li
cp
f
556.969 361.98 mo
519.841 367.488 507.973 387.579 521.362 422.252 cv
528.638 426.452 li
512.822 390.378 524.287 370.055 563.031 365.48 cv
556.969 361.98 li
cp
@
560 360.23 mo
536.667 330.831 513.333 330.597 490 359.531 cv
490 367.931 li
513.333 336.197 536.667 335.964 560 367.23 cv
560 360.23 li
cp
f
560 360.23 mo
536.667 330.831 513.333 330.597 490 359.531 cv
490 367.931 li
513.333 336.197 536.667 335.964 560 367.23 cv
560 360.23 li
cp
@
563.031 361.98 mo
576.825 327.073 565.361 306.75 528.638 301.009 cv
521.362 305.209 li
560.512 309.549 572.38 329.64 556.969 365.48 cv
563.031 361.98 li
cp
f
563.031 361.98 mo
576.825 327.073 565.361 306.75 528.638 301.009 cv
521.362 305.209 li
560.512 309.549 572.38 329.64 556.969 365.48 cv
563.031 361.98 li
cp
@
563.031 365.48 mo
600.159 359.974 612.027 339.883 598.638 305.209 cv
591.362 301.009 li
607.178 337.083 595.713 357.407 556.969 361.98 cv
563.031 365.48 li
cp
f
563.031 365.48 mo
600.159 359.974 612.027 339.883 598.638 305.209 cv
591.362 301.009 li
607.178 337.083 595.713 357.407 556.969 361.98 cv
563.031 365.48 li
cp
@
700 367.23 mo
723.333 396.631 746.667 396.864 770 367.931 cv
770 359.531 li
746.667 391.264 723.333 391.498 700 360.23 cv
700 367.23 li
cp
f
700 367.23 mo
723.333 396.631 746.667 396.864 770 367.931 cv
770 359.531 li
746.667 391.264 723.333 391.498 700 360.23 cv
700 367.23 li
cp
@
696.969 365.48 mo
683.175 400.388 694.639 420.712 731.362 426.452 cv
738.638 422.252 li
699.488 417.912 687.62 397.821 703.031 361.98 cv
696.969 365.48 li
cp
f
696.969 365.48 mo
683.175 400.388 694.639 420.712 731.362 426.452 cv
738.638 422.252 li
699.488 417.912 687.62 397.821 703.031 361.98 cv
696.969 365.48 li
cp
@
696.969 361.98 mo
659.841 367.488 647.973 387.579 661.362 422.252 cv
668.638 426.452 li
652.822 390.378 664.287 370.055 703.031 365.48 cv
696.969 361.98 li
cp
f
696.969 361.98 mo
659.841 367.488 647.973 387.579 661.362 422.252 cv
668.638 426.452 li
652.822 390.378 664.287 370.055 703.031 365.48 cv
696.969 361.98 li
cp
@
700 360.23 mo
676.667 330.831 653.333 330.597 630 359.531 cv
630 367.931 li
653.333 336.197 676.667 335.964 700 367.23 cv
700 360.23 li
cp
f
700 360.23 mo
676.667 330.831 653.333 330.597 630 359.531 cv
630 367.931 li
653.333 336.197 676.667 335.964 700 367.23 cv
700 360.23 li
cp
@
703.031 361.98 mo
716.825 327.073 705.361 306.75 668.638 301.009 cv
661.362 305.209 li
700.512 309.549 712.38 329.64 696.969 365.48 cv
703.031 361.98 li
cp
f
703.031 361.98 mo
716.825 327.073 705.361 306.75 668.638 301.009 cv
661.362 305.209 li
700.512 309.549 712.38 329.64 696.969 365.48 cv
703.031 361.98 li
cp
@
703.031 365.48 mo
740.159 359.974 752.027 339.883 738.638 305.209 cv
731.362 301.009 li
747.178 337.083 735.713 357.407 696.969 361.98 cv
703.031 365.48 li
cp
f
703.031 365.48 mo
740.159 359.974 752.027 339.883 738.638 305.209 cv
731.362 301.009 li
747.178 337.083 735.713 357.407 696.969 361.98 cv
703.031 365.48 li
cp
@
840 367.23 mo
863.333 396.631 886.667 396.864 910 367.931 cv
910 359.531 li
886.667 391.264 863.333 391.498 840 360.23 cv
840 367.23 li
cp
f
840 367.23 mo
863.333 396.631 886.667 396.864 910 367.931 cv
910 359.531 li
886.667 391.264 863.333 391.498 840 360.23 cv
840 367.23 li
cp
@
836.969 365.48 mo
823.175 400.388 834.639 420.712 871.362 426.452 cv
878.638 422.252 li
839.488 417.912 827.62 397.821 843.031 361.98 cv
836.969 365.48 li
cp
f
836.969 365.48 mo
823.175 400.388 834.639 420.712 871.362 426.452 cv
878.638 422.252 li
839.488 417.912 827.62 397.821 843.031 361.98 cv
836.969 365.48 li
cp
@
836.969 361.98 mo
799.841 367.488 787.973 387.579 801.362 422.252 cv
808.638 426.452 li
792.822 390.378 804.287 370.055 843.031 365.48 cv
836.969 361.98 li
cp
f
836.969 361.98 mo
799.841 367.488 787.973 387.579 801.362 422.252 cv
808.638 426.452 li
792.822 390.378 804.287 370.055 843.031 365.48 cv
836.969 361.98 li
cp
@
840 360.23 mo
816.667 330.831 793.333 330.597 770 359.531 cv
770 367.931 li
793.333 336.197 816.667 335.964 840 367.23 cv
840 360.23 li
cp
f
840 360.23 mo
816.667 330.831 793.333 330.597 770 359.531 cv
770 367.931 li
793.333 336.197 816.667 335.964 840 367.23 cv
840 360.23 li
cp
@
843.031 361.98 mo
856.825 327.073 845.361 306.75 808.638 301.009 cv
801.362 305.209 li
840.512 309.549 852.38 329.64 836.969 365.48 cv
843.031 361.98 li
cp
f
843.031 361.98 mo
856.825 327.073 845.361 306.75 808.638 301.009 cv
801.362 305.209 li
840.512 309.549 852.38 329.64 836.969 365.48 cv
843.031 361.98 li
cp
@
843.031 365.48 mo
880.159 359.974 892.027 339.883 878.638 305.209 cv
871.362 301.009 li
887.178 337.083 875.713 357.407 836.969 361.98 cv
843.031 365.48 li
cp
f
843.031 365.48 mo
880.159 359.974 892.027 339.883 878.638 305.209 cv
871.362 301.009 li
887.178 337.083 875.713 357.407 836.969 361.98 cv
843.031 365.48 li
cp
@
980 367.23 mo
1003.33 396.631 1026.67 396.864 1050 367.931 cv
1050 359.531 li
1026.67 391.264 1003.33 391.498 980 360.23 cv
980 367.23 li
cp
f
980 367.23 mo
1003.33 396.631 1026.67 396.864 1050 367.931 cv
1050 359.531 li
1026.67 391.264 1003.33 391.498 980 360.23 cv
980 367.23 li
cp
@
976.969 365.48 mo
963.175 400.388 974.639 420.712 1011.36 426.452 cv
1018.64 422.252 li
979.488 417.912 967.62 397.821 983.031 361.98 cv
976.969 365.48 li
cp
f
976.969 365.48 mo
963.175 400.388 974.639 420.712 1011.36 426.452 cv
1018.64 422.252 li
979.488 417.912 967.62 397.821 983.031 361.98 cv
976.969 365.48 li
cp
@
976.969 361.98 mo
939.841 367.488 927.973 387.579 941.362 422.252 cv
948.638 426.452 li
932.822 390.378 944.287 370.055 983.031 365.48 cv
976.969 361.98 li
cp
f
976.969 361.98 mo
939.841 367.488 927.973 387.579 941.362 422.252 cv
948.638 426.452 li
932.822 390.378 944.287 370.055 983.031 365.48 cv
976.969 361.98 li
cp
@
980 360.23 mo
956.667 330.831 933.333 330.597 910 359.531 cv
910 367.931 li
933.333 336.197 956.667 335.964 980 367.23 cv
980 360.23 li
cp
f
980 360.23 mo
956.667 330.831 933.333 330.597 910 359.531 cv
910 367.931 li
933.333 336.197 956.667 335.964 980 367.23 cv
980 360.23 li
cp
@
983.031 361.98 mo
996.825 327.073 985.361 306.75 948.638 301.009 cv
941.362 305.209 li
980.512 309.549 992.38 329.64 976.969 365.48 cv
983.031 361.98 li
cp
f
983.031 361.98 mo
996.825 327.073 985.361 306.75 948.638 301.009 cv
941.362 305.209 li
980.512 309.549 992.38 329.64 976.969 365.48 cv
983.031 361.98 li
cp
@
983.031 365.48 mo
1020.16 359.974 1032.03 339.883 1018.64 305.209 cv
1011.36 301.009 li
1027.18 337.083 1015.71 357.407 976.969 361.98 cv
983.031 365.48 li
cp
f
983.031 365.48 mo
1020.16 359.974 1032.03 339.883 1018.64 305.209 cv
1011.36 301.009 li
1027.18 337.083 1015.71 357.407 976.969 361.98 cv
983.031 365.48 li
cp
@
-70 488.474 mo
-46.6665 517.875 -23.3335 518.107 0 489.173 cv
0 480.774 li
-23.3335 512.507 -46.6665 512.742 -70 481.475 cv
-70 488.474 li
cp
f
-70 488.474 mo
-46.6665 517.875 -23.3335 518.107 0 489.173 cv
0 480.774 li
-23.3335 512.507 -46.6665 512.742 -70 481.475 cv
-70 488.474 li
cp
@
70 488.474 mo
93.3335 517.875 116.667 518.107 140 489.173 cv
140 480.774 li
116.667 512.507 93.3335 512.742 70 481.475 cv
70 488.474 li
cp
f
70 488.474 mo
93.3335 517.875 116.667 518.107 140 489.173 cv
140 480.774 li
116.667 512.507 93.3335 512.742 70 481.475 cv
70 488.474 li
cp
@
66.9688 486.724 mo
53.1743 521.632 64.6392 541.955 101.363 547.697 cv
108.637 543.496 li
69.4888 539.156 57.6201 519.064 73.0313 483.225 cv
66.9688 486.724 li
cp
f
66.9688 486.724 mo
53.1743 521.632 64.6392 541.955 101.363 547.697 cv
108.637 543.496 li
69.4888 539.156 57.6201 519.064 73.0313 483.225 cv
66.9688 486.724 li
cp
@
66.9688 483.225 mo
29.8413 488.732 17.9722 508.822 31.3628 543.496 cv
38.6372 547.697 li
22.8223 511.623 34.2866 491.298 73.0313 486.724 cv
66.9688 483.225 li
cp
f
66.9688 483.225 mo
29.8413 488.732 17.9722 508.822 31.3628 543.496 cv
38.6372 547.697 li
22.8223 511.623 34.2866 491.298 73.0313 486.724 cv
66.9688 483.225 li
cp
@
70 481.475 mo
46.6665 452.074 23.3335 451.841 0 480.774 cv
0 489.173 li
23.3335 457.44 46.6665 457.208 70 488.474 cv
70 481.475 li
cp
f
70 481.475 mo
46.6665 452.074 23.3335 451.841 0 480.774 cv
0 489.173 li
23.3335 457.44 46.6665 457.208 70 488.474 cv
70 481.475 li
cp
@
73.0313 483.225 mo
86.8257 448.317 75.3608 427.993 38.6372 422.252 cv
31.3628 426.452 li
70.5112 430.793 82.3799 450.884 66.9688 486.724 cv
73.0313 483.225 li
cp
f
73.0313 483.225 mo
86.8257 448.317 75.3608 427.993 38.6372 422.252 cv
31.3628 426.452 li
70.5112 430.793 82.3799 450.884 66.9688 486.724 cv
73.0313 483.225 li
cp
@
73.0313 486.724 mo
110.159 481.217 122.028 461.126 108.637 426.452 cv
101.363 422.252 li
117.178 458.326 105.713 478.65 66.9688 483.225 cv
73.0313 486.724 li
cp
f
73.0313 486.724 mo
110.159 481.217 122.028 461.126 108.637 426.452 cv
101.363 422.252 li
117.178 458.326 105.713 478.65 66.9688 483.225 cv
73.0313 486.724 li
cp
@
210 488.474 mo
233.333 517.875 256.667 518.107 280 489.173 cv
280 480.774 li
256.667 512.507 233.333 512.742 210 481.475 cv
210 488.474 li
cp
f
210 488.474 mo
233.333 517.875 256.667 518.107 280 489.173 cv
280 480.774 li
256.667 512.507 233.333 512.742 210 481.475 cv
210 488.474 li
cp
@
206.969 486.724 mo
193.174 521.632 204.639 541.955 241.363 547.697 cv
248.637 543.496 li
209.489 539.156 197.62 519.064 213.031 483.225 cv
206.969 486.724 li
cp
f
206.969 486.724 mo
193.174 521.632 204.639 541.955 241.363 547.697 cv
248.637 543.496 li
209.489 539.156 197.62 519.064 213.031 483.225 cv
206.969 486.724 li
cp
@
206.969 483.225 mo
169.841 488.732 157.972 508.822 171.363 543.496 cv
178.637 547.697 li
162.822 511.623 174.287 491.298 213.031 486.724 cv
206.969 483.225 li
cp
f
206.969 483.225 mo
169.841 488.732 157.972 508.822 171.363 543.496 cv
178.637 547.697 li
162.822 511.623 174.287 491.298 213.031 486.724 cv
206.969 483.225 li
cp
@
210 481.475 mo
186.667 452.074 163.333 451.841 140 480.774 cv
140 489.173 li
163.333 457.44 186.667 457.208 210 488.474 cv
210 481.475 li
cp
f
210 481.475 mo
186.667 452.074 163.333 451.841 140 480.774 cv
140 489.173 li
163.333 457.44 186.667 457.208 210 488.474 cv
210 481.475 li
cp
@
213.031 483.225 mo
226.826 448.317 215.361 427.993 178.637 422.252 cv
171.363 426.452 li
210.511 430.793 222.38 450.884 206.969 486.724 cv
213.031 483.225 li
cp
f
213.031 483.225 mo
226.826 448.317 215.361 427.993 178.637 422.252 cv
171.363 426.452 li
210.511 430.793 222.38 450.884 206.969 486.724 cv
213.031 483.225 li
cp
@
213.031 486.724 mo
250.159 481.217 262.028 461.126 248.637 426.452 cv
241.363 422.252 li
257.178 458.326 245.713 478.65 206.969 483.225 cv
213.031 486.724 li
cp
f
213.031 486.724 mo
250.159 481.217 262.028 461.126 248.637 426.452 cv
241.363 422.252 li
257.178 458.326 245.713 478.65 206.969 483.225 cv
213.031 486.724 li
cp
@
350 488.474 mo
373.333 517.875 396.667 518.107 420 489.173 cv
420 480.774 li
396.667 512.507 373.333 512.742 350 481.475 cv
350 488.474 li
cp
f
350 488.474 mo
373.333 517.875 396.667 518.107 420 489.173 cv
420 480.774 li
396.667 512.507 373.333 512.742 350 481.475 cv
350 488.474 li
cp
@
346.969 486.724 mo
333.175 521.632 344.639 541.955 381.362 547.697 cv
388.638 543.496 li
349.488 539.156 337.62 519.064 353.031 483.225 cv
346.969 486.724 li
cp
f
346.969 486.724 mo
333.175 521.632 344.639 541.955 381.362 547.697 cv
388.638 543.496 li
349.488 539.156 337.62 519.064 353.031 483.225 cv
346.969 486.724 li
cp
@
346.969 483.225 mo
309.841 488.732 297.972 508.822 311.362 543.496 cv
318.638 547.697 li
302.822 511.623 314.287 491.298 353.031 486.724 cv
346.969 483.225 li
cp
f
346.969 483.225 mo
309.841 488.732 297.972 508.822 311.362 543.496 cv
318.638 547.697 li
302.822 511.623 314.287 491.298 353.031 486.724 cv
346.969 483.225 li
cp
@
350 481.475 mo
326.667 452.074 303.333 451.841 280 480.774 cv
280 489.173 li
303.333 457.44 326.667 457.208 350 488.474 cv
350 481.475 li
cp
f
350 481.475 mo
326.667 452.074 303.333 451.841 280 480.774 cv
280 489.173 li
303.333 457.44 326.667 457.208 350 488.474 cv
350 481.475 li
cp
@
353.031 483.225 mo
366.825 448.317 355.361 427.993 318.638 422.252 cv
311.362 426.452 li
350.512 430.793 362.38 450.884 346.969 486.724 cv
353.031 483.225 li
cp
f
353.031 483.225 mo
366.825 448.317 355.361 427.993 318.638 422.252 cv
311.362 426.452 li
350.512 430.793 362.38 450.884 346.969 486.724 cv
353.031 483.225 li
cp
@
353.031 486.724 mo
390.159 481.217 402.027 461.126 388.638 426.452 cv
381.362 422.252 li
397.178 458.326 385.713 478.65 346.969 483.225 cv
353.031 486.724 li
cp
f
353.031 486.724 mo
390.159 481.217 402.027 461.126 388.638 426.452 cv
381.362 422.252 li
397.178 458.326 385.713 478.65 346.969 483.225 cv
353.031 486.724 li
cp
@
490 488.474 mo
513.333 517.875 536.667 518.107 560 489.173 cv
560 480.774 li
536.667 512.507 513.333 512.742 490 481.475 cv
490 488.474 li
cp
f
490 488.474 mo
513.333 517.875 536.667 518.107 560 489.173 cv
560 480.774 li
536.667 512.507 513.333 512.742 490 481.475 cv
490 488.474 li
cp
@
486.969 486.724 mo
473.175 521.632 484.639 541.955 521.362 547.697 cv
528.638 543.496 li
489.488 539.156 477.62 519.064 493.031 483.225 cv
486.969 486.724 li
cp
f
486.969 486.724 mo
473.175 521.632 484.639 541.955 521.362 547.697 cv
528.638 543.496 li
489.488 539.156 477.62 519.064 493.031 483.225 cv
486.969 486.724 li
cp
@
486.969 483.225 mo
449.841 488.732 437.973 508.822 451.362 543.496 cv
458.638 547.697 li
442.822 511.623 454.287 491.298 493.031 486.724 cv
486.969 483.225 li
cp
f
486.969 483.225 mo
449.841 488.732 437.973 508.822 451.362 543.496 cv
458.638 547.697 li
442.822 511.623 454.287 491.298 493.031 486.724 cv
486.969 483.225 li
cp
@
490 481.475 mo
466.667 452.074 443.333 451.841 420 480.774 cv
420 489.173 li
443.333 457.44 466.667 457.208 490 488.474 cv
490 481.475 li
cp
f
490 481.475 mo
466.667 452.074 443.333 451.841 420 480.774 cv
420 489.173 li
443.333 457.44 466.667 457.208 490 488.474 cv
490 481.475 li
cp
@
493.031 483.225 mo
506.825 448.317 495.361 427.993 458.638 422.252 cv
451.362 426.452 li
490.512 430.793 502.38 450.884 486.969 486.724 cv
493.031 483.225 li
cp
f
493.031 483.225 mo
506.825 448.317 495.361 427.993 458.638 422.252 cv
451.362 426.452 li
490.512 430.793 502.38 450.884 486.969 486.724 cv
493.031 483.225 li
cp
@
493.031 486.724 mo
530.159 481.217 542.027 461.126 528.638 426.452 cv
521.362 422.252 li
537.178 458.326 525.713 478.65 486.969 483.225 cv
493.031 486.724 li
cp
f
493.031 486.724 mo
530.159 481.217 542.027 461.126 528.638 426.452 cv
521.362 422.252 li
537.178 458.326 525.713 478.65 486.969 483.225 cv
493.031 486.724 li
cp
@
630 488.474 mo
653.333 517.875 676.667 518.107 700 489.173 cv
700 480.774 li
676.667 512.507 653.333 512.742 630 481.475 cv
630 488.474 li
cp
f
630 488.474 mo
653.333 517.875 676.667 518.107 700 489.173 cv
700 480.774 li
676.667 512.507 653.333 512.742 630 481.475 cv
630 488.474 li
cp
@
626.969 486.724 mo
613.175 521.632 624.639 541.955 661.362 547.697 cv
668.638 543.496 li
629.488 539.156 617.62 519.064 633.031 483.225 cv
626.969 486.724 li
cp
f
626.969 486.724 mo
613.175 521.632 624.639 541.955 661.362 547.697 cv
668.638 543.496 li
629.488 539.156 617.62 519.064 633.031 483.225 cv
626.969 486.724 li
cp
@
626.969 483.225 mo
589.841 488.732 577.973 508.822 591.362 543.496 cv
598.638 547.697 li
582.822 511.623 594.287 491.298 633.031 486.724 cv
626.969 483.225 li
cp
f
626.969 483.225 mo
589.841 488.732 577.973 508.822 591.362 543.496 cv
598.638 547.697 li
582.822 511.623 594.287 491.298 633.031 486.724 cv
626.969 483.225 li
cp
@
630 481.475 mo
606.667 452.074 583.333 451.841 560 480.774 cv
560 489.173 li
583.333 457.44 606.667 457.208 630 488.474 cv
630 481.475 li
cp
f
630 481.475 mo
606.667 452.074 583.333 451.841 560 480.774 cv
560 489.173 li
583.333 457.44 606.667 457.208 630 488.474 cv
630 481.475 li
cp
@
633.031 483.225 mo
646.825 448.317 635.361 427.993 598.638 422.252 cv
591.362 426.452 li
630.512 430.793 642.38 450.884 626.969 486.724 cv
633.031 483.225 li
cp
f
633.031 483.225 mo
646.825 448.317 635.361 427.993 598.638 422.252 cv
591.362 426.452 li
630.512 430.793 642.38 450.884 626.969 486.724 cv
633.031 483.225 li
cp
@
633.031 486.724 mo
670.159 481.217 682.027 461.126 668.638 426.452 cv
661.362 422.252 li
677.178 458.326 665.713 478.65 626.969 483.225 cv
633.031 486.724 li
cp
f
633.031 486.724 mo
670.159 481.217 682.027 461.126 668.638 426.452 cv
661.362 422.252 li
677.178 458.326 665.713 478.65 626.969 483.225 cv
633.031 486.724 li
cp
@
770 488.474 mo
793.333 517.875 816.667 518.107 840 489.173 cv
840 480.774 li
816.667 512.507 793.333 512.742 770 481.475 cv
770 488.474 li
cp
f
770 488.474 mo
793.333 517.875 816.667 518.107 840 489.173 cv
840 480.774 li
816.667 512.507 793.333 512.742 770 481.475 cv
770 488.474 li
cp
@
766.969 486.724 mo
753.175 521.632 764.639 541.955 801.362 547.697 cv
808.638 543.496 li
769.488 539.156 757.62 519.064 773.031 483.225 cv
766.969 486.724 li
cp
f
766.969 486.724 mo
753.175 521.632 764.639 541.955 801.362 547.697 cv
808.638 543.496 li
769.488 539.156 757.62 519.064 773.031 483.225 cv
766.969 486.724 li
cp
@
766.969 483.225 mo
729.841 488.732 717.973 508.822 731.362 543.496 cv
738.638 547.697 li
722.822 511.623 734.287 491.298 773.031 486.724 cv
766.969 483.225 li
cp
f
766.969 483.225 mo
729.841 488.732 717.973 508.822 731.362 543.496 cv
738.638 547.697 li
722.822 511.623 734.287 491.298 773.031 486.724 cv
766.969 483.225 li
cp
@
770 481.475 mo
746.667 452.074 723.333 451.841 700 480.774 cv
700 489.173 li
723.333 457.44 746.667 457.208 770 488.474 cv
770 481.475 li
cp
f
770 481.475 mo
746.667 452.074 723.333 451.841 700 480.774 cv
700 489.173 li
723.333 457.44 746.667 457.208 770 488.474 cv
770 481.475 li
cp
@
773.031 483.225 mo
786.825 448.317 775.361 427.993 738.638 422.252 cv
731.362 426.452 li
770.512 430.793 782.38 450.884 766.969 486.724 cv
773.031 483.225 li
cp
f
773.031 483.225 mo
786.825 448.317 775.361 427.993 738.638 422.252 cv
731.362 426.452 li
770.512 430.793 782.38 450.884 766.969 486.724 cv
773.031 483.225 li
cp
@
773.031 486.724 mo
810.159 481.217 822.027 461.126 808.638 426.452 cv
801.362 422.252 li
817.178 458.326 805.713 478.65 766.969 483.225 cv
773.031 486.724 li
cp
f
773.031 486.724 mo
810.159 481.217 822.027 461.126 808.638 426.452 cv
801.362 422.252 li
817.178 458.326 805.713 478.65 766.969 483.225 cv
773.031 486.724 li
cp
@
910 488.474 mo
933.333 517.875 956.667 518.107 980 489.173 cv
980 480.774 li
956.667 512.507 933.333 512.742 910 481.475 cv
910 488.474 li
cp
f
910 488.474 mo
933.333 517.875 956.667 518.107 980 489.173 cv
980 480.774 li
956.667 512.507 933.333 512.742 910 481.475 cv
910 488.474 li
cp
@
906.969 486.724 mo
893.175 521.632 904.639 541.955 941.362 547.697 cv
948.638 543.496 li
909.488 539.156 897.62 519.064 913.031 483.225 cv
906.969 486.724 li
cp
f
906.969 486.724 mo
893.175 521.632 904.639 541.955 941.362 547.697 cv
948.638 543.496 li
909.488 539.156 897.62 519.064 913.031 483.225 cv
906.969 486.724 li
cp
@
906.969 483.225 mo
869.841 488.732 857.973 508.822 871.362 543.496 cv
878.638 547.697 li
862.822 511.623 874.287 491.298 913.031 486.724 cv
906.969 483.225 li
cp
f
906.969 483.225 mo
869.841 488.732 857.973 508.822 871.362 543.496 cv
878.638 547.697 li
862.822 511.623 874.287 491.298 913.031 486.724 cv
906.969 483.225 li
cp
@
910 481.475 mo
886.667 452.074 863.333 451.841 840 480.774 cv
840 489.173 li
863.333 457.44 886.667 457.208 910 488.474 cv
910 481.475 li
cp
f
910 481.475 mo
886.667 452.074 863.333 451.841 840 480.774 cv
840 489.173 li
863.333 457.44 886.667 457.208 910 488.474 cv
910 481.475 li
cp
@
913.031 483.225 mo
926.825 448.317 915.361 427.993 878.638 422.252 cv
871.362 426.452 li
910.512 430.793 922.38 450.884 906.969 486.724 cv
913.031 483.225 li
cp
f
913.031 483.225 mo
926.825 448.317 915.361 427.993 878.638 422.252 cv
871.362 426.452 li
910.512 430.793 922.38 450.884 906.969 486.724 cv
913.031 483.225 li
cp
@
913.031 486.724 mo
950.159 481.217 962.027 461.126 948.638 426.452 cv
941.362 422.252 li
957.178 458.326 945.713 478.65 906.969 483.225 cv
913.031 486.724 li
cp
f
913.031 486.724 mo
950.159 481.217 962.027 461.126 948.638 426.452 cv
941.362 422.252 li
957.178 458.326 945.713 478.65 906.969 483.225 cv
913.031 486.724 li
cp
@
1050 481.475 mo
1026.67 452.074 1003.33 451.841 980 480.774 cv
980 489.173 li
1003.33 457.44 1026.67 457.208 1050 488.474 cv
1050 481.475 li
cp
f
1050 481.475 mo
1026.67 452.074 1003.33 451.841 980 480.774 cv
980 489.173 li
1003.33 457.44 1026.67 457.208 1050 488.474 cv
1050 481.475 li
cp
@
0 609.718 mo
23.3335 639.119 46.6665 639.351 70 610.417 cv
70 602.017 li
46.6665 633.751 23.3335 633.984 0 602.718 cv
0 609.718 li
cp
f
0 609.718 mo
23.3335 639.119 46.6665 639.351 70 610.417 cv
70 602.017 li
46.6665 633.751 23.3335 633.984 0 602.718 cv
0 609.718 li
cp
@
-3.03125 607.968 mo
-16.8257 642.875 -5.36084 663.199 31.3628 668.939 cv
38.6372 664.74 li
-.51123 660.4 -12.3799 640.308 3.03125 604.468 cv
-3.03125 607.968 li
cp
f
-3.03125 607.968 mo
-16.8257 642.875 -5.36084 663.199 31.3628 668.939 cv
38.6372 664.74 li
-.51123 660.4 -12.3799 640.308 3.03125 604.468 cv
-3.03125 607.968 li
cp
@
-3.03125 604.468 mo
-40.1587 609.974 -52.0278 630.066 -38.6372 664.74 cv
-31.3628 668.939 li
-47.1777 632.865 -35.7134 612.542 3.03125 607.968 cv
-3.03125 604.468 li
cp
f
-3.03125 604.468 mo
-40.1587 609.974 -52.0278 630.066 -38.6372 664.74 cv
-31.3628 668.939 li
-47.1777 632.865 -35.7134 612.542 3.03125 607.968 cv
-3.03125 604.468 li
cp
@
0 602.718 mo
-23.3335 573.318 -46.6665 573.083 -70 602.017 cv
-70 610.417 li
-46.6665 578.685 -23.3335 578.451 0 609.718 cv
0 602.718 li
cp
f
0 602.718 mo
-23.3335 573.318 -46.6665 573.083 -70 602.017 cv
-70 610.417 li
-46.6665 578.685 -23.3335 578.451 0 609.718 cv
0 602.718 li
cp
@
3.03125 604.468 mo
16.8257 569.56 5.36084 549.236 -31.3628 543.496 cv
-38.6372 547.697 li
.51123 552.037 12.3799 572.126 -3.03125 607.968 cv
3.03125 604.468 li
cp
f
3.03125 604.468 mo
16.8257 569.56 5.36084 549.236 -31.3628 543.496 cv
-38.6372 547.697 li
.51123 552.037 12.3799 572.126 -3.03125 607.968 cv
3.03125 604.468 li
cp
@
3.03125 607.968 mo
40.1587 602.46 52.0278 582.371 38.6372 547.697 cv
31.3628 543.496 li
47.1777 579.57 35.7134 599.894 -3.03125 604.468 cv
3.03125 607.968 li
cp
f
3.03125 607.968 mo
40.1587 602.46 52.0278 582.371 38.6372 547.697 cv
31.3628 543.496 li
47.1777 579.57 35.7134 599.894 -3.03125 604.468 cv
3.03125 607.968 li
cp
@
140 609.718 mo
163.333 639.119 186.667 639.351 210 610.417 cv
210 602.017 li
186.667 633.751 163.333 633.984 140 602.718 cv
140 609.718 li
cp
f
140 609.718 mo
163.333 639.119 186.667 639.351 210 610.417 cv
210 602.017 li
186.667 633.751 163.333 633.984 140 602.718 cv
140 609.718 li
cp
@
136.969 607.968 mo
123.174 642.875 134.639 663.199 171.363 668.939 cv
178.637 664.74 li
139.489 660.4 127.62 640.308 143.031 604.468 cv
136.969 607.968 li
cp
f
136.969 607.968 mo
123.174 642.875 134.639 663.199 171.363 668.939 cv
178.637 664.74 li
139.489 660.4 127.62 640.308 143.031 604.468 cv
136.969 607.968 li
cp
@
136.969 604.468 mo
99.8413 609.974 87.9722 630.066 101.363 664.74 cv
108.637 668.939 li
92.8223 632.865 104.287 612.542 143.031 607.968 cv
136.969 604.468 li
cp
f
136.969 604.468 mo
99.8413 609.974 87.9722 630.066 101.363 664.74 cv
108.637 668.939 li
92.8223 632.865 104.287 612.542 143.031 607.968 cv
136.969 604.468 li
cp
@
140 602.718 mo
116.667 573.318 93.3335 573.083 70 602.017 cv
70 610.417 li
93.3335 578.685 116.667 578.451 140 609.718 cv
140 602.718 li
cp
f
140 602.718 mo
116.667 573.318 93.3335 573.083 70 602.017 cv
70 610.417 li
93.3335 578.685 116.667 578.451 140 609.718 cv
140 602.718 li
cp
@
143.031 604.468 mo
156.826 569.56 145.361 549.236 108.637 543.496 cv
101.363 547.697 li
140.511 552.037 152.38 572.126 136.969 607.968 cv
143.031 604.468 li
cp
f
143.031 604.468 mo
156.826 569.56 145.361 549.236 108.637 543.496 cv
101.363 547.697 li
140.511 552.037 152.38 572.126 136.969 607.968 cv
143.031 604.468 li
cp
@
143.031 607.968 mo
180.159 602.46 192.028 582.371 178.637 547.697 cv
171.363 543.496 li
187.178 579.57 175.713 599.894 136.969 604.468 cv
143.031 607.968 li
cp
f
143.031 607.968 mo
180.159 602.46 192.028 582.371 178.637 547.697 cv
171.363 543.496 li
187.178 579.57 175.713 599.894 136.969 604.468 cv
143.031 607.968 li
cp
@
280 609.718 mo
303.333 639.119 326.667 639.351 350 610.417 cv
350 602.017 li
326.667 633.751 303.333 633.984 280 602.718 cv
280 609.718 li
cp
f
280 609.718 mo
303.333 639.119 326.667 639.351 350 610.417 cv
350 602.017 li
326.667 633.751 303.333 633.984 280 602.718 cv
280 609.718 li
cp
@
276.969 607.968 mo
263.174 642.875 274.639 663.199 311.362 668.939 cv
318.638 664.74 li
279.489 660.4 267.62 640.308 283.031 604.468 cv
276.969 607.968 li
cp
f
276.969 607.968 mo
263.174 642.875 274.639 663.199 311.362 668.939 cv
318.638 664.74 li
279.489 660.4 267.62 640.308 283.031 604.468 cv
276.969 607.968 li
cp
@
276.969 604.468 mo
239.841 609.974 227.972 630.066 241.363 664.74 cv
248.637 668.939 li
232.822 632.865 244.287 612.542 283.031 607.968 cv
276.969 604.468 li
cp
f
276.969 604.468 mo
239.841 609.974 227.972 630.066 241.363 664.74 cv
248.637 668.939 li
232.822 632.865 244.287 612.542 283.031 607.968 cv
276.969 604.468 li
cp
@
280 602.718 mo
256.667 573.318 233.333 573.083 210 602.017 cv
210 610.417 li
233.333 578.685 256.667 578.451 280 609.718 cv
280 602.718 li
cp
f
280 602.718 mo
256.667 573.318 233.333 573.083 210 602.017 cv
210 610.417 li
233.333 578.685 256.667 578.451 280 609.718 cv
280 602.718 li
cp
@
283.031 604.468 mo
296.826 569.56 285.361 549.236 248.637 543.496 cv
241.363 547.697 li
280.511 552.037 292.38 572.126 276.969 607.968 cv
283.031 604.468 li
cp
f
283.031 604.468 mo
296.826 569.56 285.361 549.236 248.637 543.496 cv
241.363 547.697 li
280.511 552.037 292.38 572.126 276.969 607.968 cv
283.031 604.468 li
cp
@
283.031 607.968 mo
320.159 602.46 332.027 582.371 318.638 547.697 cv
311.362 543.496 li
327.178 579.57 315.713 599.894 276.969 604.468 cv
283.031 607.968 li
cp
f
283.031 607.968 mo
320.159 602.46 332.027 582.371 318.638 547.697 cv
311.362 543.496 li
327.178 579.57 315.713 599.894 276.969 604.468 cv
283.031 607.968 li
cp
@
420 609.718 mo
443.333 639.119 466.667 639.351 490 610.417 cv
490 602.017 li
466.667 633.751 443.333 633.984 420 602.718 cv
420 609.718 li
cp
f
420 609.718 mo
443.333 639.119 466.667 639.351 490 610.417 cv
490 602.017 li
466.667 633.751 443.333 633.984 420 602.718 cv
420 609.718 li
cp
@
416.969 607.968 mo
403.175 642.875 414.639 663.199 451.362 668.939 cv
458.638 664.74 li
419.488 660.4 407.62 640.308 423.031 604.468 cv
416.969 607.968 li
cp
f
416.969 607.968 mo
403.175 642.875 414.639 663.199 451.362 668.939 cv
458.638 664.74 li
419.488 660.4 407.62 640.308 423.031 604.468 cv
416.969 607.968 li
cp
@
416.969 604.468 mo
379.841 609.974 367.973 630.066 381.362 664.74 cv
388.638 668.939 li
372.822 632.865 384.287 612.542 423.031 607.968 cv
416.969 604.468 li
cp
f
416.969 604.468 mo
379.841 609.974 367.973 630.066 381.362 664.74 cv
388.638 668.939 li
372.822 632.865 384.287 612.542 423.031 607.968 cv
416.969 604.468 li
cp
@
420 602.718 mo
396.667 573.318 373.333 573.083 350 602.017 cv
350 610.417 li
373.333 578.685 396.667 578.451 420 609.718 cv
420 602.718 li
cp
f
420 602.718 mo
396.667 573.318 373.333 573.083 350 602.017 cv
350 610.417 li
373.333 578.685 396.667 578.451 420 609.718 cv
420 602.718 li
cp
@
423.031 604.468 mo
436.825 569.56 425.361 549.236 388.638 543.496 cv
381.362 547.697 li
420.512 552.037 432.38 572.126 416.969 607.968 cv
423.031 604.468 li
cp
f
423.031 604.468 mo
436.825 569.56 425.361 549.236 388.638 543.496 cv
381.362 547.697 li
420.512 552.037 432.38 572.126 416.969 607.968 cv
423.031 604.468 li
cp
@
423.031 607.968 mo
460.159 602.46 472.027 582.371 458.638 547.697 cv
451.362 543.496 li
467.178 579.57 455.713 599.894 416.969 604.468 cv
423.031 607.968 li
cp
f
423.031 607.968 mo
460.159 602.46 472.027 582.371 458.638 547.697 cv
451.362 543.496 li
467.178 579.57 455.713 599.894 416.969 604.468 cv
423.031 607.968 li
cp
@
560 609.718 mo
583.333 639.119 606.667 639.351 630 610.417 cv
630 602.017 li
606.667 633.751 583.333 633.984 560 602.718 cv
560 609.718 li
cp
f
560 609.718 mo
583.333 639.119 606.667 639.351 630 610.417 cv
630 602.017 li
606.667 633.751 583.333 633.984 560 602.718 cv
560 609.718 li
cp
@
556.969 607.968 mo
543.175 642.875 554.639 663.199 591.362 668.939 cv
598.638 664.74 li
559.488 660.4 547.62 640.308 563.031 604.468 cv
556.969 607.968 li
cp
f
556.969 607.968 mo
543.175 642.875 554.639 663.199 591.362 668.939 cv
598.638 664.74 li
559.488 660.4 547.62 640.308 563.031 604.468 cv
556.969 607.968 li
cp
@
556.969 604.468 mo
519.841 609.974 507.973 630.066 521.362 664.74 cv
528.638 668.939 li
512.822 632.865 524.287 612.542 563.031 607.968 cv
556.969 604.468 li
cp
f
556.969 604.468 mo
519.841 609.974 507.973 630.066 521.362 664.74 cv
528.638 668.939 li
512.822 632.865 524.287 612.542 563.031 607.968 cv
556.969 604.468 li
cp
@
560 602.718 mo
536.667 573.318 513.333 573.083 490 602.017 cv
490 610.417 li
513.333 578.685 536.667 578.451 560 609.718 cv
560 602.718 li
cp
f
560 602.718 mo
536.667 573.318 513.333 573.083 490 602.017 cv
490 610.417 li
513.333 578.685 536.667 578.451 560 609.718 cv
560 602.718 li
cp
@
563.031 604.468 mo
576.825 569.56 565.361 549.236 528.638 543.496 cv
521.362 547.697 li
560.512 552.037 572.38 572.126 556.969 607.968 cv
563.031 604.468 li
cp
f
563.031 604.468 mo
576.825 569.56 565.361 549.236 528.638 543.496 cv
521.362 547.697 li
560.512 552.037 572.38 572.126 556.969 607.968 cv
563.031 604.468 li
cp
@
563.031 607.968 mo
600.159 602.46 612.027 582.371 598.638 547.697 cv
591.362 543.496 li
607.178 579.57 595.713 599.894 556.969 604.468 cv
563.031 607.968 li
cp
f
563.031 607.968 mo
600.159 602.46 612.027 582.371 598.638 547.697 cv
591.362 543.496 li
607.178 579.57 595.713 599.894 556.969 604.468 cv
563.031 607.968 li
cp
@
700 609.718 mo
723.333 639.119 746.667 639.351 770 610.417 cv
770 602.017 li
746.667 633.751 723.333 633.984 700 602.718 cv
700 609.718 li
cp
f
700 609.718 mo
723.333 639.119 746.667 639.351 770 610.417 cv
770 602.017 li
746.667 633.751 723.333 633.984 700 602.718 cv
700 609.718 li
cp
@
696.969 607.968 mo
683.175 642.875 694.639 663.199 731.362 668.939 cv
738.638 664.74 li
699.488 660.4 687.62 640.308 703.031 604.468 cv
696.969 607.968 li
cp
f
696.969 607.968 mo
683.175 642.875 694.639 663.199 731.362 668.939 cv
738.638 664.74 li
699.488 660.4 687.62 640.308 703.031 604.468 cv
696.969 607.968 li
cp
@
696.969 604.468 mo
659.841 609.974 647.973 630.066 661.362 664.74 cv
668.638 668.939 li
652.822 632.865 664.287 612.542 703.031 607.968 cv
696.969 604.468 li
cp
f
696.969 604.468 mo
659.841 609.974 647.973 630.066 661.362 664.74 cv
668.638 668.939 li
652.822 632.865 664.287 612.542 703.031 607.968 cv
696.969 604.468 li
cp
@
700 602.718 mo
676.667 573.318 653.333 573.083 630 602.017 cv
630 610.417 li
653.333 578.685 676.667 578.451 700 609.718 cv
700 602.718 li
cp
f
700 602.718 mo
676.667 573.318 653.333 573.083 630 602.017 cv
630 610.417 li
653.333 578.685 676.667 578.451 700 609.718 cv
700 602.718 li
cp
@
703.031 604.468 mo
716.825 569.56 705.361 549.236 668.638 543.496 cv
661.362 547.697 li
700.512 552.037 712.38 572.126 696.969 607.968 cv
703.031 604.468 li
cp
f
703.031 604.468 mo
716.825 569.56 705.361 549.236 668.638 543.496 cv
661.362 547.697 li
700.512 552.037 712.38 572.126 696.969 607.968 cv
703.031 604.468 li
cp
@
703.031 607.968 mo
740.159 602.46 752.027 582.371 738.638 547.697 cv
731.362 543.496 li
747.178 579.57 735.713 599.894 696.969 604.468 cv
703.031 607.968 li
cp
f
703.031 607.968 mo
740.159 602.46 752.027 582.371 738.638 547.697 cv
731.362 543.496 li
747.178 579.57 735.713 599.894 696.969 604.468 cv
703.031 607.968 li
cp
@
840 609.718 mo
863.333 639.119 886.667 639.351 910 610.417 cv
910 602.017 li
886.667 633.751 863.333 633.984 840 602.718 cv
840 609.718 li
cp
f
840 609.718 mo
863.333 639.119 886.667 639.351 910 610.417 cv
910 602.017 li
886.667 633.751 863.333 633.984 840 602.718 cv
840 609.718 li
cp
@
836.969 607.968 mo
823.175 642.875 834.639 663.199 871.362 668.939 cv
878.638 664.74 li
839.488 660.4 827.62 640.308 843.031 604.468 cv
836.969 607.968 li
cp
f
836.969 607.968 mo
823.175 642.875 834.639 663.199 871.362 668.939 cv
878.638 664.74 li
839.488 660.4 827.62 640.308 843.031 604.468 cv
836.969 607.968 li
cp
@
836.969 604.468 mo
799.841 609.974 787.973 630.066 801.362 664.74 cv
808.638 668.939 li
792.822 632.865 804.287 612.542 843.031 607.968 cv
836.969 604.468 li
cp
f
836.969 604.468 mo
799.841 609.974 787.973 630.066 801.362 664.74 cv
808.638 668.939 li
792.822 632.865 804.287 612.542 843.031 607.968 cv
836.969 604.468 li
cp
@
840 602.718 mo
816.667 573.318 793.333 573.083 770 602.017 cv
770 610.417 li
793.333 578.685 816.667 578.451 840 609.718 cv
840 602.718 li
cp
f
840 602.718 mo
816.667 573.318 793.333 573.083 770 602.017 cv
770 610.417 li
793.333 578.685 816.667 578.451 840 609.718 cv
840 602.718 li
cp
@
843.031 604.468 mo
856.825 569.56 845.361 549.236 808.638 543.496 cv
801.362 547.697 li
840.512 552.037 852.38 572.126 836.969 607.968 cv
843.031 604.468 li
cp
f
843.031 604.468 mo
856.825 569.56 845.361 549.236 808.638 543.496 cv
801.362 547.697 li
840.512 552.037 852.38 572.126 836.969 607.968 cv
843.031 604.468 li
cp
@
843.031 607.968 mo
880.159 602.46 892.027 582.371 878.638 547.697 cv
871.362 543.496 li
887.178 579.57 875.713 599.894 836.969 604.468 cv
843.031 607.968 li
cp
f
843.031 607.968 mo
880.159 602.46 892.027 582.371 878.638 547.697 cv
871.362 543.496 li
887.178 579.57 875.713 599.894 836.969 604.468 cv
843.031 607.968 li
cp
@
980 609.718 mo
1003.33 639.119 1026.67 639.351 1050 610.417 cv
1050 602.017 li
1026.67 633.751 1003.33 633.984 980 602.718 cv
980 609.718 li
cp
f
980 609.718 mo
1003.33 639.119 1026.67 639.351 1050 610.417 cv
1050 602.017 li
1026.67 633.751 1003.33 633.984 980 602.718 cv
980 609.718 li
cp
@
976.969 607.968 mo
963.175 642.875 974.639 663.199 1011.36 668.939 cv
1018.64 664.74 li
979.488 660.4 967.62 640.308 983.031 604.468 cv
976.969 607.968 li
cp
f
976.969 607.968 mo
963.175 642.875 974.639 663.199 1011.36 668.939 cv
1018.64 664.74 li
979.488 660.4 967.62 640.308 983.031 604.468 cv
976.969 607.968 li
cp
@
976.969 604.468 mo
939.841 609.974 927.973 630.066 941.362 664.74 cv
948.638 668.939 li
932.822 632.865 944.287 612.542 983.031 607.968 cv
976.969 604.468 li
cp
f
976.969 604.468 mo
939.841 609.974 927.973 630.066 941.362 664.74 cv
948.638 668.939 li
932.822 632.865 944.287 612.542 983.031 607.968 cv
976.969 604.468 li
cp
@
980 602.718 mo
956.667 573.318 933.333 573.083 910 602.017 cv
910 610.417 li
933.333 578.685 956.667 578.451 980 609.718 cv
980 602.718 li
cp
f
980 602.718 mo
956.667 573.318 933.333 573.083 910 602.017 cv
910 610.417 li
933.333 578.685 956.667 578.451 980 609.718 cv
980 602.718 li
cp
@
983.031 604.468 mo
996.825 569.56 985.361 549.236 948.638 543.496 cv
941.362 547.697 li
980.512 552.037 992.38 572.126 976.969 607.968 cv
983.031 604.468 li
cp
f
983.031 604.468 mo
996.825 569.56 985.361 549.236 948.638 543.496 cv
941.362 547.697 li
980.512 552.037 992.38 572.126 976.969 607.968 cv
983.031 604.468 li
cp
@
983.031 607.968 mo
1020.16 602.46 1032.03 582.371 1018.64 547.697 cv
1011.36 543.496 li
1027.18 579.57 1015.71 599.894 976.969 604.468 cv
983.031 607.968 li
cp
f
983.031 607.968 mo
1020.16 602.46 1032.03 582.371 1018.64 547.697 cv
1011.36 543.496 li
1027.18 579.57 1015.71 599.894 976.969 604.468 cv
983.031 607.968 li
cp
@
-70 730.96 mo
-46.6665 760.361 -23.3335 760.595 0 731.662 cv
0 723.261 li
-23.3335 754.996 -46.6665 755.228 -70 723.96 cv
-70 730.96 li
cp
f
-70 730.96 mo
-46.6665 760.361 -23.3335 760.595 0 731.662 cv
0 723.261 li
-23.3335 754.996 -46.6665 755.228 -70 723.96 cv
-70 730.96 li
cp
@
70 730.96 mo
93.3335 760.361 116.667 760.595 140 731.662 cv
140 723.261 li
116.667 754.996 93.3335 755.228 70 723.96 cv
70 730.96 li
cp
f
70 730.96 mo
93.3335 760.361 116.667 760.595 140 731.662 cv
140 723.261 li
116.667 754.996 93.3335 755.228 70 723.96 cv
70 730.96 li
cp
@
66.9688 729.21 mo
53.1743 764.119 64.6392 784.443 101.363 790.183 cv
108.637 785.984 li
69.4888 781.642 57.6201 761.552 73.0313 725.71 cv
66.9688 729.21 li
cp
f
66.9688 729.21 mo
53.1743 764.119 64.6392 784.443 101.363 790.183 cv
108.637 785.984 li
69.4888 781.642 57.6201 761.552 73.0313 725.71 cv
66.9688 729.21 li
cp
@
66.9688 725.71 mo
29.8413 731.218 17.9722 751.31 31.3628 785.984 cv
38.6372 790.183 li
22.8223 754.109 34.2866 733.785 73.0313 729.21 cv
66.9688 725.71 li
cp
f
66.9688 725.71 mo
29.8413 731.218 17.9722 751.31 31.3628 785.984 cv
38.6372 790.183 li
22.8223 754.109 34.2866 733.785 73.0313 729.21 cv
66.9688 725.71 li
cp
@
70 723.96 mo
46.6665 694.562 23.3335 694.328 0 723.261 cv
0 731.662 li
23.3335 699.927 46.6665 699.695 70 730.96 cv
70 723.96 li
cp
f
70 723.96 mo
46.6665 694.562 23.3335 694.328 0 723.261 cv
0 731.662 li
23.3335 699.927 46.6665 699.695 70 730.96 cv
70 723.96 li
cp
@
73.0313 725.71 mo
86.8257 690.804 75.3608 670.48 38.6372 664.74 cv
31.3628 668.939 li
70.5112 673.281 82.3799 693.371 66.9688 729.21 cv
73.0313 725.71 li
cp
f
73.0313 725.71 mo
86.8257 690.804 75.3608 670.48 38.6372 664.74 cv
31.3628 668.939 li
70.5112 673.281 82.3799 693.371 66.9688 729.21 cv
73.0313 725.71 li
cp
@
73.0313 729.21 mo
110.159 723.705 122.028 703.613 108.637 668.939 cv
101.363 664.74 li
117.178 700.814 105.713 721.138 66.9688 725.71 cv
73.0313 729.21 li
cp
f
73.0313 729.21 mo
110.159 723.705 122.028 703.613 108.637 668.939 cv
101.363 664.74 li
117.178 700.814 105.713 721.138 66.9688 725.71 cv
73.0313 729.21 li
cp
@
210 730.96 mo
233.333 760.361 256.667 760.595 280 731.662 cv
280 723.261 li
256.667 754.996 233.333 755.228 210 723.96 cv
210 730.96 li
cp
f
210 730.96 mo
233.333 760.361 256.667 760.595 280 731.662 cv
280 723.261 li
256.667 754.996 233.333 755.228 210 723.96 cv
210 730.96 li
cp
@
206.969 729.21 mo
193.174 764.119 204.639 784.443 241.363 790.183 cv
248.637 785.984 li
209.489 781.642 197.62 761.552 213.031 725.71 cv
206.969 729.21 li
cp
f
206.969 729.21 mo
193.174 764.119 204.639 784.443 241.363 790.183 cv
248.637 785.984 li
209.489 781.642 197.62 761.552 213.031 725.71 cv
206.969 729.21 li
cp
@
206.969 725.71 mo
169.841 731.218 157.972 751.31 171.363 785.984 cv
178.637 790.183 li
162.822 754.109 174.287 733.785 213.031 729.21 cv
206.969 725.71 li
cp
f
206.969 725.71 mo
169.841 731.218 157.972 751.31 171.363 785.984 cv
178.637 790.183 li
162.822 754.109 174.287 733.785 213.031 729.21 cv
206.969 725.71 li
cp
@
210 723.96 mo
186.667 694.562 163.333 694.328 140 723.261 cv
140 731.662 li
163.333 699.927 186.667 699.695 210 730.96 cv
210 723.96 li
cp
f
210 723.96 mo
186.667 694.562 163.333 694.328 140 723.261 cv
140 731.662 li
163.333 699.927 186.667 699.695 210 730.96 cv
210 723.96 li
cp
@
213.031 725.71 mo
226.826 690.804 215.361 670.48 178.637 664.74 cv
171.363 668.939 li
210.511 673.281 222.38 693.371 206.969 729.21 cv
213.031 725.71 li
cp
f
213.031 725.71 mo
226.826 690.804 215.361 670.48 178.637 664.74 cv
171.363 668.939 li
210.511 673.281 222.38 693.371 206.969 729.21 cv
213.031 725.71 li
cp
@
213.031 729.21 mo
250.159 723.705 262.028 703.613 248.637 668.939 cv
241.363 664.74 li
257.178 700.814 245.713 721.138 206.969 725.71 cv
213.031 729.21 li
cp
f
213.031 729.21 mo
250.159 723.705 262.028 703.613 248.637 668.939 cv
241.363 664.74 li
257.178 700.814 245.713 721.138 206.969 725.71 cv
213.031 729.21 li
cp
@
350 730.96 mo
373.333 760.361 396.667 760.595 420 731.662 cv
420 723.261 li
396.667 754.996 373.333 755.228 350 723.96 cv
350 730.96 li
cp
f
350 730.96 mo
373.333 760.361 396.667 760.595 420 731.662 cv
420 723.261 li
396.667 754.996 373.333 755.228 350 723.96 cv
350 730.96 li
cp
@
346.969 729.21 mo
333.175 764.119 344.639 784.443 381.362 790.183 cv
388.638 785.984 li
349.488 781.642 337.62 761.552 353.031 725.71 cv
346.969 729.21 li
cp
f
346.969 729.21 mo
333.175 764.119 344.639 784.443 381.362 790.183 cv
388.638 785.984 li
349.488 781.642 337.62 761.552 353.031 725.71 cv
346.969 729.21 li
cp
@
346.969 725.71 mo
309.841 731.218 297.972 751.31 311.362 785.984 cv
318.638 790.183 li
302.822 754.109 314.287 733.785 353.031 729.21 cv
346.969 725.71 li
cp
f
346.969 725.71 mo
309.841 731.218 297.972 751.31 311.362 785.984 cv
318.638 790.183 li
302.822 754.109 314.287 733.785 353.031 729.21 cv
346.969 725.71 li
cp
@
350 723.96 mo
326.667 694.562 303.333 694.328 280 723.261 cv
280 731.662 li
303.333 699.927 326.667 699.695 350 730.96 cv
350 723.96 li
cp
f
350 723.96 mo
326.667 694.562 303.333 694.328 280 723.261 cv
280 731.662 li
303.333 699.927 326.667 699.695 350 730.96 cv
350 723.96 li
cp
@
353.031 725.71 mo
366.825 690.804 355.361 670.48 318.638 664.74 cv
311.362 668.939 li
350.512 673.281 362.38 693.371 346.969 729.21 cv
353.031 725.71 li
cp
f
353.031 725.71 mo
366.825 690.804 355.361 670.48 318.638 664.74 cv
311.362 668.939 li
350.512 673.281 362.38 693.371 346.969 729.21 cv
353.031 725.71 li
cp
@
353.031 729.21 mo
390.159 723.705 402.027 703.613 388.638 668.939 cv
381.362 664.74 li
397.178 700.814 385.713 721.138 346.969 725.71 cv
353.031 729.21 li
cp
f
353.031 729.21 mo
390.159 723.705 402.027 703.613 388.638 668.939 cv
381.362 664.74 li
397.178 700.814 385.713 721.138 346.969 725.71 cv
353.031 729.21 li
cp
@
490 730.96 mo
513.333 760.361 536.667 760.595 560 731.662 cv
560 723.261 li
536.667 754.996 513.333 755.228 490 723.96 cv
490 730.96 li
cp
f
490 730.96 mo
513.333 760.361 536.667 760.595 560 731.662 cv
560 723.261 li
536.667 754.996 513.333 755.228 490 723.96 cv
490 730.96 li
cp
@
486.969 729.21 mo
473.175 764.119 484.639 784.443 521.362 790.183 cv
528.638 785.984 li
489.488 781.642 477.62 761.552 493.031 725.71 cv
486.969 729.21 li
cp
f
486.969 729.21 mo
473.175 764.119 484.639 784.443 521.362 790.183 cv
528.638 785.984 li
489.488 781.642 477.62 761.552 493.031 725.71 cv
486.969 729.21 li
cp
@
486.969 725.71 mo
449.841 731.218 437.973 751.31 451.362 785.984 cv
458.638 790.183 li
442.822 754.109 454.287 733.785 493.031 729.21 cv
486.969 725.71 li
cp
f
486.969 725.71 mo
449.841 731.218 437.973 751.31 451.362 785.984 cv
458.638 790.183 li
442.822 754.109 454.287 733.785 493.031 729.21 cv
486.969 725.71 li
cp
@
490 723.96 mo
466.667 694.562 443.333 694.328 420 723.261 cv
420 731.662 li
443.333 699.927 466.667 699.695 490 730.96 cv
490 723.96 li
cp
f
490 723.96 mo
466.667 694.562 443.333 694.328 420 723.261 cv
420 731.662 li
443.333 699.927 466.667 699.695 490 730.96 cv
490 723.96 li
cp
@
493.031 725.71 mo
506.825 690.804 495.361 670.48 458.638 664.74 cv
451.362 668.939 li
490.512 673.281 502.38 693.371 486.969 729.21 cv
493.031 725.71 li
cp
f
493.031 725.71 mo
506.825 690.804 495.361 670.48 458.638 664.74 cv
451.362 668.939 li
490.512 673.281 502.38 693.371 486.969 729.21 cv
493.031 725.71 li
cp
@
493.031 729.21 mo
530.159 723.705 542.027 703.613 528.638 668.939 cv
521.362 664.74 li
537.178 700.814 525.713 721.138 486.969 725.71 cv
493.031 729.21 li
cp
f
493.031 729.21 mo
530.159 723.705 542.027 703.613 528.638 668.939 cv
521.362 664.74 li
537.178 700.814 525.713 721.138 486.969 725.71 cv
493.031 729.21 li
cp
@
630 730.96 mo
653.333 760.361 676.667 760.595 700 731.662 cv
700 723.261 li
676.667 754.996 653.333 755.228 630 723.96 cv
630 730.96 li
cp
f
630 730.96 mo
653.333 760.361 676.667 760.595 700 731.662 cv
700 723.261 li
676.667 754.996 653.333 755.228 630 723.96 cv
630 730.96 li
cp
@
626.969 729.21 mo
613.175 764.119 624.639 784.443 661.362 790.183 cv
668.638 785.984 li
629.488 781.642 617.62 761.552 633.031 725.71 cv
626.969 729.21 li
cp
f
626.969 729.21 mo
613.175 764.119 624.639 784.443 661.362 790.183 cv
668.638 785.984 li
629.488 781.642 617.62 761.552 633.031 725.71 cv
626.969 729.21 li
cp
@
626.969 725.71 mo
589.841 731.218 577.973 751.31 591.362 785.984 cv
598.638 790.183 li
582.822 754.109 594.287 733.785 633.031 729.21 cv
626.969 725.71 li
cp
f
626.969 725.71 mo
589.841 731.218 577.973 751.31 591.362 785.984 cv
598.638 790.183 li
582.822 754.109 594.287 733.785 633.031 729.21 cv
626.969 725.71 li
cp
@
630 723.96 mo
606.667 694.562 583.333 694.328 560 723.261 cv
560 731.662 li
583.333 699.927 606.667 699.695 630 730.96 cv
630 723.96 li
cp
f
630 723.96 mo
606.667 694.562 583.333 694.328 560 723.261 cv
560 731.662 li
583.333 699.927 606.667 699.695 630 730.96 cv
630 723.96 li
cp
@
633.031 725.71 mo
646.825 690.804 635.361 670.48 598.638 664.74 cv
591.362 668.939 li
630.512 673.281 642.38 693.371 626.969 729.21 cv
633.031 725.71 li
cp
f
633.031 725.71 mo
646.825 690.804 635.361 670.48 598.638 664.74 cv
591.362 668.939 li
630.512 673.281 642.38 693.371 626.969 729.21 cv
633.031 725.71 li
cp
@
633.031 729.21 mo
670.159 723.705 682.027 703.613 668.638 668.939 cv
661.362 664.74 li
677.178 700.814 665.713 721.138 626.969 725.71 cv
633.031 729.21 li
cp
f
633.031 729.21 mo
670.159 723.705 682.027 703.613 668.638 668.939 cv
661.362 664.74 li
677.178 700.814 665.713 721.138 626.969 725.71 cv
633.031 729.21 li
cp
@
770 730.96 mo
793.333 760.361 816.667 760.595 840 731.662 cv
840 723.261 li
816.667 754.996 793.333 755.228 770 723.96 cv
770 730.96 li
cp
f
770 730.96 mo
793.333 760.361 816.667 760.595 840 731.662 cv
840 723.261 li
816.667 754.996 793.333 755.228 770 723.96 cv
770 730.96 li
cp
@
766.969 729.21 mo
753.175 764.119 764.639 784.443 801.362 790.183 cv
808.638 785.984 li
769.488 781.642 757.62 761.552 773.031 725.71 cv
766.969 729.21 li
cp
f
766.969 729.21 mo
753.175 764.119 764.639 784.443 801.362 790.183 cv
808.638 785.984 li
769.488 781.642 757.62 761.552 773.031 725.71 cv
766.969 729.21 li
cp
@
766.969 725.71 mo
729.841 731.218 717.973 751.31 731.362 785.984 cv
738.638 790.183 li
722.822 754.109 734.287 733.785 773.031 729.21 cv
766.969 725.71 li
cp
f
766.969 725.71 mo
729.841 731.218 717.973 751.31 731.362 785.984 cv
738.638 790.183 li
722.822 754.109 734.287 733.785 773.031 729.21 cv
766.969 725.71 li
cp
@
770 723.96 mo
746.667 694.562 723.333 694.328 700 723.261 cv
700 731.662 li
723.333 699.927 746.667 699.695 770 730.96 cv
770 723.96 li
cp
f
770 723.96 mo
746.667 694.562 723.333 694.328 700 723.261 cv
700 731.662 li
723.333 699.927 746.667 699.695 770 730.96 cv
770 723.96 li
cp
@
773.031 725.71 mo
786.825 690.804 775.361 670.48 738.638 664.74 cv
731.362 668.939 li
770.512 673.281 782.38 693.371 766.969 729.21 cv
773.031 725.71 li
cp
f
773.031 725.71 mo
786.825 690.804 775.361 670.48 738.638 664.74 cv
731.362 668.939 li
770.512 673.281 782.38 693.371 766.969 729.21 cv
773.031 725.71 li
cp
@
773.031 729.21 mo
810.159 723.705 822.027 703.613 808.638 668.939 cv
801.362 664.74 li
817.178 700.814 805.713 721.138 766.969 725.71 cv
773.031 729.21 li
cp
f
773.031 729.21 mo
810.159 723.705 822.027 703.613 808.638 668.939 cv
801.362 664.74 li
817.178 700.814 805.713 721.138 766.969 725.71 cv
773.031 729.21 li
cp
@
910 730.96 mo
933.333 760.361 956.667 760.595 980 731.662 cv
980 723.261 li
956.667 754.996 933.333 755.228 910 723.96 cv
910 730.96 li
cp
f
910 730.96 mo
933.333 760.361 956.667 760.595 980 731.662 cv
980 723.261 li
956.667 754.996 933.333 755.228 910 723.96 cv
910 730.96 li
cp
@
906.969 729.21 mo
893.175 764.119 904.639 784.443 941.362 790.183 cv
948.638 785.984 li
909.488 781.642 897.62 761.552 913.031 725.71 cv
906.969 729.21 li
cp
f
906.969 729.21 mo
893.175 764.119 904.639 784.443 941.362 790.183 cv
948.638 785.984 li
909.488 781.642 897.62 761.552 913.031 725.71 cv
906.969 729.21 li
cp
@
906.969 725.71 mo
869.841 731.218 857.973 751.31 871.362 785.984 cv
878.638 790.183 li
862.822 754.109 874.287 733.785 913.031 729.21 cv
906.969 725.71 li
cp
f
906.969 725.71 mo
869.841 731.218 857.973 751.31 871.362 785.984 cv
878.638 790.183 li
862.822 754.109 874.287 733.785 913.031 729.21 cv
906.969 725.71 li
cp
@
910 723.96 mo
886.667 694.562 863.333 694.328 840 723.261 cv
840 731.662 li
863.333 699.927 886.667 699.695 910 730.96 cv
910 723.96 li
cp
f
910 723.96 mo
886.667 694.562 863.333 694.328 840 723.261 cv
840 731.662 li
863.333 699.927 886.667 699.695 910 730.96 cv
910 723.96 li
cp
@
913.031 725.71 mo
926.825 690.804 915.361 670.48 878.638 664.74 cv
871.362 668.939 li
910.512 673.281 922.38 693.371 906.969 729.21 cv
913.031 725.71 li
cp
f
913.031 725.71 mo
926.825 690.804 915.361 670.48 878.638 664.74 cv
871.362 668.939 li
910.512 673.281 922.38 693.371 906.969 729.21 cv
913.031 725.71 li
cp
@
913.031 729.21 mo
950.159 723.705 962.027 703.613 948.638 668.939 cv
941.362 664.74 li
957.178 700.814 945.713 721.138 906.969 725.71 cv
913.031 729.21 li
cp
f
913.031 729.21 mo
950.159 723.705 962.027 703.613 948.638 668.939 cv
941.362 664.74 li
957.178 700.814 945.713 721.138 906.969 725.71 cv
913.031 729.21 li
cp
@
1050 723.96 mo
1026.67 694.562 1003.33 694.328 980 723.261 cv
980 731.662 li
1003.33 699.927 1026.67 699.695 1050 730.96 cv
1050 723.96 li
cp
f
1050 723.96 mo
1026.67 694.562 1003.33 694.328 980 723.261 cv
980 731.662 li
1003.33 699.927 1026.67 699.695 1050 730.96 cv
1050 723.96 li
cp
@
0 852.205 mo
23.3335 881.605 46.6665 881.837 70 852.906 cv
70 844.505 li
46.6665 876.238 23.3335 876.472 0 845.205 cv
0 852.205 li
cp
f
0 852.205 mo
23.3335 881.605 46.6665 881.837 70 852.906 cv
70 844.505 li
46.6665 876.238 23.3335 876.472 0 845.205 cv
0 852.205 li
cp
@
-3.03125 850.455 mo
-16.8257 885.363 -5.36084 905.687 31.3628 911.427 cv
38.6372 907.226 li
-.51123 902.886 -12.3799 882.796 3.03125 846.955 cv
-3.03125 850.455 li
cp
f
-3.03125 850.455 mo
-16.8257 885.363 -5.36084 905.687 31.3628 911.427 cv
38.6372 907.226 li
-.51123 902.886 -12.3799 882.796 3.03125 846.955 cv
-3.03125 850.455 li
cp
@
-3.03125 846.955 mo
-40.1587 852.462 -52.0278 872.552 -38.6372 907.226 cv
-31.3628 911.427 li
-47.1777 875.353 -35.7134 855.029 3.03125 850.455 cv
-3.03125 846.955 li
cp
f
-3.03125 846.955 mo
-40.1587 852.462 -52.0278 872.552 -38.6372 907.226 cv
-31.3628 911.427 li
-47.1777 875.353 -35.7134 855.029 3.03125 850.455 cv
-3.03125 846.955 li
cp
@
0 845.205 mo
-23.3335 815.804 -46.6665 815.572 -70 844.505 cv
-70 852.906 li
-46.6665 821.171 -23.3335 820.939 0 852.205 cv
0 845.205 li
cp
f
0 845.205 mo
-23.3335 815.804 -46.6665 815.572 -70 844.505 cv
-70 852.906 li
-46.6665 821.171 -23.3335 820.939 0 852.205 cv
0 845.205 li
cp
@
3.03125 846.955 mo
16.8257 812.048 5.36084 791.724 -31.3628 785.984 cv
-38.6372 790.183 li
.51123 794.523 12.3799 814.615 -3.03125 850.455 cv
3.03125 846.955 li
cp
f
3.03125 846.955 mo
16.8257 812.048 5.36084 791.724 -31.3628 785.984 cv
-38.6372 790.183 li
.51123 794.523 12.3799 814.615 -3.03125 850.455 cv
3.03125 846.955 li
cp
@
3.03125 850.455 mo
40.1587 844.947 52.0278 824.857 38.6372 790.183 cv
31.3628 785.984 li
47.1777 822.056 35.7134 842.38 -3.03125 846.955 cv
3.03125 850.455 li
cp
f
3.03125 850.455 mo
40.1587 844.947 52.0278 824.857 38.6372 790.183 cv
31.3628 785.984 li
47.1777 822.056 35.7134 842.38 -3.03125 846.955 cv
3.03125 850.455 li
cp
@
140 852.205 mo
163.333 881.605 186.667 881.837 210 852.906 cv
210 844.505 li
186.667 876.238 163.333 876.472 140 845.205 cv
140 852.205 li
cp
f
140 852.205 mo
163.333 881.605 186.667 881.837 210 852.906 cv
210 844.505 li
186.667 876.238 163.333 876.472 140 845.205 cv
140 852.205 li
cp
@
136.969 850.455 mo
123.174 885.363 134.639 905.687 171.363 911.427 cv
178.637 907.226 li
139.489 902.886 127.62 882.796 143.031 846.955 cv
136.969 850.455 li
cp
f
136.969 850.455 mo
123.174 885.363 134.639 905.687 171.363 911.427 cv
178.637 907.226 li
139.489 902.886 127.62 882.796 143.031 846.955 cv
136.969 850.455 li
cp
@
136.969 846.955 mo
99.8413 852.462 87.9722 872.552 101.363 907.226 cv
108.637 911.427 li
92.8223 875.353 104.287 855.029 143.031 850.455 cv
136.969 846.955 li
cp
f
136.969 846.955 mo
99.8413 852.462 87.9722 872.552 101.363 907.226 cv
108.637 911.427 li
92.8223 875.353 104.287 855.029 143.031 850.455 cv
136.969 846.955 li
cp
@
140 845.205 mo
116.667 815.804 93.3335 815.572 70 844.505 cv
70 852.906 li
93.3335 821.171 116.667 820.939 140 852.205 cv
140 845.205 li
cp
f
140 845.205 mo
116.667 815.804 93.3335 815.572 70 844.505 cv
70 852.906 li
93.3335 821.171 116.667 820.939 140 852.205 cv
140 845.205 li
cp
@
143.031 846.955 mo
156.826 812.048 145.361 791.724 108.637 785.984 cv
101.363 790.183 li
140.511 794.523 152.38 814.615 136.969 850.455 cv
143.031 846.955 li
cp
f
143.031 846.955 mo
156.826 812.048 145.361 791.724 108.637 785.984 cv
101.363 790.183 li
140.511 794.523 152.38 814.615 136.969 850.455 cv
143.031 846.955 li
cp
@
143.031 850.455 mo
180.159 844.947 192.028 824.857 178.637 790.183 cv
171.363 785.984 li
187.178 822.056 175.713 842.38 136.969 846.955 cv
143.031 850.455 li
cp
f
143.031 850.455 mo
180.159 844.947 192.028 824.857 178.637 790.183 cv
171.363 785.984 li
187.178 822.056 175.713 842.38 136.969 846.955 cv
143.031 850.455 li
cp
@
280 852.205 mo
303.333 881.605 326.667 881.837 350 852.906 cv
350 844.505 li
326.667 876.238 303.333 876.472 280 845.205 cv
280 852.205 li
cp
f
280 852.205 mo
303.333 881.605 326.667 881.837 350 852.906 cv
350 844.505 li
326.667 876.238 303.333 876.472 280 845.205 cv
280 852.205 li
cp
@
276.969 850.455 mo
263.174 885.363 274.639 905.687 311.362 911.427 cv
318.638 907.226 li
279.489 902.886 267.62 882.796 283.031 846.955 cv
276.969 850.455 li
cp
f
276.969 850.455 mo
263.174 885.363 274.639 905.687 311.362 911.427 cv
318.638 907.226 li
279.489 902.886 267.62 882.796 283.031 846.955 cv
276.969 850.455 li
cp
@
276.969 846.955 mo
239.841 852.462 227.972 872.552 241.363 907.226 cv
248.637 911.427 li
232.822 875.353 244.287 855.029 283.031 850.455 cv
276.969 846.955 li
cp
f
276.969 846.955 mo
239.841 852.462 227.972 872.552 241.363 907.226 cv
248.637 911.427 li
232.822 875.353 244.287 855.029 283.031 850.455 cv
276.969 846.955 li
cp
@
280 845.205 mo
256.667 815.804 233.333 815.572 210 844.505 cv
210 852.906 li
233.333 821.171 256.667 820.939 280 852.205 cv
280 845.205 li
cp
f
280 845.205 mo
256.667 815.804 233.333 815.572 210 844.505 cv
210 852.906 li
233.333 821.171 256.667 820.939 280 852.205 cv
280 845.205 li
cp
@
283.031 846.955 mo
296.826 812.048 285.361 791.724 248.637 785.984 cv
241.363 790.183 li
280.511 794.523 292.38 814.615 276.969 850.455 cv
283.031 846.955 li
cp
f
283.031 846.955 mo
296.826 812.048 285.361 791.724 248.637 785.984 cv
241.363 790.183 li
280.511 794.523 292.38 814.615 276.969 850.455 cv
283.031 846.955 li
cp
@
283.031 850.455 mo
320.159 844.947 332.027 824.857 318.638 790.183 cv
311.362 785.984 li
327.178 822.056 315.713 842.38 276.969 846.955 cv
283.031 850.455 li
cp
f
283.031 850.455 mo
320.159 844.947 332.027 824.857 318.638 790.183 cv
311.362 785.984 li
327.178 822.056 315.713 842.38 276.969 846.955 cv
283.031 850.455 li
cp
@
420 852.205 mo
443.333 881.605 466.667 881.837 490 852.906 cv
490 844.505 li
466.667 876.238 443.333 876.472 420 845.205 cv
420 852.205 li
cp
f
420 852.205 mo
443.333 881.605 466.667 881.837 490 852.906 cv
490 844.505 li
466.667 876.238 443.333 876.472 420 845.205 cv
420 852.205 li
cp
@
416.969 850.455 mo
403.175 885.363 414.639 905.687 451.362 911.427 cv
458.638 907.226 li
419.488 902.886 407.62 882.796 423.031 846.955 cv
416.969 850.455 li
cp
f
416.969 850.455 mo
403.175 885.363 414.639 905.687 451.362 911.427 cv
458.638 907.226 li
419.488 902.886 407.62 882.796 423.031 846.955 cv
416.969 850.455 li
cp
@
416.969 846.955 mo
379.841 852.462 367.973 872.552 381.362 907.226 cv
388.638 911.427 li
372.822 875.353 384.287 855.029 423.031 850.455 cv
416.969 846.955 li
cp
f
416.969 846.955 mo
379.841 852.462 367.973 872.552 381.362 907.226 cv
388.638 911.427 li
372.822 875.353 384.287 855.029 423.031 850.455 cv
416.969 846.955 li
cp
@
420 845.205 mo
396.667 815.804 373.333 815.572 350 844.505 cv
350 852.906 li
373.333 821.171 396.667 820.939 420 852.205 cv
420 845.205 li
cp
f
420 845.205 mo
396.667 815.804 373.333 815.572 350 844.505 cv
350 852.906 li
373.333 821.171 396.667 820.939 420 852.205 cv
420 845.205 li
cp
@
423.031 846.955 mo
436.825 812.048 425.361 791.724 388.638 785.984 cv
381.362 790.183 li
420.512 794.523 432.38 814.615 416.969 850.455 cv
423.031 846.955 li
cp
f
423.031 846.955 mo
436.825 812.048 425.361 791.724 388.638 785.984 cv
381.362 790.183 li
420.512 794.523 432.38 814.615 416.969 850.455 cv
423.031 846.955 li
cp
@
423.031 850.455 mo
460.159 844.947 472.027 824.857 458.638 790.183 cv
451.362 785.984 li
467.178 822.056 455.713 842.38 416.969 846.955 cv
423.031 850.455 li
cp
f
423.031 850.455 mo
460.159 844.947 472.027 824.857 458.638 790.183 cv
451.362 785.984 li
467.178 822.056 455.713 842.38 416.969 846.955 cv
423.031 850.455 li
cp
@
560 852.205 mo
583.333 881.605 606.667 881.837 630 852.906 cv
630 844.505 li
606.667 876.238 583.333 876.472 560 845.205 cv
560 852.205 li
cp
f
560 852.205 mo
583.333 881.605 606.667 881.837 630 852.906 cv
630 844.505 li
606.667 876.238 583.333 876.472 560 845.205 cv
560 852.205 li
cp
@
556.969 850.455 mo
543.175 885.363 554.639 905.687 591.362 911.427 cv
598.638 907.226 li
559.488 902.886 547.62 882.796 563.031 846.955 cv
556.969 850.455 li
cp
f
556.969 850.455 mo
543.175 885.363 554.639 905.687 591.362 911.427 cv
598.638 907.226 li
559.488 902.886 547.62 882.796 563.031 846.955 cv
556.969 850.455 li
cp
@
556.969 846.955 mo
519.841 852.462 507.973 872.552 521.362 907.226 cv
528.638 911.427 li
512.822 875.353 524.287 855.029 563.031 850.455 cv
556.969 846.955 li
cp
f
556.969 846.955 mo
519.841 852.462 507.973 872.552 521.362 907.226 cv
528.638 911.427 li
512.822 875.353 524.287 855.029 563.031 850.455 cv
556.969 846.955 li
cp
@
560 845.205 mo
536.667 815.804 513.333 815.572 490 844.505 cv
490 852.906 li
513.333 821.171 536.667 820.939 560 852.205 cv
560 845.205 li
cp
f
560 845.205 mo
536.667 815.804 513.333 815.572 490 844.505 cv
490 852.906 li
513.333 821.171 536.667 820.939 560 852.205 cv
560 845.205 li
cp
@
563.031 846.955 mo
576.825 812.048 565.361 791.724 528.638 785.984 cv
521.362 790.183 li
560.512 794.523 572.38 814.615 556.969 850.455 cv
563.031 846.955 li
cp
f
563.031 846.955 mo
576.825 812.048 565.361 791.724 528.638 785.984 cv
521.362 790.183 li
560.512 794.523 572.38 814.615 556.969 850.455 cv
563.031 846.955 li
cp
@
563.031 850.455 mo
600.159 844.947 612.027 824.857 598.638 790.183 cv
591.362 785.984 li
607.178 822.056 595.713 842.38 556.969 846.955 cv
563.031 850.455 li
cp
f
563.031 850.455 mo
600.159 844.947 612.027 824.857 598.638 790.183 cv
591.362 785.984 li
607.178 822.056 595.713 842.38 556.969 846.955 cv
563.031 850.455 li
cp
@
700 852.205 mo
723.333 881.605 746.667 881.837 770 852.906 cv
770 844.505 li
746.667 876.238 723.333 876.472 700 845.205 cv
700 852.205 li
cp
f
700 852.205 mo
723.333 881.605 746.667 881.837 770 852.906 cv
770 844.505 li
746.667 876.238 723.333 876.472 700 845.205 cv
700 852.205 li
cp
@
696.969 850.455 mo
683.175 885.363 694.639 905.687 731.362 911.427 cv
738.638 907.226 li
699.488 902.886 687.62 882.796 703.031 846.955 cv
696.969 850.455 li
cp
f
696.969 850.455 mo
683.175 885.363 694.639 905.687 731.362 911.427 cv
738.638 907.226 li
699.488 902.886 687.62 882.796 703.031 846.955 cv
696.969 850.455 li
cp
@
696.969 846.955 mo
659.841 852.462 647.973 872.552 661.362 907.226 cv
668.638 911.427 li
652.822 875.353 664.287 855.029 703.031 850.455 cv
696.969 846.955 li
cp
f
696.969 846.955 mo
659.841 852.462 647.973 872.552 661.362 907.226 cv
668.638 911.427 li
652.822 875.353 664.287 855.029 703.031 850.455 cv
696.969 846.955 li
cp
@
700 845.205 mo
676.667 815.804 653.333 815.572 630 844.505 cv
630 852.906 li
653.333 821.171 676.667 820.939 700 852.205 cv
700 845.205 li
cp
f
700 845.205 mo
676.667 815.804 653.333 815.572 630 844.505 cv
630 852.906 li
653.333 821.171 676.667 820.939 700 852.205 cv
700 845.205 li
cp
@
703.031 846.955 mo
716.825 812.048 705.361 791.724 668.638 785.984 cv
661.362 790.183 li
700.512 794.523 712.38 814.615 696.969 850.455 cv
703.031 846.955 li
cp
f
703.031 846.955 mo
716.825 812.048 705.361 791.724 668.638 785.984 cv
661.362 790.183 li
700.512 794.523 712.38 814.615 696.969 850.455 cv
703.031 846.955 li
cp
@
703.031 850.455 mo
740.159 844.947 752.027 824.857 738.638 790.183 cv
731.362 785.984 li
747.178 822.056 735.713 842.38 696.969 846.955 cv
703.031 850.455 li
cp
f
703.031 850.455 mo
740.159 844.947 752.027 824.857 738.638 790.183 cv
731.362 785.984 li
747.178 822.056 735.713 842.38 696.969 846.955 cv
703.031 850.455 li
cp
@
840 852.205 mo
863.333 881.605 886.667 881.837 910 852.906 cv
910 844.505 li
886.667 876.238 863.333 876.472 840 845.205 cv
840 852.205 li
cp
f
840 852.205 mo
863.333 881.605 886.667 881.837 910 852.906 cv
910 844.505 li
886.667 876.238 863.333 876.472 840 845.205 cv
840 852.205 li
cp
@
836.969 850.455 mo
823.175 885.363 834.639 905.687 871.362 911.427 cv
878.638 907.226 li
839.488 902.886 827.62 882.796 843.031 846.955 cv
836.969 850.455 li
cp
f
836.969 850.455 mo
823.175 885.363 834.639 905.687 871.362 911.427 cv
878.638 907.226 li
839.488 902.886 827.62 882.796 843.031 846.955 cv
836.969 850.455 li
cp
@
836.969 846.955 mo
799.841 852.462 787.973 872.552 801.362 907.226 cv
808.638 911.427 li
792.822 875.353 804.287 855.029 843.031 850.455 cv
836.969 846.955 li
cp
f
836.969 846.955 mo
799.841 852.462 787.973 872.552 801.362 907.226 cv
808.638 911.427 li
792.822 875.353 804.287 855.029 843.031 850.455 cv
836.969 846.955 li
cp
@
840 845.205 mo
816.667 815.804 793.333 815.572 770 844.505 cv
770 852.906 li
793.333 821.171 816.667 820.939 840 852.205 cv
840 845.205 li
cp
f
840 845.205 mo
816.667 815.804 793.333 815.572 770 844.505 cv
770 852.906 li
793.333 821.171 816.667 820.939 840 852.205 cv
840 845.205 li
cp
@
843.031 846.955 mo
856.825 812.048 845.361 791.724 808.638 785.984 cv
801.362 790.183 li
840.512 794.523 852.38 814.615 836.969 850.455 cv
843.031 846.955 li
cp
f
843.031 846.955 mo
856.825 812.048 845.361 791.724 808.638 785.984 cv
801.362 790.183 li
840.512 794.523 852.38 814.615 836.969 850.455 cv
843.031 846.955 li
cp
@
843.031 850.455 mo
880.159 844.947 892.027 824.857 878.638 790.183 cv
871.362 785.984 li
887.178 822.056 875.713 842.38 836.969 846.955 cv
843.031 850.455 li
cp
f
843.031 850.455 mo
880.159 844.947 892.027 824.857 878.638 790.183 cv
871.362 785.984 li
887.178 822.056 875.713 842.38 836.969 846.955 cv
843.031 850.455 li
cp
@
980 852.205 mo
1003.33 881.605 1026.67 881.837 1050 852.906 cv
1050 844.505 li
1026.67 876.238 1003.33 876.472 980 845.205 cv
980 852.205 li
cp
f
980 852.205 mo
1003.33 881.605 1026.67 881.837 1050 852.906 cv
1050 844.505 li
1026.67 876.238 1003.33 876.472 980 845.205 cv
980 852.205 li
cp
@
976.969 850.455 mo
963.175 885.363 974.639 905.687 1011.36 911.427 cv
1018.64 907.226 li
979.488 902.886 967.62 882.796 983.031 846.955 cv
976.969 850.455 li
cp
f
976.969 850.455 mo
963.175 885.363 974.639 905.687 1011.36 911.427 cv
1018.64 907.226 li
979.488 902.886 967.62 882.796 983.031 846.955 cv
976.969 850.455 li
cp
@
976.969 846.955 mo
939.841 852.462 927.973 872.552 941.362 907.226 cv
948.638 911.427 li
932.822 875.353 944.287 855.029 983.031 850.455 cv
976.969 846.955 li
cp
f
976.969 846.955 mo
939.841 852.462 927.973 872.552 941.362 907.226 cv
948.638 911.427 li
932.822 875.353 944.287 855.029 983.031 850.455 cv
976.969 846.955 li
cp
@
980 845.205 mo
956.667 815.804 933.333 815.572 910 844.505 cv
910 852.906 li
933.333 821.171 956.667 820.939 980 852.205 cv
980 845.205 li
cp
f
980 845.205 mo
956.667 815.804 933.333 815.572 910 844.505 cv
910 852.906 li
933.333 821.171 956.667 820.939 980 852.205 cv
980 845.205 li
cp
@
983.031 846.955 mo
996.825 812.048 985.361 791.724 948.638 785.984 cv
941.362 790.183 li
980.512 794.523 992.38 814.615 976.969 850.455 cv
983.031 846.955 li
cp
f
983.031 846.955 mo
996.825 812.048 985.361 791.724 948.638 785.984 cv
941.362 790.183 li
980.512 794.523 992.38 814.615 976.969 850.455 cv
983.031 846.955 li
cp
@
983.031 850.455 mo
1020.16 844.947 1032.03 824.857 1018.64 790.183 cv
1011.36 785.984 li
1027.18 822.056 1015.71 842.38 976.969 846.955 cv
983.031 850.455 li
cp
f
983.031 850.455 mo
1020.16 844.947 1032.03 824.857 1018.64 790.183 cv
1011.36 785.984 li
1027.18 822.056 1015.71 842.38 976.969 846.955 cv
983.031 850.455 li
cp
@
-70 973.449 mo
-46.6665 1002.85 -23.3335 1003.08 0 974.148 cv
0 965.748 li
-23.3335 997.482 -46.6665 997.714 -70 966.449 cv
-70 973.449 li
cp
f
-70 973.449 mo
-46.6665 1002.85 -23.3335 1003.08 0 974.148 cv
0 965.748 li
-23.3335 997.482 -46.6665 997.714 -70 966.449 cv
-70 973.449 li
cp
@
70 973.449 mo
93.3335 1002.85 116.667 1003.08 140 974.148 cv
140 965.748 li
116.667 997.482 93.3335 997.714 70 966.449 cv
70 973.449 li
cp
f
70 973.449 mo
93.3335 1002.85 116.667 1003.08 140 974.148 cv
140 965.748 li
116.667 997.482 93.3335 997.714 70 966.449 cv
70 973.449 li
cp
@
66.9688 971.699 mo
53.1743 1006.6 64.6392 1026.93 101.363 1032.67 cv
108.637 1028.47 li
69.4888 1024.13 57.6201 1004.04 73.0313 968.199 cv
66.9688 971.699 li
cp
f
66.9688 971.699 mo
53.1743 1006.6 64.6392 1026.93 101.363 1032.67 cv
108.637 1028.47 li
69.4888 1024.13 57.6201 1004.04 73.0313 968.199 cv
66.9688 971.699 li
cp
@
66.9688 968.199 mo
29.8413 973.707 17.9722 993.796 31.3628 1028.47 cv
38.6372 1032.67 li
22.8223 996.597 34.2866 976.273 73.0313 971.699 cv
66.9688 968.199 li
cp
f
66.9688 968.199 mo
29.8413 973.707 17.9722 993.796 31.3628 1028.47 cv
38.6372 1032.67 li
22.8223 996.597 34.2866 976.273 73.0313 971.699 cv
66.9688 968.199 li
cp
@
70 966.449 mo
46.6665 937.048 23.3335 936.816 0 965.748 cv
0 974.148 li
23.3335 942.416 46.6665 942.181 70 973.449 cv
70 966.449 li
cp
f
70 966.449 mo
46.6665 937.048 23.3335 936.816 0 965.748 cv
0 974.148 li
23.3335 942.416 46.6665 942.181 70 973.449 cv
70 966.449 li
cp
@
73.0313 968.199 mo
86.8257 933.291 75.3608 912.966 38.6372 907.226 cv
31.3628 911.427 li
70.5112 915.767 82.3799 935.857 66.9688 971.699 cv
73.0313 968.199 li
cp
f
73.0313 968.199 mo
86.8257 933.291 75.3608 912.966 38.6372 907.226 cv
31.3628 911.427 li
70.5112 915.767 82.3799 935.857 66.9688 971.699 cv
73.0313 968.199 li
cp
@
73.0313 971.699 mo
110.159 966.191 122.028 946.101 108.637 911.427 cv
101.363 907.226 li
117.178 943.3 105.713 963.625 66.9688 968.199 cv
73.0313 971.699 li
cp
f
73.0313 971.699 mo
110.159 966.191 122.028 946.101 108.637 911.427 cv
101.363 907.226 li
117.178 943.3 105.713 963.625 66.9688 968.199 cv
73.0313 971.699 li
cp
@
210 973.449 mo
233.333 1002.85 256.667 1003.08 280 974.148 cv
280 965.748 li
256.667 997.482 233.333 997.714 210 966.449 cv
210 973.449 li
cp
f
210 973.449 mo
233.333 1002.85 256.667 1003.08 280 974.148 cv
280 965.748 li
256.667 997.482 233.333 997.714 210 966.449 cv
210 973.449 li
cp
@
206.969 971.699 mo
193.174 1006.6 204.639 1026.93 241.363 1032.67 cv
248.637 1028.47 li
209.489 1024.13 197.62 1004.04 213.031 968.199 cv
206.969 971.699 li
cp
f
206.969 971.699 mo
193.174 1006.6 204.639 1026.93 241.363 1032.67 cv
248.637 1028.47 li
209.489 1024.13 197.62 1004.04 213.031 968.199 cv
206.969 971.699 li
cp
@
206.969 968.199 mo
169.841 973.707 157.972 993.796 171.363 1028.47 cv
178.637 1032.67 li
162.822 996.597 174.287 976.273 213.031 971.699 cv
206.969 968.199 li
cp
f
206.969 968.199 mo
169.841 973.707 157.972 993.796 171.363 1028.47 cv
178.637 1032.67 li
162.822 996.597 174.287 976.273 213.031 971.699 cv
206.969 968.199 li
cp
@
210 966.449 mo
186.667 937.048 163.333 936.816 140 965.748 cv
140 974.148 li
163.333 942.416 186.667 942.181 210 973.449 cv
210 966.449 li
cp
f
210 966.449 mo
186.667 937.048 163.333 936.816 140 965.748 cv
140 974.148 li
163.333 942.416 186.667 942.181 210 973.449 cv
210 966.449 li
cp
@
213.031 968.199 mo
226.826 933.291 215.361 912.966 178.637 907.226 cv
171.363 911.427 li
210.511 915.767 222.38 935.857 206.969 971.699 cv
213.031 968.199 li
cp
f
213.031 968.199 mo
226.826 933.291 215.361 912.966 178.637 907.226 cv
171.363 911.427 li
210.511 915.767 222.38 935.857 206.969 971.699 cv
213.031 968.199 li
cp
@
213.031 971.699 mo
250.159 966.191 262.028 946.101 248.637 911.427 cv
241.363 907.226 li
257.178 943.3 245.713 963.625 206.969 968.199 cv
213.031 971.699 li
cp
f
213.031 971.699 mo
250.159 966.191 262.028 946.101 248.637 911.427 cv
241.363 907.226 li
257.178 943.3 245.713 963.625 206.969 968.199 cv
213.031 971.699 li
cp
@
350 973.449 mo
373.333 1002.85 396.667 1003.08 420 974.148 cv
420 965.748 li
396.667 997.482 373.333 997.714 350 966.449 cv
350 973.449 li
cp
f
350 973.449 mo
373.333 1002.85 396.667 1003.08 420 974.148 cv
420 965.748 li
396.667 997.482 373.333 997.714 350 966.449 cv
350 973.449 li
cp
@
346.969 971.699 mo
333.175 1006.6 344.639 1026.93 381.362 1032.67 cv
388.638 1028.47 li
349.488 1024.13 337.62 1004.04 353.031 968.199 cv
346.969 971.699 li
cp
f
346.969 971.699 mo
333.175 1006.6 344.639 1026.93 381.362 1032.67 cv
388.638 1028.47 li
349.488 1024.13 337.62 1004.04 353.031 968.199 cv
346.969 971.699 li
cp
@
346.969 968.199 mo
309.841 973.707 297.972 993.796 311.362 1028.47 cv
318.638 1032.67 li
302.822 996.597 314.287 976.273 353.031 971.699 cv
346.969 968.199 li
cp
f
346.969 968.199 mo
309.841 973.707 297.972 993.796 311.362 1028.47 cv
318.638 1032.67 li
302.822 996.597 314.287 976.273 353.031 971.699 cv
346.969 968.199 li
cp
@
350 966.449 mo
326.667 937.048 303.333 936.816 280 965.748 cv
280 974.148 li
303.333 942.416 326.667 942.181 350 973.449 cv
350 966.449 li
cp
f
350 966.449 mo
326.667 937.048 303.333 936.816 280 965.748 cv
280 974.148 li
303.333 942.416 326.667 942.181 350 973.449 cv
350 966.449 li
cp
@
353.031 968.199 mo
366.825 933.291 355.361 912.966 318.638 907.226 cv
311.362 911.427 li
350.512 915.767 362.38 935.857 346.969 971.699 cv
353.031 968.199 li
cp
f
353.031 968.199 mo
366.825 933.291 355.361 912.966 318.638 907.226 cv
311.362 911.427 li
350.512 915.767 362.38 935.857 346.969 971.699 cv
353.031 968.199 li
cp
@
353.031 971.699 mo
390.159 966.191 402.027 946.101 388.638 911.427 cv
381.362 907.226 li
397.178 943.3 385.713 963.625 346.969 968.199 cv
353.031 971.699 li
cp
f
353.031 971.699 mo
390.159 966.191 402.027 946.101 388.638 911.427 cv
381.362 907.226 li
397.178 943.3 385.713 963.625 346.969 968.199 cv
353.031 971.699 li
cp
@
490 973.449 mo
513.333 1002.85 536.667 1003.08 560 974.148 cv
560 965.748 li
536.667 997.482 513.333 997.714 490 966.449 cv
490 973.449 li
cp
f
490 973.449 mo
513.333 1002.85 536.667 1003.08 560 974.148 cv
560 965.748 li
536.667 997.482 513.333 997.714 490 966.449 cv
490 973.449 li
cp
@
486.969 971.699 mo
473.175 1006.6 484.639 1026.93 521.362 1032.67 cv
528.638 1028.47 li
489.488 1024.13 477.62 1004.04 493.031 968.199 cv
486.969 971.699 li
cp
f
486.969 971.699 mo
473.175 1006.6 484.639 1026.93 521.362 1032.67 cv
528.638 1028.47 li
489.488 1024.13 477.62 1004.04 493.031 968.199 cv
486.969 971.699 li
cp
@
486.969 968.199 mo
449.841 973.707 437.973 993.796 451.362 1028.47 cv
458.638 1032.67 li
442.822 996.597 454.287 976.273 493.031 971.699 cv
486.969 968.199 li
cp
f
486.969 968.199 mo
449.841 973.707 437.973 993.796 451.362 1028.47 cv
458.638 1032.67 li
442.822 996.597 454.287 976.273 493.031 971.699 cv
486.969 968.199 li
cp
@
490 966.449 mo
466.667 937.048 443.333 936.816 420 965.748 cv
420 974.148 li
443.333 942.416 466.667 942.181 490 973.449 cv
490 966.449 li
cp
f
490 966.449 mo
466.667 937.048 443.333 936.816 420 965.748 cv
420 974.148 li
443.333 942.416 466.667 942.181 490 973.449 cv
490 966.449 li
cp
@
493.031 968.199 mo
506.825 933.291 495.361 912.966 458.638 907.226 cv
451.362 911.427 li
490.512 915.767 502.38 935.857 486.969 971.699 cv
493.031 968.199 li
cp
f
493.031 968.199 mo
506.825 933.291 495.361 912.966 458.638 907.226 cv
451.362 911.427 li
490.512 915.767 502.38 935.857 486.969 971.699 cv
493.031 968.199 li
cp
@
493.031 971.699 mo
530.159 966.191 542.027 946.101 528.638 911.427 cv
521.362 907.226 li
537.178 943.3 525.713 963.625 486.969 968.199 cv
493.031 971.699 li
cp
f
493.031 971.699 mo
530.159 966.191 542.027 946.101 528.638 911.427 cv
521.362 907.226 li
537.178 943.3 525.713 963.625 486.969 968.199 cv
493.031 971.699 li
cp
@
630 973.449 mo
653.333 1002.85 676.667 1003.08 700 974.148 cv
700 965.748 li
676.667 997.482 653.333 997.714 630 966.449 cv
630 973.449 li
cp
f
630 973.449 mo
653.333 1002.85 676.667 1003.08 700 974.148 cv
700 965.748 li
676.667 997.482 653.333 997.714 630 966.449 cv
630 973.449 li
cp
@
626.969 971.699 mo
613.175 1006.6 624.639 1026.93 661.362 1032.67 cv
668.638 1028.47 li
629.488 1024.13 617.62 1004.04 633.031 968.199 cv
626.969 971.699 li
cp
f
626.969 971.699 mo
613.175 1006.6 624.639 1026.93 661.362 1032.67 cv
668.638 1028.47 li
629.488 1024.13 617.62 1004.04 633.031 968.199 cv
626.969 971.699 li
cp
@
626.969 968.199 mo
589.841 973.707 577.973 993.796 591.362 1028.47 cv
598.638 1032.67 li
582.822 996.597 594.287 976.273 633.031 971.699 cv
626.969 968.199 li
cp
f
626.969 968.199 mo
589.841 973.707 577.973 993.796 591.362 1028.47 cv
598.638 1032.67 li
582.822 996.597 594.287 976.273 633.031 971.699 cv
626.969 968.199 li
cp
@
630 966.449 mo
606.667 937.048 583.333 936.816 560 965.748 cv
560 974.148 li
583.333 942.416 606.667 942.181 630 973.449 cv
630 966.449 li
cp
f
630 966.449 mo
606.667 937.048 583.333 936.816 560 965.748 cv
560 974.148 li
583.333 942.416 606.667 942.181 630 973.449 cv
630 966.449 li
cp
@
633.031 968.199 mo
646.825 933.291 635.361 912.966 598.638 907.226 cv
591.362 911.427 li
630.512 915.767 642.38 935.857 626.969 971.699 cv
633.031 968.199 li
cp
f
633.031 968.199 mo
646.825 933.291 635.361 912.966 598.638 907.226 cv
591.362 911.427 li
630.512 915.767 642.38 935.857 626.969 971.699 cv
633.031 968.199 li
cp
@
633.031 971.699 mo
670.159 966.191 682.027 946.101 668.638 911.427 cv
661.362 907.226 li
677.178 943.3 665.713 963.625 626.969 968.199 cv
633.031 971.699 li
cp
f
633.031 971.699 mo
670.159 966.191 682.027 946.101 668.638 911.427 cv
661.362 907.226 li
677.178 943.3 665.713 963.625 626.969 968.199 cv
633.031 971.699 li
cp
@
770 973.449 mo
793.333 1002.85 816.667 1003.08 840 974.148 cv
840 965.748 li
816.667 997.482 793.333 997.714 770 966.449 cv
770 973.449 li
cp
f
770 973.449 mo
793.333 1002.85 816.667 1003.08 840 974.148 cv
840 965.748 li
816.667 997.482 793.333 997.714 770 966.449 cv
770 973.449 li
cp
@
766.969 971.699 mo
753.175 1006.6 764.639 1026.93 801.362 1032.67 cv
808.638 1028.47 li
769.488 1024.13 757.62 1004.04 773.031 968.199 cv
766.969 971.699 li
cp
f
766.969 971.699 mo
753.175 1006.6 764.639 1026.93 801.362 1032.67 cv
808.638 1028.47 li
769.488 1024.13 757.62 1004.04 773.031 968.199 cv
766.969 971.699 li
cp
@
766.969 968.199 mo
729.841 973.707 717.973 993.796 731.362 1028.47 cv
738.638 1032.67 li
722.822 996.597 734.287 976.273 773.031 971.699 cv
766.969 968.199 li
cp
f
766.969 968.199 mo
729.841 973.707 717.973 993.796 731.362 1028.47 cv
738.638 1032.67 li
722.822 996.597 734.287 976.273 773.031 971.699 cv
766.969 968.199 li
cp
@
770 966.449 mo
746.667 937.048 723.333 936.816 700 965.748 cv
700 974.148 li
723.333 942.416 746.667 942.181 770 973.449 cv
770 966.449 li
cp
f
770 966.449 mo
746.667 937.048 723.333 936.816 700 965.748 cv
700 974.148 li
723.333 942.416 746.667 942.181 770 973.449 cv
770 966.449 li
cp
@
773.031 968.199 mo
786.825 933.291 775.361 912.966 738.638 907.226 cv
731.362 911.427 li
770.512 915.767 782.38 935.857 766.969 971.699 cv
773.031 968.199 li
cp
f
773.031 968.199 mo
786.825 933.291 775.361 912.966 738.638 907.226 cv
731.362 911.427 li
770.512 915.767 782.38 935.857 766.969 971.699 cv
773.031 968.199 li
cp
@
773.031 971.699 mo
810.159 966.191 822.027 946.101 808.638 911.427 cv
801.362 907.226 li
817.178 943.3 805.713 963.625 766.969 968.199 cv
773.031 971.699 li
cp
f
773.031 971.699 mo
810.159 966.191 822.027 946.101 808.638 911.427 cv
801.362 907.226 li
817.178 943.3 805.713 963.625 766.969 968.199 cv
773.031 971.699 li
cp
@
910 973.449 mo
933.333 1002.85 956.667 1003.08 980 974.148 cv
980 965.748 li
956.667 997.482 933.333 997.714 910 966.449 cv
910 973.449 li
cp
f
910 973.449 mo
933.333 1002.85 956.667 1003.08 980 974.148 cv
980 965.748 li
956.667 997.482 933.333 997.714 910 966.449 cv
910 973.449 li
cp
@
906.969 971.699 mo
893.175 1006.6 904.639 1026.93 941.362 1032.67 cv
948.638 1028.47 li
909.488 1024.13 897.62 1004.04 913.031 968.199 cv
906.969 971.699 li
cp
f
906.969 971.699 mo
893.175 1006.6 904.639 1026.93 941.362 1032.67 cv
948.638 1028.47 li
909.488 1024.13 897.62 1004.04 913.031 968.199 cv
906.969 971.699 li
cp
@
906.969 968.199 mo
869.841 973.707 857.973 993.796 871.362 1028.47 cv
878.638 1032.67 li
862.822 996.597 874.287 976.273 913.031 971.699 cv
906.969 968.199 li
cp
f
906.969 968.199 mo
869.841 973.707 857.973 993.796 871.362 1028.47 cv
878.638 1032.67 li
862.822 996.597 874.287 976.273 913.031 971.699 cv
906.969 968.199 li
cp
@
910 966.449 mo
886.667 937.048 863.333 936.816 840 965.748 cv
840 974.148 li
863.333 942.416 886.667 942.181 910 973.449 cv
910 966.449 li
cp
f
910 966.449 mo
886.667 937.048 863.333 936.816 840 965.748 cv
840 974.148 li
863.333 942.416 886.667 942.181 910 973.449 cv
910 966.449 li
cp
@
913.031 968.199 mo
926.825 933.291 915.361 912.966 878.638 907.226 cv
871.362 911.427 li
910.512 915.767 922.38 935.857 906.969 971.699 cv
913.031 968.199 li
cp
f
913.031 968.199 mo
926.825 933.291 915.361 912.966 878.638 907.226 cv
871.362 911.427 li
910.512 915.767 922.38 935.857 906.969 971.699 cv
913.031 968.199 li
cp
@
913.031 971.699 mo
950.159 966.191 962.027 946.101 948.638 911.427 cv
941.362 907.226 li
957.178 943.3 945.713 963.625 906.969 968.199 cv
913.031 971.699 li
cp
f
913.031 971.699 mo
950.159 966.191 962.027 946.101 948.638 911.427 cv
941.362 907.226 li
957.178 943.3 945.713 963.625 906.969 968.199 cv
913.031 971.699 li
cp
@
1050 966.449 mo
1026.67 937.048 1003.33 936.816 980 965.748 cv
980 974.148 li
1003.33 942.416 1026.67 942.181 1050 973.449 cv
1050 966.449 li
cp
f
1050 966.449 mo
1026.67 937.048 1003.33 936.816 980 965.748 cv
980 974.148 li
1003.33 942.416 1026.67 942.181 1050 973.449 cv
1050 966.449 li
cp
@
grestore
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 16.0
%%AI8_CreatorVersion: 16.0.0
%%For: (Zydd) ()
%%Title: (bw_hexa_028.eps)
%%CreationDate: 8/17/2016 8:28 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6B6Pi9dKY"^n$W'8^tH^mkMU0/ER$Q`)n+!L##(ERI^m/k9'U<%>#H_U0P=\:SFP7fC;i]>dSm0oeC8*D;_(j_n!j!"()(E0
%:_RQ\9^&@>0FV[^f@8;FjfI73;^iTOcH%EFU4L64psUobpnnD4ak,E2?fbJgUfi0t[p$=g[GG^O-?B,%CPfsg4*X[tgm5"kqVR.S
%C@U[)I'^)Y4r5^!EhV@f.^g"bPS)8@;0q*c<2udicIZjB\X:`?XYt@aB9_^n$Y0K_L;0MHqXa+kG][80[m>F.TeMt8ZgCJm0&S2T
%BD2>+r*F*FS&KQI?@/2`Ec0GI?cD/?.mdHKqMXoGUKVK#;=DR-9HflDr9=4K,R$oL3meYW/+c1F7.aEpWSIJ's&CNJ]pRG$(JEke
%h+\j5p3Gd"5c[=B&HqEtrT^I_/N5=uPr>SPePE'm:P\U@\I-&iZRAe2W-clUUAND7ED^PdQePp3ldZL3SAg/49*&OB;#Id2LK(Vg
%3Gt's(\K:XfsE5rTSld2T;]k8_UPrGUff"ZhaR%g.9:P?g6ojK?p7<l3ZPmJ0Vlb6b'TtnkYtE/hJQ@dmPsN1_Q\K^An2>0?dni&
%Xt==6]3VR"eHZr7*>4/?15G%se?)n'=9!jSd=Qjc!j'lON2lPpqlT`#H3^b>2!ehI#L>n_n3NlT1EQF9AA'dj:T>H)Ek>KC1j3ZL
%lXR\A2bNbpEWT4@=\`(;k7Y,b:[m9!n@tB#V(ieWID5UubT8\FlfhI;YB%&-+>Ur4MR?@A]%Cgeao%r<X;.32oE+3(;#(L3.=r>H
%\\$03AIA^Q;1<;UO&-apLk#WHX!gDBJY_rcQoV"]n`q:d#KQrQMo8&jp]cHYr`uXLO?BI#1Za,/TsZP^5Ca"if1IW"@I$^h5HKW;
%C3fgIf5&''BmnqKaX?lX8::kChQ.aLXD0XTXcLCh]j>jYek0>bEcKQE>Mfi`+ZM3[!:Y#R1X?f:e]N6Ff_DDXnabkU`s)9d)[SrO
%W7Q;@H=,XJfIquY*!\l9V$`TY5*@*Dc2$89p=fh6=KftYZVh:$Mf<oj=))-j9q6DWmBSf[oreR!L(`Yk`<L\u;\k1RDSGBl=<bg4
%+Is!J*),Z=>iON<<m+n,amRdGJ(N%SM+(7IHQ_F.SSJ%A/s/:HI[(QS+O,08BHUlV84X`<+7:='->n_1aVjl9d8`I6CLfm:>+Qn4
%?N`r`i;+jXRUUbiZN39%S\P/XJ*hgErd\X2K/Gc2R(.V[&u@>P&nHpC."SC#X236:Y='/U'`N]Q"hK;!<-[l%'WYV-/mHR[H&Z-K
%>,O_NE:\R`k@eGqj:2%!l.-'*)/kTH5c1-(@@M'Zkn4Z(@(ipX5KrEmELqg,kbikUfTgVZbC$Q(&2EjJFWNg'^cs>fY^;8PJ*dJ"
%LBg=7H1ZBqPaMF4X',T3dU;c+/$GLe)(^IL..Kd5=WD*5I4BqAp\"X]*mJ`M:*h3l]:c4oC\X\'09cS&p$?e&p&%mrfieH@o,Nuk
%HhXE9X'"cI`:-4=-XdJ.Cce1nS!Nfps7rgteSF7p]i;,KI?mNg]#dOT0GFtDXe78P(o<>p1LTfnKN]%_Tk*_CJti!7&VE.k>$"[\
%YLRZhR1X#+IiJaaKu2hVdDZ/\3uid+m<f#JVu#!VLqis(U5Q,te@4?S$Kbc=U^gkjJ-l`iI>4ML^<5hP$&ht..V&0WR>I*/G"%i"
%6u)%/Mj>(8s"G<>OXn]PeMa-V2s^M!gcAdK)8Z0fq1\YFdVe+NK&'+fd71HIgd"gHDcrcfNG`g+\tEV68Ho'8<\@EKl9HR_*Ai\1
%8rM)l$HlLSNGA"@_d`5dWAi1u?gG[C.03Xt=f]2d%W^i//:sTr$J:MYSCrrS\e_W]DCs/VeVj9l<<9-i-hULD[K4(-m-efffBM;Y
%)2N1$2Sg.f0tZ1\>%)=_Nd,eid\+<s3h#JA=`YM8.$dJCpK7ZJ'jI;PiN5S_9rBLB.urE7*Q_W&<&4/'`I@G[Y;TZ/DX8].3ph7Q
%XOmSYmE5Hol!2'-6qfRR9mkNB7TSub'CXL!4=G'C<JMQ?iY=4[LlA*-Ru%@%E]4Z6b#bKu2K=stJ4YV.<o+td9s%YS!SIG&>)a_n
%b]!N5H<!Q[5MQ`K;C'.=[tFm!f86$k]ii>f,;aBR/$>>@b,TqhOfUo`>-\X3M;:4KRLFAl:/Y__Qn-be.^mXYmLhZMH."7Qb0@]D
%M2UphD8a:*?RsZ!qd4)mUVqE3M+I6V6*^.?JQ1u-]n);$H[f-M<B=Inf*q2j8cW1@2Sfp>Jh#;GOCCNkSG<86iNV,6^j&>I,)W]k
%OTj&Ya.7AUJ3)bd=]*?B5tf;Oc]-aIVcn6.H<"jk5]ZAFq81Y*N2[Wo.st4.;m*c_i'kF<I,qf.qRTR>IrHa*OSFgI#>EEXV,g?u
%_2q)Zg1iS4T318#;ened@]`p-!#\^O;0.gAm@aRDq8-Dr-$Nn`<'-2OYLblW+T&%]Q)dmtVJ8rE>eO&\g<NJrW7L:Zj57UUALFI,
%>n>)mgW,<5Ru;YRo6cu;';+6/V])EU#,L$rVnSruU(WQ0S!6)[mIF4WQ?5jqaVZ=JWuILlW3;p6\mKk_>#0j3^u!oDVsPs$!GTk&
%>!.WFT,Kta.2HYBUTVtccejU[VdY<n6=%W.'_n<I0AAps,WIsIhZ0U;JS>R8U3<g8k&t<4k7ieljc.u@2*<b]*]ghr<`!fPfW%`6
%U?!q-r-BD1,B+9K.?p.:M'rpn$7W'F82dCG670IcCU$KRTBINX)UA1Zs/Xpk5k_Q"o#4h@dK$<qg^F)`<mPtDYZRgO7>)!U*+>dr
%j*"G(<E^JPZq5)dhs4l"E5?@`S[NoCDfB`R#Z7,8B"\X3o41=>K8:j.qW=g+W`Z;c7!^lS4'Yatc\UDpDQQn;Vbh*9S14T*+15)a
%[5`#W.mYFP6'm"+I]M'm?$.uUZVO@9RN;Pq.&T6/aK6&.TYT5"3.bkp;4`B^/OP6kY;3s,^E&1O@p%Q%1#ohJ5CTXl9B?e!J!J(r
%e_AsT=Mk0>("@%OgFk,r^e;0ng+PDL%4ug'W7TaVSjVXb;e5Sji9AA\DpD;ES.SsjrZY.;=lA7>%B.D::.fN`+Ia(EGS)$G]p;<W
%B'T_5pE`Y5h^U4$j(11>T`2scQ5tM2S;lp=;bnLkSl"^K"P@Pq.Ipfq'5gO<cFEsu::JcLkXISpTZk^71Af9?Z^J2@[`WsbX7CS"
%?+<M6mV]D51ffrTXYVA^9mT+rUckU,TCC,='3cjI0mX5)%dP_tc\VO2,nBAtD`XL3ZP#^n1-<O,2;:gSlL(C<W791_%I"d)Aqe;+
%\$*+jl^[oPJ'BgcVR6^gYB7aNFKjt<[2P40oiZ"AJqe_PF.?"W/;*)lb-6cJOJH9.:C)q_FotHgi:$efRcSoad.B4D!.0*srX-tO
%,[`8qluC?3LO]`Les0*-?7(c5D6$sePcQE5V/a8(oEbB?rdZ,&UO:Q>IDJjK[HR9uPbMf/=^'TVGf/EP2!oAc'nD/-$923P&4?.4
%J55ku_("TFDmBmoT.]o8WkcMrR4;%LU8;\X)rWZ]OuA0f"6sSHIRVtWe+E]b5W"`=YQ#s?9qY<>K?"%*;tGfJ[\u-rlhj\8pRILO
%S`CsrZD5l'_iKs(;D^e%Pfg,NH];:gV')K$$;X6IjbZmdIoiYW:;`DSXk-2B$S+m_7%&7,fX=kN))t,ROoPY-^n;->oUlE)Uj//M
%L$./1!(u&-bu1FqXMDaC7%a=Pr!etNO*^EtS6`^%ZA*4L#Qt>]pcT9!7QZ`B>o!V$A1^?,i7pX4rY<l0em"pGp2>JsZ4ak$>(Nm^
%M:u?!65gJa=p]qb>&6Uj%Qe)q!ugW8T:'^/)En6,1JHAO>'MkTU\'it-RMKNO2*;[=5**?b"+!`(rEXf'nBI*-)gU(#7V)[iENYF
%#YP77W!Z?2_U:;u_gA*=6A*9nZ.TI&;R[N/7Y\*5T%%V_?"&T3[7Km`NZ:fmRRB\@XGPnmadV^2f'cd(;lYRC6n;-0q7Br@'SeAJ
%X7M3]WQZ<`(23,CjWLZB,^HLW2)/dk>FA[j]gu8'I8WAE+7+qi+W,e;_7ESRafR&0r/.X?Je*T:VY'uGGKN4b"]L]@OBS`:qRQR@
%c&YJoo2^Kn)At3q.1<e/6*b*d2I.I>))(59PLLtR]jqaf-/R:c#q_oM85cYp#+#[V:.=W+egG%BnJ3Bi:l8<#n=p\o:@JHN5WFDb
%6^/7g!Gb,+8l2hNS_@9ZAunBY4+M;aZ@8I-MR=?d42B_WUL^(1N41H<e!dtoS7`Jdjjuo'%eccr`5Cs;p$p/A>iICcAA@jBF?rf7
%j=-cF&_sV$m%I47*6/$Glee?E2j(E&rWq>!>=pA`VM)&cSrH8DH1"8M'qV#`40<P;rjE.5jR:PVS1i!T3m$6WY+bfinkZfB;JuId
%j-1V.\j^1I2iAu\iZ_G[bL@SH>dqF.JD:_.]RaF`dfdlrhQe[B.!B%MB+[`\=]j_i!m-0tUWDq%2A:BHeih3KONrB]#Cb2&hPl`q
%I!jAmn@jZc[a'e\Pn1^N^!`jF2^f"[/D3M#H<u?]#o50e*$0k(hk43Z@/j@n"gH=CQXde9n-/UnniIfR\_UOYc'RD%7QIAIeJCBV
%G4h:=ZDk``C@.cJ_qu_Nq/fKR02D%Ukf&^tG1#0js#.>NG:(U9MYZ/Hm4*Q8V,kmKO5uhDZ]\!pB?iasajfV=EcUU3c:fj<<5?,4
%hjJ#TZZr'H35!?\e&%e(A63Y];>Fr^2g;:/Ut-]f?2dc*4+:=t2\"Hem^010jn)3>Y$]@=aaG]+4I:,^QtCD^j`P(,EO<3hDmi]+
%S`T02TminED)EF'K`#-7p7edsZ196eDs0'j(jRlCj'\cfm;"VFjMKHrDDH()NF_<+Et6r9^h6lnL$+VfS?%$<PB6-9$>eK;ff3R%
%9ZS^HB=MWUl#piKVQ-:+R'^:_aNCVoFmWeSF_(G_IsKBBouMauDE`2($*7e2Tm3bOj9)0@>2;qK]D\2?[Z#'"N7>CdGm.!PX$UOs
%2G`JIe@K?XcK,RF<BV'"h$lPCh'qC4i]R!07(mk>PkoX(jkWg#0iZ!SWVkHA/+ob7pt`[V.5gk"SJBTdY>bdYQ>nMQ20VPFV`$a7
%V(Rg)[q6uQ%:6$Yc:_bip3#rm!L7D\%8j?+&D!.q9%>78NMYMZ^Js=g5q#uST(5JW`O*VmNQ%mWb2F5A\\e&.rP5nlRCr^ad'&3X
%Rh'Gc*\8'&8[4gKIP"?pm2>Di;J1`-EH9S^ojhZh)HZ#ehl`\O_'FB`E_AjMF/eibI(XbofUlYH?$o[+9CH#$WDDc:,MuDlm-jN`
%<%9;N.MrRGR&d@.</Y,KM>j=+HlO^,8o;hShMSsD5r#$?oj_lOZb4Ou/f`SLTjS3tgeu0#n+u+uQZUG%<@Bsn(/Uu$6IX30-DitB
%LH3+IMo,2)b8%eAD.-qO4KI@;V)gB6fq);JZ^Z<2Su!d[g6&]3@$S=rn6,7FHFGFFk\1Wp3mX&%;m)lE$]4rglOCG9#PWF2T2N''
%rNfIJngcRN*6pd;<2m)=X5Mh&`UuI?UGHeek=[V:DlNWqF'7u]ofast5L5>,@^s\=h^KZ'hp'Dd9>-dn^&++Arc)\2@^f<9N*Yq]
%E4+S*k*LB::L+aeQWNsY2YP.=9>,Z.*cG8o!4TMZ_Y)W3SmUdAlIPRUl/O"teApUq?)gl)(q\]j[q_o#;sJuY4LV8(I]5he)ILO^
%+`g;)hG$?DmG$FYe9NP.;sNbHYZ:MQj-FF"V8necO6J5mlJa`P'eX:)K^(\ccZZ:knf0N4k3`_:o;GW&Ap&:;gXZJcAU\V$QFal5
%4O8Mk5r$jJhX^n!Gbn!T`E%D5`@eR3QD3*%"H3;M<U/_K\Eale$dI8aC(ci$6)DHLO:l:em5-cRVFjQ7m>Pg]WGCLBg/G$JZ-Z=-
%?;RWljC3#a>O!J;#`>fC=Kk%L\%,A=4##MadaD7rZaa_9\p0[;H?d)/I^u]6]5mFEUK%eHkApEu^??o:hVOi]?WV\p5G1d&iOs@L
%![*<jdlsCVEL9M_VX1dAau]2r1W3q(k,hF3ITu[d^N$+u07eSX]D1=]er]%??Mr]0'VB!m[reN^'-#Blh4*lr#H?FGjT"rHq"GEi
%Xjq.>`:<WWl]0<S`m45%nn$!jqg7J[Ub]\Y<L3X:DoM68qX*V*Gn"s9-c&eHjli>,\(=Q^fqeZ&L]$.hqj-WVQ`2?\deE>tm?>PM
%n(Z/=C%IS`f'0QFcbet2hrgZKVb=&YgHA,2^%$OJ<dQto#jAY[jRhlX]^OUWNPjARn(U!>D-RM5[#Lk<3Oe5D\[j#%Xirl/?CY;q
%hPMo#>ANre>\9ClSi[`Ag[cAs"DIAO:Tc^X1@OVah>/l%(2Vi`c!r@hT0o'lb^Idm^QG"p_Qt/bH'?sGE-n*JVYA;=YW_u,!InY<
%ZU/[UJ!P^OY(>4]-]tEHD\t'7@i&60gN8*^F'P/:3D%t`K/c:P(on<*SEtT0en,2(hM>="4Z$n0@&J;!5nY+&LHq9BQZ7QifuhJ'
%*0>7%>Aufkp5!UleC:erId0k32DK4)W8;lC!OlIH!oNg>$C7JPU2R"tiV1_[Y>f/k^a8W4f3DEmM(DXeT-R#dN],4?;G5Kf'5jeO
%M3%3FW=-dH-a.tpIbd)^DHAutcJA>_$@6qcig&f-l=asaRk%F.%(@!J5,I+"qR:U[cr.NfJ@E(&CZ/JIgff*p93k;)GbnTU2,s(]
%N,L'g4iOm0W2*[C`jKVDjeL]Q#QQ/%G?=VJ:26VPl?q,KdqKKQ:Kocu*b")m<;j&KB8_dEd-?CG'L?-;1\bPTb=`:qeY(9'+uo`d
%k'Z!Id-d7Rb/E:kqd[#g>Iq$f!CUjWIU-g7/N3sD$"gDVmS*UGPuooQn+/er't7Su1>W]X<ES(GZ@=DFf'O*3Ep]+L<X1I!V-t\?
%0Pa2ZDIu,Uq'l7%N7rO/'\P39T81C%P7;uo>B;9BGlmu8L>0De][K0tNdtU4:9C)Z1sq:^mgFL-e.h`[Oa.sJVb_B#=!ph'?*3;8
%$pa=@Ji'e\m(2g!7;ei[QQA5XqejIGHQE*il`S`S#)[:Dj9h%^>)7W\No<"RieA!("E*22D[W76I-E_IBYtm.(uZ=_.A2FhQ^njh
%3S<-*q9;-XYhYs\IOX[L!^5RZqr'WHl_1P>gA=-F]'FA@;,RDdQaD$NmWI2i?7@_o8g-\@!&])VnrBp/m>,RAlo)sL"Sq!c]*H1$
%8.bT=hpWA/@@ug9Cb8aRm-_ao0aljm[!-hZ6C^8'&c'IagatZPnVG+tS@j#fE>[K_BPb-OVd[irHn(=U7;5j!,Vs:)JAM/L<QnIV
%k9e%$iXJ`k4;fSVo.i66.X70O)6/CF=Ibo7$,`H4a.Qo.^(Gbi-MpY9XZ-U'J4Al;^RIYA/!mT!QCE("cEh7NZ+uiW('tk&!Z&gp
%3e=%d+YI#W$h23Mdi-tA_8$//ak<eEhbeNN'`J)"lE]:u5`,_I$mcP.gl>0M[>;DFf!Mos'jKLCD=O&$!=][C$g%(nQI3tZL*aeK
%953.)d6mNF7hG3arFrWdPltGodTo"!K+)jlqf^mi71Z]]#]IUEfqFX7C8Hfh<0ao*;O_!i:b_sdmTLT,XnLJ?:S!Nlm-=Aqahr.$
%eah>bnF/jb6Z\FI&MVp.n;b:?L:(DXcPf0\>Dk7qgF$@A+G*jo@;b89Ic8JV]%Ad?LYQd"2`WTS/O\QUfkJdW^3(>Ch7DjXL?E6&
%hILf=m8[=2H'YitRe':Eh;Xip9\[5U84MG1n>BoGD7kAIF7\O@1;\4gh@Z9S#fA?oK@\!>K;]g/Wt%6IZ?\Mqh.$\l[dZoV0;2Z?
%K<I-"KStVIR\4+TAYSVprG*#g&+$QXdOee-1L<dlQ")1H!)T0*Pg;De^&pCaHO;FEDN2,T[&g#T4auO*.6Y+G1B\3uIbTRlh[1]/
%kRsu7$V^9q'ep'o6&6+49:Q)<h>uG$l:?k>Z[\Mm6@".'U>W:>'gg$(8.-1:]5^4>h*NbJ!#dj2^Z5.'ma3*NlO=#(5>D1(/i5(b
%7qa&^:"V/^gZ$doCHFTK_/A)"9d,l-+*-98Mj`gWQ6T:WE@/:N+tQ!+qTCtRj[o&"l^dBhoOR-&j#gS2+.32G45MLPYicY0KZ1i5
%UW@eBY<B(0mn]g*\6Qegc1KFDHQh$o#:0jIGKiEAaI9WjnZL@s[<dRJ+fNfh%,XsL9d0VOa"4T'O@3H&d)LH+FUW1k$gjE;G*!=D
%@,(.FFi"X:,'4A>'KhV5=3Y(?f]U^S9cJU+$NCsGB(*?H[dUkcd!^hM;o."(f1!o+qCR]tg8-tH%Z?Ekd@N;oo[;Alj5t_.#KJ0[
%K\C(IdkTcU!4oF2YD$7>.Ht+?rRo"P;6Y4(V8a;ThIG/\h`T@%IogA;kT.>,"TpfSRLALg1ZXB(fIlZ0NntIn3rsDq3ghBq3SkJ@
%)h)j'RkhT[r[_%ijOPuM(1tN\_:TA=:7__<%LTDhOa(O.I$_[J^dkrF4&(*5Us"]V;j!E)XkX+ke:X=0bm!Y>Z.D>"gq6ZWJ!D7A
%SHJ^C/BiDtd2Y2AlT9_=o4g[b/;I!B`a=2iHV^#uP_j*'o^0mfja"etpiNHqd6(7:[6Eajl.5])&_j7Ue;G=1S+Z6SYmFM'DD$9u
%DDZVLEpK3:]6'lR%gj!r[%g7&?mu'[Y7K(+Jq01[lSbMGl/kThn;R3O`C1XJ=HjRZB<`U.bFLrU6)4/,Q;*f%.hNOf^@#I&,BM-k
%JfPH@Wl&IU;f;=W\tDVXP!"=7)cG5^g2%8Cpu>a:)-PrcUhr8"-%"5=SVl6`#?YsjDCf_/]%h:(@flss3]#<GG_!>L[!iMl))%c#
%;\`7a^'A%B7dSF4S*DQMh?=jV"8-dt[ijOcHTj#pI0;,qdH`$%Q4BKPcDE;<qH+_%j.88e[jeu#mZ7'[A`[2;rK.k,ICtTO!Oj>]
%02N_(j(n[RliSKq'[q+m_2DgAAIW2b;>Ul/ekeh!C]?()hW!bi!qFj^L[Uo3a=N?0d1s/T5-n:&paj]V6Sp^8lf6u@`)C"1d11X&
%X^c=rc%'4GHdbJL+Qq/^Dj"$\l0.a:-C,9\O,`Tj^POen6\W&!Bos`hp]_FkAqi8#I?25?BKMk[YHlP`&V2&oeVXV?rZq(f;s5''
%/sBmJWa*QYd]p6#dcO9''6$Q$b0`1e`V_:nBN#aXStUcgI6?3kEsjr,7'Z^+X?\N2jO4#n+0_9Ykg=Wg5Jr(s5bFh<"0AU%GLEsO
%-[e.^Lf>aY[]me7A8BFtGC`su%r9s[LFWOilX&m?RBE)E>9RA%)tFYainK@UcA.1>lcY&!l$g/6"oIkA@f#-1a->lZjg.Bgn*YS>
%^3m.BI<"GVk+&%sT<n(OfpseKQZ()k?0p78O'=+-jW!6j/p?:#([T=(k!U*OeX\AGQZ(+@_X#I;0A)U%ag?N,o?l"/HN;g@mMXoQ
%O'UM]e'Aetioc8B1/eJ5B9TqgInq=h9^j2D:UL8h'Qc=X&tM:%N9%HJBEb!+ngC4MK4LS)NC1>#:GKT0]?<E&rQo+W;1oX1VV^Sc
%(MNn&DY"q)EmCql]Zp_.Ufj!MkS!ZgI+9<<nP4?aqjWCL=A$VK+_e]"h<qpDQX@dgf-s?3<k@O?]2#%f=&?;PrV)gE_O^EPUkRiP
%Ma#6'RjYR$ljN3Z7neN\QhYUG$pbkaDVg8#^1<2_]m?0>kh5?`GMobg\%=W_9743Gd-[t@Ad^]CAV5./1&AoiHjR&NnH.EWUU'"I
%-l-gKe"D^I]SNZ:k>h?gK6oum>qEqO*:nsX<T]n%`$AkE^XqK?+mf@L9XIq6nDaL6Ig$\/,7n]%d>/V'ePDr+0e2,Qb<EJsN*-/^
%rRA)+Il,:cbuY]+S1c)`'R%>oW&QtpYJL2s'-<1Wha_QHki@/FW#;0fI8'FdBq=ngMW@bPEq2E>Z%UQ6QhBG'M35i_l*?o[>%`fL
%_R:Rk<Xdu$\V7TX"BCC9YJT)3p*%hQl#O*.kd4a<e[V.c(9Ja]djXs]c(!IppDh_DYPV'o2&CU.5diZ3[-+Uh_1$`@3+,3H*hVI9
%Q$AF_7/5er2p'1Jl8sFK&&.LWl!SCN*kWTebp,nY0H&6Sk'\U:PRBM,0jODhO-T33H5<7CLjZ$!FLI+M7eh*TDj0@rp[mp:0R$fo
%9o$2&!)3fknK-7(^kH/."\_,OFrL"*MR+&jpGJ\V4qQ'a/l9BEH6*)DL*J2>]^&a<h_dT`T!jP\e#0bVB:#(a>WjZB=%22%-mbBH
%%h1\SZMhUj]5PV8+X:$G;^X"\S]HH+6*>13fUH8]5G_.](%-u!<%TbMP@<.6Y<?7d`XccIm*/k'ljY7W`;RgWYW).6@V.Y6b7T<=
%g$?i?,`p&_+8cqa:VHl]m*Ydj_V#mo(gNFm>gMaG14>YL8jE/!^cQ4gn]25%6j"G6]lPjd5o%%';m*B@(N%!h8FM>E`Wdm?@q<@`
%H0m@Ed3BhRq`O_13WKh5<s'5/8C"<(rWuc(6/r_nHYshOKLmW>"]1m3Rm._N2@1-4k2P!6fX&R]3mJE!N3;&7-%c^27Q[=Mqkb0B
%<mN[=5EIl7p%+s)!hKr-=VoHSEOb8-9@#_4IhUcdGo*&trmn$^HKLo1HM*=.pWSQ\j3aW7T'PFqER*n(GK%TYO*>b$4JUPAF'2N!
%Ei860B3k_gfalCk<upYa:F(O)hH8j+.6Vt=n]']eH+r1-H"5]=oT&fHcZUJdTrnods)>Z0C0`#WhgRC0bcTKlQc)40<KD7o1<f8^
%k&iZ(kS9m3jOc7)h7:\'N#$_>WH6Pi$-N8pAk)`=."fPbI!=2Iii=7d%Jonr'52BH=@7dYSskVHSea'u&a/2>mll*B)a#Y#TrLb$
%09:d>\b58:oPF\)`ZA-&f\o[cP[US<XtQK/D:caSLd,"+B`rJHT15F$h;K5?3V4C/SL53nml8m,F"6%O6Zg;hbtD`r/[1HUFFj%"
%]040n==:L!@i2`e"(b[&^r_.&ZGl?HY%MMd:9qk/="^bnS:M%(g0FBo8bV,T+&9*qQbGH$6GKqB36B$rH?YO+\M-daIY"Z>h8lae
%?+B&'";79!8!ps\1!Q,I2o.=QN2+)"39>.H[Ji8Lq2\6WSaseUR.jH9pt\!mq/ffTSarNC4aV:n)uCA\>.loWZ%jmAFNP!B(^Vu1
%oY0lTcGYWiT;0\:0SYkf/q2T('4p]"#;/B'4tsH:EQ7q%*I:h1Qs3@N-J<+)prNQfW,To_nth6W+`>0%Hho90YH8od;"V04g3B9*
%4o!%dM/qC:Ul.F<Hh8)$:8Z\(J8Pp(4oX*:?59+(';`uT_44b[.U9'HCoq@)1V(BARXU1_J^<4j2:jd1[#;WQB'(\3gW]*'CDY88
%cJgZ\AXH\kU@L@!"ZX:L-h%!eZSP>m:FHk(lZTc0G'ljOejQM&a8FG-ZL6n!G8''(f,?<,ZK+EIh!QdQrLNoF:#naX;I>$HrO10%
%;(@"1gL@1:9;UJ4i9f=p_FN#bD9TShE&Pf):<`L!RTa%onoONR-76I7c@`m<hsGiR"5Ht>ZX<[jJlh6)F&1a\q4m$6lrO[;CcoE$
%06QUEI[f,pd@EC&PF%m>8j-_c"m2pm55NNYq]ZOPr1luJZ;_kTK%$E&D"l*d/#g4L*bZNFeX=7-:6f-nK;-2aP=KsEhK+dY0o,?r
%VX)(]5\rZ:.#pEPime\F9Al@Ihndj#>UOINqX>/(Z*2d>.E;)Hg!B!WGUoS,P7EF&+18.s:L_=+B9SBqgPSMo%)*+QbFA0L=Wr<A
%24JL"&:2_2dVRQ*EiTpq]0]>b86m>[pX!M;SLD@cQ[,oC%_7P?4]grh^?CVf+0UQ\.AD%,5+YiJ=&n^I@ipaRF*)ss3qi*Vq?Wit
%^E!+Pm%4/tm.1s_rH7JmNUDhnfZ2a9n,V:>A"Q82YeBl].F8UG5+Ygt=4m0-fZ2`Pj!0H[F6qq4osn,Y^,bo?)Pb?R%j13+T48th
%X,l1TqW6AM)e"Zmm]0iiO*S.jNd\Q$3RgkI*W((k8052(P@G]\X"QkllGg)iQds`lR(7o4p-ghSpZU7"B*EkD[n[<3(?9RA"NS4n
%S^r^/+4%"62W=>XZ&e(u2o`TtYSY>D?3VC1Q!PL.LlT<k(13,fmN)1LHM,oD3hfg(NdX$n53b+'590QFUZ>T@qW?F#2V@QbMn&NR
%m?*5(566N:DB8V!9cBcOpr@FAo@>?uO#Rp5,jX82Ebr47G,*'I$JS&;L0`gWbp*X?g10G1Ctb(?&9`u(O35l=>Pt5Q'bPbM?W?4!
%G%uamF5(P5jkIW*"t'[Q_"DkWf8-qZ_E3>t(\gGl2eDICAIeK*m]'*cJ.C$D:bD_-)=d!Fk"RODb*/IS/^p/uf:kfZH.$NU\c@)c
%.10o-kOQ@f$,+s"puc"29W*#]l7qf!^Z[4=:RD*lo-W]#^W<QUI[C)R4:g98jaUc>(^'d9J+7bEcK0O<1*tZ=Q<9LRiRKaRr]f-7
%'RojbjOeX8rLTuNH0nM"U=Pg:O#cVuE,K^B5_Wn4NW!1Ds#Y`8m9?"Efr*0jG[m8mh8lLt427XIb,occB<U*=hQ[W(oo.BZn8Mmi
%%/(Z=o/gmt4"-7*:,J:a$Y^81Zr[nL"WMih2j2!jqrE[ghfS+](30C<c;?*R>GSUOd>hC]gnGc4%mJI&UgSZl1#lTVkou,4W+SV-
%P`*3Z#)LQ\)>ToOMKahd5ORJMF7,.VX1.OXI1?@]T&=V'_Ag@n3-q34MMUHb!pU^nYYc3Qpmqu.LtJ3XAs8uj&4G.*4M13?IY$;[
%048%hqVW2XLNVauIYd>Z!HL7-G0#J\\Kc?C'#EKGG-`>mm`0Wp`/NtJ0c#/c'$R<+$\i(BA,Q[C@,8((Uu;tWikmSCcGqn'p!F]h
%1f4=e-t9ebU`9YbkMoQljs,$;+%6a]F&\'Hn"3O;s*X1V]mmK0_uK#:3:kPthS2%MH4TcL;0u+4lG'L!&TdEu=:Z2R`n5;.WTs9D
%^Au,,`k?k3eeLaT&^`sdUE):@memMVc4eU[pH&*5<+MEjnD0#n6R*'$eh:t!LMu>/K.\gQMgW9e!':Jb*=r&*1_4WKo\i1Sas^ea
%L"X;hN-a2b@F<2eg?I>ghRZ-0n0DOln,()W"_KqNcI*c_]X*6Qk2T/e7k-]>kOhMqnl7Ij4&TKZ'suKj]!PQD/!q'rr32_-2243:
%/^!\oi&\QB<f7Og0&#1R-E8_!O<`:sds'o]MM^M?HP>;!C(,B9q^[Yrd#Z7T/#L>M3C3"SPjA8rT@9:n0"h2Zh;8!3HsAfd]&2ml
%r2<fuX?+S-+.$Eq$O$@fGFQcdI18HE]0a$b/T\;:(D]]8f],)m>(*mhe#&&]80$il28"BWF@,2<\$L+;rtKODftH_L7!\5`^Qppq
%=K0'22"98nM</Apo2$i,1TTP]CEZ#dYc#s?5<LQL7r)aJW?0Buf#6,+$-@"/YGPOJh;;,%H"2MGPeTk!Zh(INqN`TFKR#d86u?C2
%5F[#lCiR.;@h8S,O5kqKlsK&O`8)_>WjNBt=4?QNB&<KhVOIt_OZQG=4nDi5qK.o`h(;Q#QZKKKpJi:W\[fLkpklEpU3.:gGOkb(
%M,1,)`0>;,J+<-SHO_HHHW'I\)uBQKdtp/Y;N2]XX!_3<)-*\bQ35$Ls2r++Xf]cuGA&A_gBIMEm1S-@?cc41lqV&SauLV3QGUiC
%i^STCYgXBRm4EP@":`+Gk]7<fhSWJiErl.g19ap"".GlieN'fn.3J5)k#d:Ph,].+Wu*UGj*tV.#kB\\DY_m5a#uC@7Kf0:l<i)!
%It$3DZXJ+:BEu#VY$,eDO*]_>UoVd.%_.KeGE7Z$E%A5@>f^@#.&_0l,->Hc-]#Y[!$e'9_]+YeC,*cEin"JO"+:10*!6SK';&Ot
%B&;#>c@FTuiE`ZRM6<t9eTn@^g?P)qG.+n'oA'[q`t88/?WlbG[o%!n\*8u!2S;2YT<RP^/cE'<D?@E4dp`Ko$fKLBqI0DQg-Ub*
%=*/WI6J@5,?.UhIL\+<M],E;po+AIW;3%BtQJ+(jB"u%_\h<Vr-XA:AkE(+/"OQlr5lZ^1(_d>t)aW8(8RD6^q.:g<Hl>_J+R[t0
%%^bOK0MG\q,R]Z?@[K@"*F\@:R*p/VpO-"Z.PjZ+/k-/di9t:p'^di9WpZjP^QUncVaM&l$@;AdZ;832?IP]]-L0;<1&M),/#tDa
%R[p,,K!0_8Xk9$,,R\['Dh@DcRB55NVqf/%M.1U2L]oVIVhJ5<@l<jCH1:8Z`f&Mo`uF?=6#s['_Bgq:5GE@J`capa/&CsMoW%2]
%>nR7@fF`Dm81o`rr=SRs0QnMB/fNdm[>O=6(tB_UR5_iQ%=_Z>HdNs[oo/=%(tB]_b"b"5,r)Da@[IHTfHkOnWXdc9qQ`Hb,c&KB
%iBOiR0HAF_c=>6S.i\p)R*hPL$>j4Xq]B0G80*H`Y:_?tfh(r8ZGK_N?2'[#NmZ84rgV(<^!#,ZG$,tqJVr/]>(Bq=WY6PU<P/\M
%@n*lkp;00p>-YOWnkQ'(Fl?cu&P4OIHbJo&Y]7!t3!6S?Vl3XY/j'Q'C=SXY%ted^*/ieEfn14JI8IK?$P.O:]R/BVBd;j+_F('p
%34BogFlQ:6s%K41!u:^M_r08Za*PJWe%Y=U8$4Z5KnmJSJ6"CQ\F;3)9d&G(f^K7Z,Pui]G2]--=th!ZHpDmqiM#R*aBSHAos?[p
%*X7ZPGCS)dKnk+)WN=haUY#hr?$I4!r'`em*HpCMN-bnYp;m!Am;S$E\(9)`LV^N?:3:W&i?9ij=-<e-]jb5k(dW9;j2/]AmhhP,
%n,:,@i)9uYY^s?-IGl?uS"A@EK?&^#on6Uq(jt'][9JQ7`;;<i?9]4f*nMK`;ePdiS')!8[_ql<^urSP@+Be\7Wj(:+X`V1:^G"S
%n1Zhg5Za+.(ENe<Fr4a=N9>4Y%_D&SP%f?Sn1aXG6YCnto7_s>h;e@os%V?n(g3_i?$P"sWZLiM_asM9p3tt/n83s.\%!Rt*lbjj
%YhKNr]t)MK$@Nn(ia6rO,N%Ja!K)!X@IU]E("83O%ted^%,9c2GL[5:m;S#okddT!&*&A5lMA@bauPV?M2cZBMp#@MfW?fEbR4p`
%EY6?1HToj=>^5JMKA-WRS-(H.?[*D:8pp(D*X:)$?=D=#KnhcL2Kpss>LpBsn1]*2D]_sHrPHJ1h*!PW]=m]qf4e(m>fO;C0^@N$
%`sWEQ*Du2!_F$e&o\=WR(=V;tLNmdK[iH(d@!]HS0\AtK[Gpn)iF/t0L[;C>/j/c,N92q.f5.An%tcGI@j*"T,%#R3I,!VI'l0cB
%$P/dhnXXc=$[_fm/m6J'ETar7=D+:e0;CpI?/>KfU-kYfrjGYd]`/gqLEsp$P!YGa/M?.m]$_](YcZ($A^+,rg.S=2p5P.s/o,^-
%O$"B4K3#<-[6Ba]RFt61mZ/]Km*2GG-%TB.aiVHNh2F$l94m)L)iEGKfRl\@=0%DEl/hhZqJ0t\o6XEgGsC#Mq!Ms5abO=s#/@jQ
%:DulsXm*a`mkaY6oCcKl1Wl2,=LcK>B:;Eb?s@p04Sucr/"Ibsf,kgj,PCqK[etLCH=K^lru&R2K08eh@WhLD?=','I6[&T;pG!(
%G*KX'>+:qEB=G:JhtOapF.JAKH_p^<?:<h3>YS9Q0@$baRFK]3;L8AW8hJ4BlU#$$Io@cnIbPOE[HY#0o>R5:[Z"u]Dd!fMg1s?0
%]g'>^M&3.VD#-1;+.2)K"5]YdZh7.M2t34KHip[phf\2Oi7Zn14)I6FH/<M\#%"dlGnHt:2qAN5Gl<>B">mVOh/(5tahY?6bSFj6
%-PKR*(TWb-AepEO[%t?Y-E<nQ$+dV63UWohc9alYJd:9FCWJju\P]lHQkCah-1L8sma^G=e2.5d43>$TXM[D0X!_lf-kLC2c</Vo
%Eh3,6TmVL\(X5*\TA=0N\^L8![_9>_So'aY$Kf:iak$-rquh>K[^obX\p4:pD!YiW=-1h[\!+"<`TXCjqUD3WjmCOndQt0qg9pHN
%5A4p#?XH$q[]XLki,>:)-e/WI-!mhLri>=$'5ak)CjQp=DKp'ZSTIoWbW*@oZ\WZ,h4iN:TDCZj7g?83[fQJ5=[7IgAaR2<rlerD
%cO/@BQ?6ejI!:6CIUT6TR,-HO'c1IGSj>)+<VP[tG@nIC?_kaZ#H9Z[,#,drd`_DSQ@.*$]p$Ek`4PE]Ds5kn1f$<IS:,Mm+"`R-
%hN\_&O[3&5ME@$f!aHlq`LV*:[WI'F&]ggFVms'V-A+NYain,L;m:aI(T\m#PPV"*aadWL+PRUfdOQM8P(fK+?fKho0'p,I44C[f
%9=pQik\.Rj!W+t_]q3VD2(?eH't?34+SnQr>?bHd`@O=Hq:T@;o00p/o(Mr'^V?7#G@?=;$9@\L"1cBnVS]2e[o6ChT-Z-TH[c.'
%4?Zf_=`18,PKEChj.5_SESd+bCu(@O"P>?SKsC:&H!8NoMHNfthEK$ka=\1$l1m3m_McrYf4i`o;Z8KX=2jL,1BFXEk-'j8]"2\)
%eqhjlZoHRoD_h;dYqjs8qU30OGBSG]DZr,OGDK/)5JIm$DZo4\&_r6GUH=lkOoLs,HMdUuL$[tEeS3:!IJ]rs2e`OqomCLi_45j=
%J/5:78S7-sf!`k-9lba9A>)`dXf@F"[o@X!mMPZ`,PZ8*4UZ`QnS^t[+Hde[/+Bg\WR5G=jm"aj:Dn5-_Ud\2@B[!(03'F8/ntro
%)0p7Jq5*RCGCN,bk[U2'A#r,T<Wb72_O&u^eJ:[G'!"KC9qPRYY"Qpgp#bu`&=rFgPc6.UNY$'/JJX)gq+gG_dWXR)b$)WO4=fM7
%pEk&a^F-c+ki`BIT^@0\ndEt"Rc;<V]f@q*S0V1n&DnAXc*4r(>4=+qJ:l5Sn3h1=d>;,3Oc-S:FIk!2F1<+a[RX\1:Eq63GQo5Q
%Ba\"NE%[dHbEa@Nqf;5`7@KPTrr'5'5XPOcJFYVAOg?K0`&]c)[)MiU/e+k;oX)ZilfVl&]N4Mo=TB?<C+&cH\PWETe]+IL't5"B
%huFcA"V,X9+^3\,"KMPmq#/hXX@Si^RAqHNMHYY.k2^hH^UIGa5XrcqXMUJi\b*VpA:>uDB<_82Pad#[Zke0<OjNfTfut).6ZWsU
%[[*FF\hfPL\'-o2Z'ejY$:i[>F3@(3ab?dnh./Q.F-]LjN_dR%kK3@N]F'.QOpd%(43>$FF!8)UI'E`bgjEF:m9nZ-)TsKY.C_Rr
%5n:=E$K"sr6t1(_X8'!n\R,0Y^8t\dSDA'f/H)!]n(qi,5RPesY:m'o10B8*G).cH:Ll\el3lJ98`WcjQ,7VV'R95_?JfJR(7l=c
%-8pnAQObu,nd:>AOT0a_3^Y^+Q$f+D$`0h+^=cc%Rm9#hP^bc$l`TI#r9rmi`1idF^Ofo[lee:dg[&WnXU29q=6PVf";8("cWHkX
%m!'5"2)kcgfRAJ6QdEn,2NLYb*t*?oI>M2#KBZV4QkPh(><42ohk'#_QQA>^o9lqOB(#Ccm?Qu3i*Ma/R`W3h8p,)D>J5EUhkIQ^
%[clN':Ee,"8,4PqVd)quhDAb1Rohd4>@6/8=#N9UB2?![:+G9"pI9<N^\_#^46])G.W3t(;TW"UMK[R*drQk2lth'g+)YD?6U8]X
%o<lP9CZDbTR8-4g]%(NB>9DR@527^[5'lP,Cc\"D9<6Mo&KkVBheBYk;.]%jbf"OBiOa(0Aa0<OD!uumBrIpq@="MMQs0fYGCFTV
%R5WJhagk"YLt^SI"8lDSl.9=N-9[5R1`X:k%uTV#g.-qV(qO=7.fHB[I^Qqr>Bk$m,e%*ej,_:1^3a;;(HLYAA.cMeUGj%,%3C-(
%6Ygcp[UoHO`HYq4)/7u/6QOn0E$3f9-M(*4?.:li<:q</Hit%"=kI5em.$EbB-HL5!^l3,h(NQK)N7's=5=mt_2u!3gWY6'k"IG1
%L.D\j31==Kr9>;:KHf$5(.V'(#237?OZ/Np#diB!7ZbFRme1=(TcpLU]U^)YnnT[sDe#KT30V*-Zl_5M[$RQ\h\V9KXle[0Z!)R(
%RRCArok^rt\bU7kSO8[[S5<;C:#T"5I<AsSUGT0MRC2j-MIU_EP@[U]Y7)UhS/pYufW]-)XfYRamUP;:lFON*2Og>3rCIh59`Ns0
%44l"uB/3\8V=>)GqntHfeK8j/D32Pn=5<JU3bm'+:fRbc`V0HS#;?:kVh\qH7dJ,*`"oIS[,)>t?VC2gB)*>Npd]=PC%(XE7]AYP
%,1Hs\;IpqFl:Ih2TN!qqm=2dW5usQ(X.o?6e..8VD%G?2rtVK(Q;q_6l%;kGXALtL6ba@MWbA?d`g4(sDV-+$G!^$%+Q_/6khBAR
%7;&FQVoui9eS>!R6i9pg`A67jVVB62h<U.Y64k3iZQ($@nQfLL4?577@\TuW+3U-]iKuSkIkECPgWNtnfffBDdJ:V)[_9,aZ(kW;
%_")Ph%fR.LMpq@s@Xb&I$3/7r_\WJq+c%Usj6UJ/faE]%9)Q[[)Y%N(akt2$2Ethh&,D/JdrJOE#YXQ8f,Jb0)e5D(U9c4%)Jf_L
%`oMVCh!il6+Q_([Zr*[Q'>K5b)UarF-h@lEmHp07+CaF#=Ml.ZZa+f'nWqu*89[f<onPHs/_\oMpGTu8?k+s$ETUDj%?;[^H:(l;
%H.M(&o9F#e7lo?LMi4qp-Q*UVS9Y=`Hai((2=Kd2e9q`#1C94p8'09:m!:Ee<=6j%kL(FLF!eHen`LK^IRhcOZ36(W)sQDDgrjU<
%RUij7;E:0%1N3.](4'g#I3Im$.M"R"emCnAY;UuWH[=74d,T;XgRWFN2!e/:6c[S3]A)D>:?r!r)cD-/b\_1S]6kMeh<s/I#P)R0
%#)h>r[X\mGl-iDf^LV6"pNN!#"1)cdV].h%en>gOes%,\?R_B&*?FNYGT.OA$Zs(KR@2<"P4s#0(*,AQlp'jsLoKKnG&8<=\LFu!
%J@dd>DWa4Ua)W#<ldD-W.JrJ)qK7490n%n!gc!MSqQi4ifVfSc6kJkO2ipn:cq:I+YBmEBES;D?_)KJ^p7gkaD558Y2`iYtH4Mb_
%G(Ue>WolYXDD4+shiC&5DD9eHoja)9)a"<X%I1tVGK13eJ83pH7lPa:gL)kT4n-g<)@SQY^4U6C@^QNjbYK;LTD#?.ZX76Sd91nW
%+uDC.MuDbMk=apk4eIG(2WLdZS0:$>cer_)WCYbE`P??J.=%&7I=sgZk_.E'`]d7"oIS[eD;fp'$'Toq^Q#TK1fUE@Q+Ek&B^oA'
%+1dB61i(sjDAQDfb,7-FZ!.,bc"+&H,r1"A<k-fuh=H]#opIIh\QLaqfuiS+4:ZX7cW1es=4-0TH$8lJ4M,HB/'#%35&^g\2BD1s
%X0Lb'!unDe_5ijFUqMF6I@W[#4mCboA565[QE$9Aj@C(Jp9q=!Z6H.7]ghVZfCMFD#)h'+5#>8Qc6ML!)Dhr0If*o,)+Yd1=OEJl
%NXqh]`]1'FXnN1$3DZP="E.G`qO<t`pDDU+Z`fR*%q9N`fg[ji5Yu:T:3[sE6$bc7ST*b8!c/=I&_R\e7`4JGFd_HKWTE3!dgo(%
%m0$O^:HCJ?[hC;XHhq/fn[%BM_u,b.+4@Y@lr%]X"uIk3SNo0SXL+O$cq1hIOAoEXdo!ob[Wp6/n\$rlO#pe50f/gldZO[1+#7P;
%0L0jC)5e\q73=buA:RX>5NUR)nus@S"D%SR-9)MdC.7@1#fo7N:Z6.iQOU3;.h0`GBR8CXPeAp75fmE]fkj)/(ULj&U,&s>2)^Mn
%FWkK@>X>bOo.fQ+nhKn4\ENNh>S(XkYlk4YL<7>LchAW"`.cuGMTWa![&>2NrGNI]Poqk*.tKJFf[c]?A3+NpMT\M-*qF_Z1rp)s
%oF)8fTU=pPH!e[:3QW75'tP.eTq)cL8&Y&\Y%VO$j4cYb:'TFjr-_NCp3,0`k4bC:[.$S-PBnkSKBWlc_bib/$PYs0C\r-1eVaD?
%\">E48he\fU36?=#t5/)$*)GmMd2oCD@#l(i:SEb>1A;nU^Puc+H3ZJm6L#PmdI6J8`>SLF#>K-4Ecs4k&Qm2j7R,d-NO@.H$rJb
%696?e&e0sVJ8cg9od6UnhBqo;:U#(:Y@Ln@ZTB?(VWFNX+Pn<%2J&mJMpt8KI0l0WUm#^hIP(5?K8q8=*r!kbgDNXi:YXa!2o5\I
%OPUTAeV07N5AH`hn#HgFc[QWQXj8Vq4TA8\9V5T];]Phb1"$H55;&`\NrS=qY<KIX+tKGKmlAYa)C:I9FIuF/YGa<s\onla7J%<8
%F8\86E>OW".r)JhCNn1)^7r+ph78G5obE1&G<C(H(^blS+"bU=E]\&2Sumd-=l^IaF<l_s@&JU*.^k".AmG^sA]bFoL?'<A+JCfC
%B+E0*\<fR4JfhJpN$Xm(eru/N;1T[^"a&u^1orf_Q?T[#Rs)e<CLpp/KfiT$aec+&?FU\;a>e(.p(-rXdWQI5e`X0hI72Kr8a+]i
%PZ-gp>6"Y?3b&IIm#<H2hHd;;87+Lk"SHne/]G<8CY0SI*k-+6Z4T38fH[\m6R$dc77.0,mTQUJb4EYo#mF4"[%s"W\a0*Pj*1F9
%X(/nd_pB$NC)Dfo=f5G@*]GV<Q!+7]i6p8]m)H1V?IhaA6F0q2.0%cAfAAVrj]XaNR)j08kB;%Y2.(g5Qc]X#)E%1V-Wgq\](X5I
%1?+,QaFPWjo"WH:c^fp!Q"'a%E4\^a8=5Tb<fj4,4Dg0`rEQeDQkhk8+7S&O-CO-MSjOm%Hnm8n8esG-$0OVplF><WmZu<TKt;^b
%$RKg?=pK\2d^/MUZ-YJa>MhADX2`HUFf&!M;m*Qt%sLA>Y&J_b=P6f%6V*%"p?KXLnO1Uq\7eT(moBTMpBn>dT:F+E=j-UJ4PPLd
%/rm%)(Z<7NiTrW*4jep=bO@:;.;'M1kB#XG%Dot<?D^N`%Y2lV-MRKLl,p&F>BT]\7h]Q6Si"49ctbRU3CfEoca3=`J'.@rMW,;]
%`%4?,0$_>E^6?#*4AbB,IU=_9*=(n9_4=iJ:9eXsPJoWL5Qa8+cF]>UnZFj>>B+!1dd@LheD&6Z01[JQeRK3+G]M?<m?Mtk1"gt_
%&eZjRU>^1slI7q`NXmRS@Qq7"FMNejd;kda]1df@:Y)Y<TfEeOE@>WOG[*LtHQEI=ng4DaZthoQotUP@rYUU_a`/(O[0rX\mn*$3
%--CGg)PHH=]pq5Js+GIl,3>g<QBhbile;NNDdJrCOK%t,S^/(<V\e6+1REgW/`i$48L7re=kUML-)7Y(+kUaQ+F%cGe?YD+A!S0O
%o\?$XC)YiG[9B1O?fZE(.nP(sh;3riIum2YWVS_cKC$%Fi2.;^OM)\[ch[fL#CaA13\c-#+#efHHE]I9I_-E``U!1g=uCLM0OCqO
%g%hbGTKMT2rB*GMVGVk#nE3Nsrq>qiE.3-H8I2t$1M[5rG)\[Y19ToCoTYT4d1Rh?*.C[D.`RfES.R89c2Gq9BSGKkW\Iono$]?&
%!-r,.JB??d?Mg8>EaTWral$(SCqR-I"E@XNLMM!/FFG`3DE>#]Sq.Zcs!UXT19sAaql2>7\%8ABV8j)S08EIQ;A\HZkE[aeD5UdC
%JOdsc$/m3Z34=kg?g_;6T*Jk-'RS)lIk5^"=g]4G:tjn$%9tc&D'@V94Ftq'#7/ng$h*UBdlNmd`6++Ai,ksSN*/)n7ojT?e8A@o
%"=lH;C,`Aa3!rEIg5U:i`_g[V!gJfjbu>TF?5YU)UTZ[+6lZ!Pb5#'e^j`f+DhW_J%$8#X=2e["<-K\'[EbJ0_93O(rB[-d?;J:,
%>Nq]ca4O!cDSNEXoTHVIhNA@,dqZSS%?t[s\9@>s4O1&kS11==_enA*n2qr?I;S8rju"Z,5J7G$Q'ntN'u/r!B:n35(n3o6,9j:T
%Qnt<s(fHIW)-]SXoX'7E4d'F"lK+/#R<$k!S#A5;k88^g\#q+Mh!-Cl0RBKJOVG%s+l>?$Sa\mf6Ke=bGJ]?o$+<N3LsQ\'qW[@J
%h%.K4@o"I'[Xnt>8;@[5;i5q(?L0r@l7(oK=a)di)2m#fXNWd`JIGAQq;jnm1+3[j$s^t;Ce^7ACd"lFP=#m</aT`NngKN:Vg<%_
%#tpA2n+7%4"'a\.1^%Atq,DV0!&>tO91+4frL"*Z"q[:0\f!(X2G)/*Q@ro+H#@1Y@+1;?G!lY__hDaT_If*e-^dKS&XarMa_'I%
%!H1-b4C!.-O%@X>%MX5IJ7ggfRZ2hlk?Np`*\KPWH8B4DoS?7N-\)-\jDeD!:A)+.'FGYG\A#G5FLm9!$T^RA+t[]qg.7_)6X%tg
%1ZosALCtD;5n0Lj@;M1P;+U#Q+YM2ji?!`\3Bs<.Y!fWc3]WCR348@>>#4!;k+bO7Efn)0o>'k^Z4bY2h+_P+PLp:t"b2Z+%u+`,
%&=`,sO[eCYfX4&bFD$.7c^`iJn"@/A*Sa&8NV2hsJotH6ls!+m:;BqHT=8jA:b61--q`-\5aJ]?'I>dZ*lLtMLSBH48g$d[+,U]a
%97g9gr_SiX2*id)IjiIE?W4e*@XffK1"U'.cVjIlU3,X;+-s2s'IAnD5qHSs-q`-\5aJ]?'I@Kg&51[i71$HDmbJ;[/(KS1^GZM-
%Vjqff_3;IdOZ/nuL]`k#WF\Z'b4s(82QX8*3Kp_V5k]:u(#&_e6Hs*_5$:R94-P.p/K'N-g4GBgTHSP-KC1"82c")5[6!gD(VD_?
%-gPhFjGr0R#_jr.e':#l7^p)-%?F/rhuaee2A;IIC=neX>t74if'[,m`%V:\nK-G8\pteqQ54+[CCUZ\1@MU>.#$fYFc$5W"H)H=
%FD>YNhh5Xai'MPH16H,j`_%g.`ZV=B1O$g+'>UUOXe3t+"Ds[T>I>)XhZT"<^n^LA]@0#:eE>*IH_km^r3tH$q^!SjIg#6Or2H.l
%;)/cIWe*H7q"3Kem+3d\SIjrs#LHBHSD@keo9He.V-YZ1s%P&=B/bSNQb3(3@_tb9$rS`)AjMu@B94+GRR<t&B3<XGZ!Th,"9,h+
%HgDR$Na;p$HN_U!emJ&b:r5G(eJ^u?0"0NZb%mn\DV52Em$bneb_A[_p/.fTRcU!/8kro@CMif'r6bMQ;79iXDH;[6T8C<I.d_99
%(&[pbXESEU\O?.s<e8ifF&6W=h>@.X`G,Wj0[U*_!9nb8CW.qSh3.@O^P[ob($-7iWCa_MY*O]U51g45?Yr#7HrO9ReM<XT;*'R4
%Aq?BYci;(sB@KoMgX`^WS,ei3XOjLRI^s($fIiLKs5!Wge=5iGdlVQn`9^agk'Ak$@SE8#Vu9J2/gg/.^FH(uh7ofdbpcR@\).,a
%0k4Taq`\GA`%h05fW-%jkGANW^m.[ss5*Y]s4RRir;k7D:5D6r0QI+@,YDS)jk8:iZtLj*2.7>27aVr*nMU#52c]FjJb(.()"<@d
%T@fcU*g,@Yp7'9X4]&Abk9%Z4q8+-u]8b]C1Bb<-s(P1l`dWL,X<A0DrEi7ZSW;"ZMI6da?Se.R8u`ANd:>\$^DNt"/+AfHS!'^i
%I^)B)XS7*#Qk@WZYuMEl@qeM':"/coBm3HYP/WBYC#Gt"A5jR[SsBLBA&ttK86,j<iUdHO:sro2OX%G/"k?R_e8t&5Wgke0.hY8D
%i/oYUTWd`TJBq(=?sZgG5[LXCi6]BX&\(HcZ`XHr%G09(LcI8%$p?"urR.3mk$MN[K@tFS=DLpQI"%GWlb\8C0UHJ(gZWSNHg@e9
%Kth6lLH.]XTW`grRpTJfZ[nGV=H<+rq1N$V49&5-eha<WaoF,-7[G);lXE><"W<2\0glJ&:Gjq_#4QD!8k(N]*B]MGN%"!i_@V\8
%W0h&Q:K0VH#ptllVCIE<S5hEkLa#A?!Sj/"pfc-%TMQ;dTk@m9F]\j0':Jqc2<9]A@6i:A*#til5=5lqD1q4/>WYbK\2KV2VA_K.
%O1M7jBe0Wq7[8(G3Uh_LBi(as%^$fT,8_=/XrXl:>g%^).M$91!3p<1)AN"EOHDq6!JRHi;&'cXfFESJ^io!&5[[7&%;\l[+ZiNh
%E0blE>hciA.4Q3<<tYe)86(191]]b&4?<ZLT`)sZ6l\<n*suUL&9K=cEUMbIU^29uehIH<_l;2eOXq#'P)U':rK']+pQcGo>6m*;
%S/%`B9M:6LIP[gR.>,<fWbMiA)OiuZ&P^f[5j1aV;`6G/WB%Npd%ChEN[Y)"X")7haoE"uJjR727T5D#6`V(?XQ_bU&D>3F,9+^U
%&[FccmEqr-FB6b7Y@bR^%Oq[7"Eqct!3DgpNEZMm$.b_'L(On9>oVh[fd+_u(&/cm'a\P'i,bQ^(n(X9!@j,/H][VpX6DYT&D?>f
%,?kpQaQ=^O'H,K>A4R5jiB.g/nk^1C6XpB4PMnUii^pk:WmLf4X:5u%7uTr+"S3H@TP2]2LF=p:LVY2tF<9<_MDX368dsT#MEJV*
%Xl'16XUd:d7s%6LW(Bum<#N7LaA\Pq&60e-+Y#Uc6dusa6W=r7_o4L49!`X[+Kg]t`q>/T#gkS%[KBp&@QP\^.COl7W";E6P3m3Q
%`,(3u4(^Q&%>.J<IXpf>LE";ZZGRL"4L2k8\.2AD\.1'I4^84-gE*Lb'H+&@'H"!*<A?%$rufnoi&o6!*cW4Z^aA_gSY8)$L?['1
%7#/V=3AcKQcl&.%<A2"PrX%WDOBE)a/4VNj9.Io#.#(B.+GrOQ>g<F+*2Z=?*;4q$Qf#TN3:mF#e6t;;@L6qi>E;&OGK?k<OuVGZ
%U>T']-*`"$.(R!F,ZsmHAi3PIg?8RuBaV6o"Q0CHO_3Q+)F2b:C'E`U,_HiI9U,g=iZYW:dO60A)'L^-E#B(L+gF]FO2sRY##Gjn
%4GLf&(c7/%d7gL[9[*cujrq&8dV'\A(kLBD_-fed=b5cEM.&%OL:g>"mR!YI$d&>dnJ5Hu!NQku^fcI\B's0%4(9dhTM)KP:`#EK
%6OBV@AAL$b\:fP\EkQi(LTUV$*#V=%=TQW'BHt>m"f":I*7M;6,a=).kXS!c`)D=TRF$pNe^c/hOobn^Uf(T\_U4!-MSdc-8VR:_
%mZ9V`#msD6eHq#'?rR@Da?Q@<&"08T#4dS?n,]hndHlO"+==p9-R9;h!kQQM82<n8fM;d%!e9;#'0'3OT<Ls8#R[RaK7r]T)>%H^
%`)&i'08H85'gtq:/k7("OJIDifc_e4'1lK__bs#,'$n.EV@YW';ogReU!c=4fKQT7"^AB#_Kj5HH8M-^<(.Xq#n:#?)_E=Y0inCX
%Ele$,\I*Es#iV30.Y,BDj-egT7.<8nIUK<FPQ3rX?$*Ua(XRi(bgpWmmNk54cD(D'@Om&\$\GMm'h^9#p^.9tI/X3;'jb)L2LZ3R
%L&6kI<o@4'\q8?V>j^MU#Rb@f%!N,+7tcR<H9$q<BHYGaE[_AnLR\PC"`kG]oTG^J(=FI@!Dh&KU8Y]"KrEJ%"fk9=3<(+>+Usi.
%O%/bt[g5DZTeT1AKH;u03R!1&,3hL<W=,dIPM?=BUIk"Xmej`a"jiPki2Pth(T]CN61b\dbgMSUpLlsU#RheCb5tCGa:^pLa=9Vd
%a?!%'fM;bS"+TAC(cY`T^p$HY#Rm^cK7r]TRI_,66srCa08I?)%%=s3PFj$QA=5ema9m^<O9LNW5[LQ6!^d__"9r)<6,Iog9RJ[e
%7g)9uSdC*RdV&[a\kjogUq6a6$K"/`(m</f0I2o10I2W)0O-jV$8Ynq5luAR%"0t*7g);cH9n.30Y@Mm"=05+R(o;Q+g-*D?nh(?
%ppc#D&K$`biG'/n6!t+hFcSiWLqrLI08I=CdZYk/A<A2mYimA>$nS2G!WtnSne)eF8.uiA/qMsYP6Ame)>n/9NsL\@6k^KFXO%*)
%XO74U<fT`Q"09fpJH9tD?33JpBEEfd-9R+`$'feWCjn487g+PWU(rCP&()d,")ReG"GSDS"GZl.+>E:TfL&'%#Rn=UK#"&E1-kWW
%6Y><+j:QqT$+q5Z6]l$`6W%Lu6d[msL15*-$q6iq$q7$"$q9+d(i7_,$0NHfq9a.&&K"r$-I4(J1k?g>1kD>+*!/J>3<Y(QdKBbf
%$q4R6J0ktB[Vg^#oT35RBL%UaN*u=1+>=MO941"MH3ar%(uguS#Qb*Xj:E.f=,4SaF9u$\pkbZ86Y>.acoWF*r6WXY):<+!6W%P!
%",gKK^q`:*,VTpd-86.!-88P-!l=[;#n2+#%":%-7g):0U.L?tTEu%GU^7I2*0UL0<hi4f"7H*""GUC4"9to#GS'fe.eAbTr+JKZ
%#RheCWs2:+BECV1BJN"a!'*[a)"nVp^q_$P":!0&+Y`8G#m,aZb95b*A/7@W'YlLCGW>n]WmLs(C=!*<-?9A#:#Z^$W^.46W_O3E
%Wkfi4fW#Anc9l47UZ"<Z0Z*<Q.*S\X',[`C',[ad+YZl\6XZiJ9jjn,9jkJ]-5:(#DM&)aOBMKp5`Z20@.f*o0N?:i?pHu'#Rnim
%igN@C!X!r5&/[B.LVTR)$!4b6#m+VXXEtA%7g+PgH8u+_-I;mMC=34h(;1uEJV>pP@&O9(@&PDH@'I3FK(BKc(s7pXr+JKZ#`MSJ
%PHcbdR_[9\R_Z_]0hGb\24>dEi6IAjJ0E;C#-1FB&H)\\ZSH&L58qoo!lG8j3YS2c="",;f-pbgB0p_*ClD,[+u!uE%Y:<05s"Z\
%MpeR5R>&s,7Hoa8?4MO[$T*F.9/M3nWuM1.f/Nnf/l;b+c33I_H-n\+WXTTd6Y>naiB/;<_XL5KbQ^dLBKAjqBEj7-cqFq#U$4Cb
%Tc#\<U%8>/Z?7*3TSLbN7g"'*?j*MH"G*6S?3131dR.D=`Xp`a64b"/,DX(M\N0kJcG])!Ik59211\s!#/)5__[jF#!^g%&!^i;g
%!X"?eP/+k"RNsS/M'aou-?:K79-?4o,_7[\#!X$R,6B)(dA4d`d0,3,df]kUN_'9SX3mL=SkK8_?)%]7<giG"qBo8)+g_!lL`R-F
%5);+a+J&cX`7(N7Ga_;;:Ql+EC!o:0%6B<C_$'9bIOp;Q11V.a;&DalN.tZq73bJ?:P4M`C%.jAR_1&?"s(\3@%qla]I9@feHUln
%+g^u!GTK^!@=T\(AqLEMBo"U"@IV-Y)S@bq"r##*@)@.,]J,pnh$/[KFi\BJ%&-637^.V5E#8coa3tSK%RXmgGj7sF:]-?m@2O)+
%:P4MaC&D'Q:Na_eHn9Y8,_dCg3@'?q"S+C:5b805OJfo&jCp<!4:NX!-`]ub4T?O\TamL<O+HqZ`<_/STf&<5,YsV\jD"0/GoF=d
%SgG,mdpsYJZMK4ZdQaB_X$^Lo9-Z_%B;gg<29l!T@9l4-]gM_tIq;*FAI2[Y"pm:q(0#D%T.JXhRK5Q5,Kk\)85$OB,s-K"R(<DA
%WQp9N/6MX>foNq_;3?DJEW@3?&)m%('41.qAhV&9!0eD"&t3W:!p2r%CQNUGaD?UqO]+k?,hoe(lRG_!$jY"6BO-q$96*K*OFq4&
%Xm=DW!Jk+%;ur@\qe@qs\e#4'NG$/C*a8l2eHP9e5EM:UA"!m[GUXt-1lR4nPnn%t&J[TbA_<>U6Oqj-0W=4c%MIA\Akf(@4^plI
%JaHhO!F)n6@tc[9d:ESEh7eqM#Cr$J!*kW.#.=VB"@L_Z2+BY/[Vk!DWlneI(m56@[]a5l+djp44XL2G#JseT4&m7GY_UH$8-=3,
%OG##(cFRr9CI_eu,$@_T#agpp!$2/+6Wfg!9`m].o]RM0U9+s"k,g(/p>bMU,Lb/]"KcALb(ip!6"5,\b_Zao7r4#8QK].Ad\V)E
%b1#<]dEnQi'i"T%GHf>V6kS_!N^1$5Cs>;?,J-,5B$3H#YqCSD!W#5]/Wc`<).mtE#=(GF9#>6[(9Zm_%MIJ_Ann-84^q.&ThT:Q
%Oo`@qTJ[f8;MY"_l]QD4RL\0\\cI#8NXee;)dRk2"5_]^+p3f7:HX1ji90#K6dn:D5dsT*4i,N'][6WaeU#<<N\n+5LHtd1/K,&r
%+_hGa+j(5l+c6^,@6Yt#&,/FbJ%40AqSTH=8UjS0)Bb?R+gX+ffT1hRk-6#t(+G.>&.OBm5hE=tm"_NYfFQA;fFN(tQ'_F\%3GD_
%<cO5**\oh<M#<'eCJq:#,_l5YA;:!^WWYtD80X,mOCX+DO<fSYE,eTeeSGs*M<c<@7ZP!>Ga\lZI7OFWI6_%8g]qD%+Ug"LpYgRW
%\IUWGb^E<&#,->?!;E/rR1XI-I7/fFO89DFLADI(LAJ^FfL('pamGcc7"_0s7%L#8=>e!JoaaqBg5q^:8'FJ>A<U3)W%cGN-o9'P
%et5+L#M-:GbQloN;Tsop0['d&BR#[<'5I3%)&5Z[7mpl<%.>@e["m`ANAqI0#>6fnecUNmOBcD8,!.')lVJFu6hrI6A'""kdO9?1
%2!FLt%ZMVm'UIq?d2Y\J6e=YVj\QeW6Y/4eKh$,:<?!3RLWjj2_g+XiK]/?KSdgG40H#>Wi6WE(O52K-El2:p%>@;h0NB&;SqkNr
%8E4t`D$9/?,dX1!`.lD')O1&NYc*YrL<7d\)T-;<%&oru(oK*!Q9b_n,>uDi`&pd^@S_&!N/#V&1^kFtTs,n)(cI#o-kMnuONZ"+
%bW\QBH:2@u,+@#N/LEi,W=7ka@`S\7iFp;=*eQgi=Iq/kM.'6u'#A!1)MJFB5G0q#6Y712nN<O"I.1sP'S@Q4Nj/_>+kiNmR)0Cl
%R_uA%&0qJZaC-gYHlX!?.[hJ7]QG);HAB`B-]c,g7)H+FMIPDGFUNu@0Ek+W^]]DUps>0,L?Nm:&d3rg=Gd:E0+9p_#Gs.JK,)9t
%V$;e:+g_-p3$+1u+[@B]A6$%>,7\jiaL5s(@4nYN?Ns),=CK&l%r\/onN&@@TpiD]`*k5ON!\m=WR;nt4Cj11)TF#I,#F[M-js=$
%q$FuA.#(B'+Mu!2rP7P,Julb[3*ZX4e=eA)H371nIXnBDLWkk#+Ep4Qp`Po0acRo$g"$^iV[s$JZA)bY_@a:':#X0)P,0iib8,\$
%$;n#pFC:8`;&g^?l"UY?b<omoUTlqU.)N2^W5YKILZcG]KrEY_3A<lF1?#s?@S?q0e""[RAI<E:$;n7LF't#[;'8Chs+G8PA;35c
%c6J(\#L8K+;\YC0`U7cm=;V`>!>89=L&HZeAmnLE"jY[B..!*'L4ZGK+Q5CmG!*_`;&#/.bMaipd>fo<8IA%t,E-)t6IIhEKqu%+
%Kd>CR7PRVgNdZ4u$;'@k'l;D)$0NJ<kg=>j0bn,A-5C+@%PWdN$@'Q-"W53hL$43c,1m7EM$HMu'r""c'r#E_(WD&]Me>@XAudgT
%4<$Y"c_L"mU+Co($\G^Hm*Od[ZOlNNj-[0GX<"JBK4$;#7h0<cZZT@X8saM)M]^k/N$1"71%64R(4Pc7&/ULELDRqJ"kY>0iC,J@
%+]6(u&T]*N@Ejpd@>>Z<gkDQNg]a`O+?9BDHXR>N8WQ@5LqO'_1oW4q1jpMb1jsq?A!4RAC:*/WKgF0(P"sIBX>]$'oFInE`fM)4
%BLIme$m.m\3_a#'-:M;j&k-1V$;Fp\:C%"(J)h.X3*V0RYY-;K%&tq4K^Y!?oe^q^?pk&LLVT!OR_Y#-R_V`&%Y:=0/:eu11kC3E
%G'O?%=m$>5Ct/^rk972(d;U-=(h%Y9'P:LF#n.Xmc:_Q<n?`m\+Y+N66^DBe6^DEf_o4F*0=+Xt,bBe8g.11K6sp.5(Bf:4Wt^*c
%&a:Gm-tA'K*[(dtr/j?Si+sD8K@2&NmG]K!N$5Oq1%61q(k1u9&/a=]MSP;_R_Z_EQR"8hO<t8B(spr/?iWWL+u!,)!l=[[$&g#`
%psFm=&K%3t-8]='U^7GuU'V70*0UL0<hi4f"7H*""9sB67:<@RKEomhTe[.Hc&Y?dLqrLGZmsK,L+6+)L8n)RL2,'<LAccJ0^qRB
%JUt.M#Rn=UK#"&E1-kW'6Y>?,7km0%JX8`3-mhYrW$4rDW!\<q!2>`%0N=/]0N<TM0N=0%@'EWM,b0Y6j@@+56st],R8B7cSL-%@
%pnS0(7:uo8`S_:E+Er^Y:ir/AE:HWcbA>]5M<?$<psF=-&K&@<"[QNE-:M<-7!]+Iar'-,7nCB,N?U&q[LRjSkn:.BnH/oK3Fp](
%#/2;`_[jI$!^i5e!^i5d!X$VPP/+k"RNsRdOX;ct`fVH!=Bu!Eq$.37F3"c=1nmJC7OXu;NEK7q!^kLO!Wssn,_:NsBTg/]4$PBL
%TrKr#_.jW)7/qq_4Cg?7)UTc2_["SX8eW&1:(\>S5S4ho'<"iB,'Dn+*!-4TlOXnVaTR/\eRaj3*AS;#3Ju<(%D3Y^"":u"JYB&"
%JY<r$!^ebH!^fn#!^fn"!^fmH"9r)<6,Iog9R\gg7g)9uSdC*R'57M8'5.G7'3PB(P;i]"-I;mM-IN$OMe>@`Audg\4:djrO2gdI
%^^/LD#QdAW.09SqdR.D=`Xp`a64b"/,DX(MffB6?V+\>P`D7$^6Y>.ai&`,:r8>aA0Jo=I0Jnb90X0mi#n/A\8HM7XB`^ZNBEEh:
%,nQSrOMDE]+g^skO<-+nTo^U$As6g\FFe$XY]`\q(g)hG)%=%Jo.h/O8M_3b3oPY^&*V630P"3K)U]i;_["UN'<'@k.13tcj)c25
%S5+]ndqR0K3cVS<KqU;B3qXR&e0t_lB&s\[;5hcRnE%XSe7fO_2e`oBi'lrg370d0P9r#+-=3Uq$eWR%D4lD#1:nV1kRiddL1inj
%elA0YckW"hcrHCOcnu;mTehfmFd8gYFC+</[V>n5oT7c)(dsF@N*mZYN8LU57#%j@7#&tinC3j3T(jNM_,I7f%%R^`WW-'/:Ond?
%#OmPln,kA"atQ5PatNseb/!S7Ub]0I-E.F0Uo=cTM<)cn'F<&M8nAF!m>o*ULs$(C1ncoK9K5h#$0Q$l_Kd'4E1R7IcI61<H*TJb
%#Lbo33Y.VZ0Wb]jU'*MPO]>C[-.@tT6PN&TWb24ukA\:nlAZ;Ds8S?U@c-"EJSCepRUP#-jkS[p_%!*3RDdqKR\56FA_"?'*Rqr(
%XPLMCOU9giX_ZkbGG:I%<*:HKP_Y;F8W]Gmjahkje\Sps*`m-MZX_)#M<U/78jjrZG<9Lo:ekO+bdr3YX!U)K`e4UsmAjC+ehA<S
%.`Af;iOc+*)+daY4QFWD<C6aA>a6m7X7l4f.Y'Slh)b=9ZgVPW"RsJ8i!-1I9;OHK1g7o'VX$3<A.P*)O[f&#0aWQB""".fe%VUm
%MFjJ/Uh.BVUD4gW6$N'R1_-`1#U:0)%^6t`6X\)hI8?mJ'n=n9i90f&XjDY0=sK3GFs-,T[St(0!a?X"HQs!d&TJGXIQ1!8-*\J]
%!JkWtm?A4hR?l-kUDk]1<L'A_!?l,@E>0#jdFNM<)j^[UQZ;HOOfli!K%;dbou!c[5d<F^L.2Bj,7_[/bOgs9C")dPXVqVeW'J!E
%p8+n<Y\n1[OPEq\>L^)ih+NTY\*#Yd8[\#(e_k5fJ=os0Md&&E#('Gm.64c4@H!ZXi]s2#A2Zssg*8'n*82Ii>-tGN7=nE='W<#P
%/K8!(VJ-[)ZOiTMI3guWU?&jIhGE`c&K,J:bg(a=)t7q7&m%naRZU#n_,3)&aSlLj=r];-,`V0<kn$'i>Bd`,p^`R^5;\,n:`/aj
%Tt(\nTfu/)q63L>R1H;a"%DaA)'DGf7mmXSL_"a8'LdD*,"$_p4PiHgd2o%'clVD..kg95MEKUFXl2NR4_/0H&aL#Ff;(S^WYFbB
%C(0DOW]\j"<-YL"W%kB/W%tH0Mec4]AnsA&>S!6:E^Y5ldlBtI"/(o+4WlF-d_fj.+\XL6l/@)H8Imb(9R9NM#,->?#jF'S(<I0O
%&K/_RcGQG,%oH^_%kN]'PR!N0*m+TOY@u'G'H"uFeM8[Ts!Zt`AB)P"it36_Uf+<NKSN%g*BK8L0R.Dh`fM3%c#p5tL)89&U.u5e
%'lcWa7"[<W>tP_McMd7"kA]jEa#&RN;CmUr^a2#1(CnK:o5lAjX&O]/n5a%\^m0Yu8go\9GXTEN`!Tu7rW6SR38B66=S`252OqD?
%8RfTJF.VGM,fS1_0WQAN^+Yl&O:5.m1NaTaNebhF8E4q_BS6B=6YB53L;]5m4>$^b)7o(/1*i1-TSX'cAjSpul8;Bl&"-.R#4mYi
%#ZN/W%`;-I0S(B%r.RJd(CJ&d82PT8\UPjd_Q,n/L#OI^$Yd\`ILLBi["T$6kp7?b_iejhYrN1pY\YU<A)YL604D]U.jWBFP[Lpd
%[N/X-=2F)2&BAmh"q'H81]>]t*YB,q:aWPZa<r+$_I4m8h,Z"AP/:(L4TYC:MN5$OGEtSS0GKshlOu0B_5IhhNdjGU*\pqANT1U4
%iIbY+,']9BE%Za_oRq8t4JjL-CYq^4_LCJW'_iW&TYS*!"GL,8_,*s.)(9lfbbQVIJojB_08H;6'g"qk-7M@-%aoo2$@HbS8Q4Od
%k"2.2eEeS(/lA=j9Eid#=K6tTgHYd&A;35ccm,\;%+0`c$s$F[8;Bo?5dQtlr,B^adIEAGaU6GcV^9Fl;7'hT@'W+`lkgb1XDm]'
%W6&l##)_ReZff_\*mk_=q?=]:LirbO9N[+FA%Zad$]hh#Rm.1i_YqEH.r_X$?U8B>Y(#mcN5^n3mMP_Z(^iS'E[V=CYQJu,S;!or
%nMr:;+aO6>=epbmKEadNL)llgZPK91dh]#;J`-Hi`.^<a7Qh[;,N9m]d=fdR,cDHL"&g#!BSYbi\-oAYPN2nuUIk.\mesfj"jiR;
%kSt(^_($*>5lZMW/.\.kNs>64_=5(N=J-N?k9bGt?oU*]@g9i^pRPhKlmFE<J\Q1A%%OB9@+YVr$jK^sJ\lWPm!4IK@PB!WQc!3%
%#0gP+a\OW.pu6O]_8'-rP730scjU-LDtPe$ZG9m&fX_M+cpMF+UB*Me0Z"AqBZpIL*X2`C;PPA0R))%]>\F=/dQ%_jUs][+UsTU*
%Me>@bAns;$4:djVO2gdI_$JUFa:f?o`F(r%,1XIP0YI)jf0DZ!)#,%ti52-($qd".oo#GM0]XB5n1jDQ0c5B/jY.N:IX2k?=eloD
%/:0qm"&!?k_1:L*]F9NGdL6>\9-?4o."a6b2Er,-,6fA,d=fdr.l;l%Wt^2;[:>B9^j7iZ@)0IJQbeauMSW\c#nN\Y6t78nRi`+'
%&VK$EB^7-mO,Jf`0c829n<h%r/q,/c%/Yn)@,Pt-PDD[_(j<^uK0`LKT^WsW';$V4(lV#DjY.O/6o,[;68KJRk'3'*^j""d%#1M'
%%#,tT%#1Kq(_!ij!sS=Y)?"56Nu3g07$GZU"YYKORl#bk#TO%9&NL8SCsi^rBF;^d\9K>7B!u<(`3V40-9iEp,6fAp^E=@%7A:V-
%#Y>PZiO+HN"qlO(^u%*[#0tb-0IUeTeLuB'_,,m1^rO67`*iAVQfg9$;%/2RdL6>G]d/5]V)6;%-jn4,-n<JLYdssho1q+Yb)k<S
%BLImuN)2p+3jV+.(lCm>(g&jH)%<T:P7.ZNqfs%f`Ln%V<giFWqBn+3A]S\:1n[>IL(BrZ]AQ6b_mp-r1DnDCn<h%rDLNrN%/Yn)
%@,PrC"p=&R0GnuL"G9!?AYAN51)$9D$KN'6]Gq,CeS#-hDX4qD#/3.T'C8'F0Gon]n1ki\:,<`e_-o%M\d]A#6Y>tc!BjmG_@TFT
%bc9Z60N=HP0N<bD@&PQ1_,+^3_,(l8_/Sp<.*QMP#)_Re1\oFC*\eMJq?=]CW#EW_5Y-2<%'Mh4238@X#6)VN0Q=0)K0a2bY(#mc
%%*"AHp_`dd(^rY(EYo3XYojkleYF&k/:0qm"&!?k_,(T0_,*jp_-hBl"Qpk<0S[g67jE>u@"]_mN.3"u$jM+F@5+p/9JRGeO!Y_Q
%UdoZ^?q:ua_($*>5lZY[4Cg?7)UK]5_sc/c-;:=Y$+q4S;l:H@SVbgp1P%T0MS[*=3Xgbg7-`9O/l\`0A0sK]'WNr-GW?0:&>U"m
%Th@4pJT$Jp)%:o%4NV!p'$XhJ9Z0\s(UB7,gHYd&A4Ad%cm&`>%+1ljCj6g+W7cJ7%*d]a(n/QT0Jo>40JnDo0Q^XN::=a:`Uf1Z
%r+J3R(lVl$Jm^9SJRU;U,WuQjf,ioi8-fD%J)`4"3*1mOd$_\?qThUu</8]5a1uo;@/.R)_dM[8`F.mbc!Xr49/7>d8s9[<0$t)^
%c@kXsFU836T4BY*+g_!lL`S8fTnk%<ArUCVFIckpY]`\q(g)jm7.Fg)Gj63d@'Ie,#LG]00b9\sNs>64_=.K4_*miNkX_9l*Qcc@
%,'fW!,YsVajCuu'4:NX#Vt"hj4OkT2nVP+2P\2iFnu`p?6?sJC-r5I3b1#F*nhc_1Sd#kNe)5rNAEu-M6k>^9O$WDo_[(lOTedWe
%/5JX/3=LNVbL>Cgnhc_9Sd#kOe)849A8=)"5S':1Nrem/`!BBu#SP%JK6\@Z7:PJ&0Me6rk)$im8.:+\k%QNc4H5s@k,AiYNK;'I
%LrJl$08IM#k\-Ol'@#"a7Ir?\d6%jbR]!tio46AXK]et<0si+1q_=0Rd28R=-M1o6$0Q$NiB0h@3)>/CcI6=@H(&h7:KF+W+SmIm
%Ao5TtIq`=W6Aq*]MDEhnBZbf1i@$k>XT/5=DG6ccUI4tZIq=A1AI74:VM[u8;Igg(r[/*IF_B'rb"uVn!MF>feIE[8!YF!u8cA\C
%4.@!iEbmnb0AQShPFcnDTl4XY__i8LCkLn>JW%6sG*f1O]C<SE'`)!ZQZgA4K8rc\RKIt5S;c)]=jL-_nZ3aHjV-12d413J.Yjhp
%$9I=45G^a7`/pkqIF*n-YMcM\W(TZ'?qO'_=+XH.qVG>UM"nNQ;gB&;16jnKOu\3<Z5._;>'e'Sn5^pl66;kuD-W-eBdd@;"4OV3
%?Um5!dd50(Ci.%UN;ktjNYfl[e?k4rgN`;B,Um:Am8a)#&l4<j<+]PX&\`@#:u_n$ja+2s,'(@caYh]SVA!cMB!eEU3-ZB$C$!L)
%f(_[@4r=qDf`lV.p]Su$Z8:nrfWGWteKMY*6Mr4LZcf.FPOu9hH6BgR$tP\NhFdKN<CS6\)j?3L;1J0"%D)`IA)cffQ1BJVOWba&
%GDu&_(kTba?l7lo,s%Y7PIP]mL6d;]e7q>jl3!dc8KW(X\$EYKJW[4MmE&"enRm<rddEV4Im1!/O!?@rs#rYEkk(4*3Y>[WjC+R%
%gUr;eg.JA#*'W@&UeYnsaBY]!7RXo8D&T0=jr0S2/)#mr*tdmW;;OR-6u*ZY"_52Gk=00G_kc$TR:i^k(qWKRl-?Q2BNfuRJX_rJ
%c^Vn[A7K_oF:]Xem_>9QGDR[7a[^_+I8%K^Yl-u"?E=QlD"#](]OG)ik!+N1r^/*r5D3GDUE$$-URtZd#J#*P+(Yc.J&&(%7<u->
%jOPDkE]hemBsn`>&)irU3/=r:rXaCQ5D2Q*EDF%_onW#mrP;Q[/(TX/-+EjJ@BN2'QBKo3WL3X?;.=!!UmTdFWL3XGP1^?I2Mot3
%M0FR=(9:2Jq=.t:K?=^M0_pjH*9@E)=\.M*b)_!XP99bg9n#@Q+OT3Uq;E)>95aLo2TdiM&atV(I0dmK8)'%/pX-G;_0lU8gkTk4
%5'YAo=?l%6ggW^kXZh3(C_Ee&B'M`3VES18*n3[fgOo>npPGP,KP'M%-Oi?<JRIj\X"/)ZnKutYM%>I"6hWa:dc5^5Q7@rCJ-_3^
%7^3tsaUZR#LOMp>\A\f1E]<W8O5-/gYfq3&/ik>Nj4pD8(c@(<b@-e!cni_Y<d$"=Mq&:LkNt5]Gp_e/1W'fli:&P;i?ijq0Y?;3
%gs@jd_3T6pd#1m4&a8U?^<[QoD-1C.!f@F8T9+p;'cV^L%El,5Al_8`-T)Yi%5NaKeT_8f9PR,tGn-].grsI,RF'=YZQ,o"=JRor
%IT0o1<Zsl*\';E0RKVfT1.6=(kJK"<8ap=IC.975`l)BJLLI.#a::QMM8:CT#kSeHH*Q'G!kfVo$_W+QKd$$)Z:&,Wo!E4S(rE#c
%-qB*4BI@AN6*=BJ7PJ4)`g,<cY@"C1Vfk^o\'UCf.s=*hMl&2F;5Ru,K-BMi[DZI/qYVp&(d[=m;$D\-]f_au#bLM%Ce_BZ]NF\7
%3SsJh$KReAN@EtOl7THd`K@#ME_A)NR#B`]9N#l(9+R*G/PIQMOfBuoa#tKM-/H`6@\l9LGY<s5_ZXrp:3JpC.LYXU_aqdVXF@Ns
%#dG-3N%-@3263bpK0r9E:RDL(=='#j]1p6PEq*f<R=o.SLGVjON[*.CR]*/(mP*&26HqQF$(It=bu0@m[-afXJgH0T19TnCQ5;(=
%+j8V;>dE.+Yu%9,7oL*gQ]<*2;$b_T/4F("/Zda_S]-[;.>00&4.;sQ$"DigM0-C4D%CpKMW+fc;PBkI-9(S^T<dsZ.+Eg*U)]jK
%[.&^BkSGh*U:`*U'X3a)l!:BP(Va\=;7sg76rHQQg5\'a+]W5<g,+Mj>Z40Pd1fKDY+sNGS=fZu7"nSR;o)OY/'a'<oFU2f.P>un
%5rk1$UJ4db:Dod18"6UlU%-o\Kfg:#buY13_Erq(FL2nn!d"srHtg%k]i[]6J_n]3qfG-"Ke+7dS$Wa',C,Oi;!mK>&#(Z03E9:j
%X&a'<@A:f#8&WAUofIos()O1DSX9e!9$>Uo0&k,rmQ'"FKk)dZ'?@3-q3`p/cd='mU]u+\_o.E'PPQIS<n'L2\%]@!RRCbCr^(r'
%(G-\,J'i</n/2Upr^&[<(HbHO83[ZS_d`:%7!]f2(J$'3#"&PJ(g;O-cl*?_3C4-D4"2,-IaMUYb3K[m!@t^GhSlL@<c*KZ(:t64
%TaVhJjj7E!K,Y4N-3cgt0GnHSY/+Ko2_c.sA[g[3=K)gNh?N#'k8p"U6A(DH`/Ou]Cf6/q6YUElPXL.t'H.A]F:ZTCBt"/W=M55r
%h?N$;F?p=i112dKP13l)0r1.+Lr!cf<.iT$=q([hM&n=A0Gn6'nfG\m)iRkn:(0TS%1J!^BJA/s9+=AFV5_:%D4O1L&X1@N0R/sE
%EIQDF/6;=/U:7tK-Fu]Z/^Rm=M$B`o@qm]$Ni!"*h>*$76OP^f4ALi+57s>#/,LL<gL.ZZ3mf]$%&:UG`&kHU?l4q/UDtE]URdVY
%7_`Uk)!,ms_17g+9(-4H5.;JX^;oZ[@-E+F,=Yij(e/S!On&c6(l?8K@$h$*L(P)O_,ke1cAU6N&Edma/pZl9=Z\GWM8dkMBK%X_
%BtHie&[)ZK6T[+A"R$noq9j-`=rrTer"/(/0YU=!`*hd/"sY9_%0dM6H?k0-3b#p5[&[5[!F__CM['Y[r,Ju$^>!&._KTHCN'`/*
%,T;WMpJQXkG%k\FN'N"-mi4iM_8F3Jo7I67*fH<]OQ^O8Y)2S/fbcO_`hL:_nX(5RQD:Fq89]NX_+5]0#(ssQ&aB0[ZTK!Rq]XDB
%@(\bY)Di;^J\c:1(_"HrFZS*VZ^m<i7_`Uk)!,ms_17g+9(-4H^9H@7^;oZ[?s&*e_\t?KeoQIP_o,qb!sU!)DD2pY9FM,4fr[4e
%<qA\K\&#T8\Hc^scsYK.%>GT2K4-&b)"p4I@0IPX!d"ssHtg%k]i`AeJ_gUkqfG+4L/hV8&sCaP5V]($7u4upk>[)]Y$)8=KS^a'
%*\eLiQ1l-0gL.\2G@E8-6\Af!)N;-!;M3A?Bkf?'6%`St(^qH4:7NC`(lO[WOQ^O8Y)+Kf3M=3-#9&O:O/]s/3LUkFFQYS$$ldQ$
%n2N-HrBt=*XR(^5DhIQ]BubOBH3"5fA#iAN>'5/BWmd$23r;@(_/QJUVgGLHV\G'>pr'G,FhS+LXBVSiL#E(_$pX".l"BrU>l]T;
%=N=/qCY?g2Ft:ms(&\uqgL4=gh'96^kV/MrLZ-Iq@5uFNL1@>ISO&%iB$EF5dV^@WZ(`<bH:s4c!s\/Mks/];4\?.')L+<o_6]]]
%3d<]I(ll#nFH?+aP[^m)+6RiPN*#pP/;=sS1&QS<U[>eF@^LQP=pu4o@X)_Man*Hmo90qW/6;IS88jK-NHC6+Si--3XI5uY2=pIH
%AtGSOoCT,P-VkF$dn^,0`G0mpmeC:<E8@M2g0f<Tp)ciq45['qIf95Cl^qbXh=s)-p!<1U.Dsn?:jKcSS_Kb8F-mLiRG4;C.I1N8
%gO;>!Gf7DSkI/F'&RRF!QY4,.'E)":epl&iqtON&lAtZ8+heD;+nOdDP&>\H/65"5geXl]$#l<rUdC"cVMn(sj&f<olgn:*oLt[n
%RMlOOXk8$n.ITmJ]dF8L3pE[YiK\Fj_>-4f:RX&&2(nPp7G?ed[S1742X^&Yrp/QFPsJ<ISW)'XkAc3b;S?18&ZOWEj;R?9dKt(F
%F'6uSlZARF*.MS__5umh<GQ&1M-nfK/dS'dq?D,Z4b9_q17V@tp]`GsmJ*AKB3!&%3o^IL:P8c7ZGKh^?EC_o?uJtaPrQo^r4HC'
%W1[^X3BEtHQ:DtP*Y6q[C`6&/A;nH751G`d"hL3@'6nm0I*g(&)!J*s+;oeYNj>Hb3F8e_a>i%rj<_kA_`fI3187dh>uhf3nC(r<
%X#B69qa@&8HiR1([d!-pC!)N<SNNV_.:q]uV,aQ@L@d<C(aDM))V90\f5e-*,BCK*aW"LZ5V;PseoUSF0:.b^A=9GEO8*oHecLT@
%T,:0?'45YfF+G\:[<<^aSYrm8f8s?GSf9VH(]a9sH!2h$F%!,(-U;!HSVOaWd1Mc/YY9+OAiV]3*0rUF^_B:eAYM0\@W$mDZ1?m4
%*,h"`%7_<T"boAMAiT]^E4D=n&;'_;F*uO%2h[Ro%:%em82""`gj8"9R3plq(oB7O?Aa%rR$leBHDWWSAU6]\VDee4/O&b@hTGM#
%A]JXHIP>@F]+J17]90<#])`Y2?;qg/#!&sB%<D8Z2gW-0@H.C#+W%19DRo9q`\Y.;R+i/W\rF-/%rS00g!jjE_;'c)R+oE$Ocb+B
%D(J^;ghPliWGY;]0sb;VfPhM-iFc?3199B$eDS.ELqZ)A030@R:?+L/c]<u"UJY[;2ka)]]f2Pq%-WZA!4<^CPThp[7>o>;YLlQ=
%>JdMT/lqk5]+r@j\4YP(cUV*%lk2Z,3DD>a;$Xs:K2Dlo;h6*7:(g9.M"1O=P8D[=>o-O`/&R:qrK,uT0!6=ohL]GLafWNU>+E,I
%`e;028?OMj=EKpG,\HAR'5"XSYn(:"]&NSid:J$u=sBFCa[ChpSjG5-+jj3/ro[3W[+s"a_uk<P/QU,+gho@HJm8.]SeA9O'p0gj
%e<0&?9hj-nFu0k;9LtXg+\bV.nsi=9&eH#q`42OG3F8ekLE(4WEQN3[`7Eutd<(%_3Cu%H;<'=sXD^D8jdWe:75P`f71KpS7'O`d
%@!m;F<f<76&E9f8?9k#.\/,ZQLUT2Q;2;V>&!9Ai;\>.Q:_V5P.OLls[[;mIU0U4[A_]oF@YHkNHYU46/<^Z4Q]<!/7L33ZC,?sY
%L:gG,dDj"$+X(Z9WR6]Y5p[]@`(An0DM<A@EZN$0V8O\)4V%p')JV)ZOm6drAYWB7+WJb`8dNslmT)Z1dSZcB#pDr3NFjIBcSZL0
%Q/0US@YHl(H$bC+8C>D0W1CAsR1R70:K<os@]X4l!XJB2jIG3UqIPSPkUD*OMC6ol@Pp0#mT(")d%.ZQiCbPX-7=HsSM[@;&?ITf
%!Y@G<S]RVud:dhm3:mk$,#4FG2&(t6lk&>s.'@Qm6!58*LIQ>!;Nr4@9iA>l9IrU?cW!i=42'$?`/'pfBJ`T&6c@(;rAf/.iZ6I[
%<Q2$/_?WpQF\7!Z'm3,q;\aR)4&m$k#ZVW<UnT@8AW*Re0A9Dp?cJYdlG]cF3c%gd(:-\78<9bpnd2=j9lm54U<S+aW^7`).aBD=
%#?@IXM5n@Vh$Wa_V)s?UX,9Q=HT[T0<CM6#q<\(5<5mO."]^7u'3-1bWX<H;<=ka;5isT/Q06+YGf]JW'c3!aI"oLjW^oCHD8E9P
%J:^9AJP]Fq:T>M1n=V7WMBJ&@!EGg0/)2k$\#O\,mR1'nSJ+tV&tg`.Y"Mb`gRj>&8A0jL<M9Pq$4ILob>5,F]i[]6ESd_T)Wr$'
%Pt"cI%'#2NM2A6GiL-^'FJh't$DgU"n.7>FI"+mtXJCV.DcQ=Zjuej@52BX5<Rc$T9i^95lVpmF,?.\8PNq`[(0!_NdB4tq12`q3
%Z,3&3>?/>T/5m9eU8lQY<CIk]:/s_%n4lu;eu1(DPVT0EXXC+M=*?+<Mj<iEk,g*cBdTH-5#>7t]b+4t4sm9rMi"H)<ut@1r5X>f
%+?\8+bZAs<c\p?EOQW_q/g<_c'p7BN<@"4A<<38a<W\tpU7YCa7DEY9'g5!I8F_A5=KHJ^d+t_]'tU_!4tN^kj;A/%d<8fq.bakq
%</&o%.^VKAJKa#`q+4Rp(9?XBc<F:Rj4o6l7oc5bWf!+!M5k7JRAu-dV`1W51a[0@'g+mC4Pu`oc!ht^Uj9"u(Gt=6lU=h'\a)si
%e@Fm><TGUp<)r!(<)rRSMQ5m,/ZPPZBNGps)7NMU=Q.QmY+"f6b>a2#W%-5sVbpI$q<UI9$9:ru`hTPiHTJ)4j!Ui.=*?+<Mj<iE
%k,g*cC$tLNc%m?>Ki+cuN1Qu*2"$F($DUEt(lbPIn6?&N?eMPD0367`T!t`0L_O,p(^m>f!BI(c.!W*3#ZVW<UnT@8AW*SP.=ssF
%#?6C[XDl5,h5]HL\eA(P%oa8jJ?!:p/l`X'IjV24GZ5D)TW5d=EO,M@W`Z?sLH'3PEK,&*;'Ae:=G<cLAR_A`>'QpE,2MKLUC)jX
%Jqo/EkPK>k@O415H)lg(6\/stbW9%CpWR`P.NE5ml$1fR#HFM*[\sPRg1IodqIZ28$?oqQc$YRTVCLAPWkq>,'l=4<<>B@U4&m"j
%U8i16IAWM,cbu+)$M.`'4G8!\MG'C04SG^'X@#urrBsZ<0MrS9TrP=<<JBHb2#5;^jOl.db<ql1Wjmj!>ueB:<(-k/:_cgrBI+4i
%.f)_*<V4HM<T.U-:%qm39tONdNhO'b`@H$XWkrIL'i'=[BY,ls'lAFIWkq>,'oqt8`"6por1p?sMcKB\kH-5:EGe(qU8i/B<CP*L
%6rgV`4LEUK4Z/d!<P_&@aRedZfe-=R6^kKaGX8[6D)FJbeI:)21U+<VJ[O#:fN-I2>><GtCALHSC>-W6GN.8'2;a%P&,BU]2*L9+
%l">E%_lU&=B72X#l`98_I5Q"U\'hok/W\;lA]5t@4Wo+&=ORYB'n4_9e'AqJHIc3IZc8H*2qI%?]+sPKWd,$:D(@5:7CO!Q4)9-C
%[_f;pRZ=f,lmENPiN]_dVk#^DF.G2U@^S;Cma`,VfU_45cWY+1Cour7XYp'Q[AIT=2*G`WM)jRKq,(G&=B1FP]R@aVcS[6Yelsr7
%hO7m$>LUoECBi?o1U,`)4@b>qhk-/MX6Y0TInYpZKG='[&4)&#+M[AmVgeO9pReVWNo?JtGOk'ljmDT;A/[!GSVR]CE),+c8!tnT
%e*Wb^k2TCO1B0HW&o#je2"eN!=F3egWe\HX2D1%=l_h9H-Y%D!(O'4IrM/'ZHsT.N'WgTFpP)nR7ejNd20fkr1@dHnj'UrI/8L@q
%Q:^2Ee;IZNo#rj,j0Wnt8!lX]:mO-g)eJTi1?ltQlM0(?:2,,3*NtbVQUr(JO#pCT@d7Kg!fYVVh!$]=V!7L]30$Hc0(DuH(TSZ&
%f\;HlP?hQWagPb'C>'uo(9LgZLFQ#/n*l0,gTW:1T+m`KFb0M0g6IMn19&2:k]D+gM(4_3<at.$&.Dg1"l@Dp@\lKRH>A\Em,:P0
%cm:EBIW"[N;gk0Hk)nouO:"Lp0[QV8+rH%o;Md$haY2h0pn1\i1"@fQJOtKK&-"oi=KIV*=Phcm--Q&s5=]F3NaMf_6@8s1'8%LY
%q<RT%VNO>lh3!K'eSY%%#$7jMS!g1Y`u(S:907X'31e*W,CH'^RRtrK@,i/DAUC\&,I4utar>/\BJ&6bH]6SAgkUq]C:[-(H2*d9
%&b8;c4%J2\mT%:K\7sXd]Nr`mRWt#5%\7JnIGBO)gsMsZ.E<OiA!/a#m3f44@`:iJH[c%V(#-S]ruirb+$u\$&;'_=HDp]OEa&,X
%jPn^>e0P\+!NWdHji,B&>CX<-nP"G.3DZ;4KP1/AS=7UmLX7jU+["3qkKKnkIgA9f++/pSEkPRHEncWs#+Ga2.7a7Y'seu[cKp<#
%1]&=1ZQE(#qa%G5WL>L0<id+<9Q'[rK>E2]%s]l)Oh_+q0pYsUiJ#>`EaG"QjQ]`o5g5nCisGOd=B0CRO1.uX\IW,:q[eduO1$,@
%m\B1*KDQ4O\I[Ydqqs1RF8_p3n;A"r\,,l>Zq7>7R]-gkR/1IsH;G\8C_,eUh'msP&=TR/*]3rb#BI4ZXK8qVa.$aX-9`]$&)$uQ
%UrW<'.odYP5SG3EX,UpW,a07;\ISS*lL9^3%d!-/nK,4seR=m1cs1\:4NG!(VjZ1:F(f/G$q_!mEu]"1\+716oalE*NoLacP+V\d
%3!'a5Ic`TE9Q(&G2a!9CHKI-<_J[><Z%=.Y]\URrZlj,$1:%R[fGNp%[%]n*7UTQ?19I7<e^0@K%DQ"VO?pO]`[cjX;FC$$F"jHL
%Ak'\aKSJW]j^:-%-&RoL7qK\L'gb<7gPfpD8T;s)6ZeZ74pr#imO"\ujABG]4@Xc8L0BQ&0I2bt/5qKm5EVEO.h*]LgL7_p3Z([1
%,!R5D'S\#saB"'>/4tkIUfiY*9$nL:W^UE^([`&K>fj,;/lhsO]8=R4kXrQ(4.jDZ;])Jm6-9tf@#4YE/N"B>5'fj27aO/!1kFUY
%#ES.'K'1lB>L]bt038'>OLMp5,.ZlI@qpE;\I5N3Br%beh"]&'jru_iPCpBlV/8`o(+,9/8C\KHigu1`K'oEo/6;"&MRTtf5"g!1
%iFE`=Vm=[`4,hWj%-<OV%dCErT2B,f^LhI#@rCKriW2si(+\H#Ejr#m5q`-^5D-2ajcCf=`,XjY8.u_\`uW/t=X[FN-t.0KUfe%E
%P_L4';R#)@8B,5s$M.`'4bS)BMG'=`/f(HDltD8CkgH]13=<V!I\gT!3eWdQ]<`F(,_]'k@n2^s/4'b-57ijm@\l6KGq4ag4A1Bg
%6CQ]KX+/:/O,?7EW$pqnr]po&MP=Ib(lJ1$>uAC0DP_Q^8m_E*D+F++]+[bu>f><1Zrma88up@:.AWMJ$L&n+,%fcgC:&8Do:qpW
%<1L.EVLgJg<h:*Xl64JX<EoT"U2hZa7^K0e+#6%WN&Fl`6DM*W$@+Is]<;beKnTf/cY,*M"QuAAq8.$gH*MrBik1i$7C_R06ItSb
%<Eb44ICr11Z.qY1+'i+CF,IEi="W,-Z33`8:PaqJb'+9O/M:Ag4#%Q"P[:-0>f;!NghX9b$d#uG-]V>Zo.sa<DPKp4UkCkQ$_AY>
%SfcK!M\Ymrl)cVAOX?4DTtc[1rC'B"e6fR&4ab8dUVB@snE;NMSf!T=+u:lQhF"*J_0CNQgbciTUc,Z6_9d3Z(g<]NW(3;mkbf,I
%d4\Z37Xa*10OQ1cdMq.IMdEHm_0CmoM8<!m%>Jn:0_@(S(g9TAL2pr]cGj/>?mmrg(jp&,o"8)0%sd"9itCPsR?\[!7VWMo)N;!g
%/K0TCJ)"E[M$>3L%iPl]_7A`?^9Cg]?EDq;3,aFh&MCZ2L`h]^,9]&aN3O9fas5_MoQ,o+kZ9>?"0r&$(\\l-\>[C:h$2mS^(Z-m
%!ZDL/d9s?+QPtgk9iH\,qDsZA,6el:(d(H]4?mL5e?N,t&!>]Qiu7/'RC,;4Td:V9QB%r\BK;M"N-+MI)@S4E@.695,5joA?EEFI
%88j.N!bin+?l0%O_q<@E(lnlr*bbhRT2H(e^M#>=ol[m_J<en^mp\^L[i9\.a6plRk^WlT#W*Af:CMt4'8']r)@U\;_(]>-0_j(6
%ja",2+7d&R`[/tp12Afc$uOC"BK%X_BkA2<)"H<f0XO3"6#c7;R4mo-S/87$+jShM>_J#Q0Q[;IOcUOk``NZnjUq(IL]rFYY?D>=
%A-nDOShM"><VI?EgL.\2G@E7b6A&\l)N;-#;M3B*Bkf>\5_BYe*5Q%P/917YUqmV#Q2D3XD(r,TmZBNdjFP-$((E`+a4+M(*)-l3
%]([-QL,!?qGb,b7INUG)`N"BCoJRO>OL>?&L36lXgbB]Ua1?CSCtI?9.0cPSZl"bu]%pc08oCJLYp*Q-m5j-7G@E8-6A&\U)@YpZ
%#/c1P_6=+QL=KZcXI0n6^9h*i?EEFI4E#jl$$;6P<X]2M*b[7/Ql$5^-O.I0BJ?MQK0aJEH'p>P<h'u,p`[r;?sJACDD8-nK9;68
%%)uBY+m"i(0`!fK@.^K8K)o,,Ul,HdL01Oga7.mhit]9AK4,c=$u=6u[*=pUN4)GZK4,3-$u=6un18SMr2@G6XQ5.-DhE%h1l9EW
%%>Hsk@'k#L%7\Oge6o)!^X6HAJ-LYhM%Su"1@nsT5=Bf:N#,#HeuR7-0Gkj7FaDW=dpoFRO0(J?7>o!$XAu0FXB2;4M\Z'+Z(#mM
%#Oe`uVaH0s!\+UCldtB6rAn4LL#K7GVjk*\j@d*"kf(\n%-[(4/rB"ifpTZb3/nEcR>Jh#G2b1qCYe4`3Xdr_hT6RW-dQh<RNLR8
%98ndV62GddO;L`F`,OAEe$0CSrLDTXdt,GVXG*R!XG<^:M\Z"H^Y<51iceid]KhD6&%!0jqkY('D:I'E\:>@4ZUUNK:7OR6Bee[X
%AO"3,eem"4pXnh81Jc>cH2:Z":HrXWkuff<c^K.M822mu5]2mGQ2Wu'nOIrYpl12U2:Cb4`'9@CGJ7(lrVHCef1$gq)h06Mr`S)'
%AU:sBa-TBdLAs]?[u3(.<@C;5[u9lM]GO*&oQHA:>RG2doQFYjILH(1%[Bi7E-6K]d*'K0jP#KP[Kr39dAP-rFkuof=KIb^\XulI
%'BM"(8XPl?Co,gMdB#'LACD@0Yfp\gECWbOoSN%Y6H>UE&m/eaa$>'q]TZu,7^L)V(1,+-VCe!7Ka;%*N?MTAN0=nEMk+]Mj6CMn
%HEm;j1;-E(2:Mf,'C&E6Z_e10VYe#%Fd*K?+uR<HBfMaoQ0L^*ae>n?B@IUF.DD<47`b?GYpOH2b)Fp$m+hGF#-J?M^i`f<X^!M[
%A43T00t@W4NW]ko_h,AfL/XuFQ:DAlhL,]IcQSQ@b")r,6T'd$Us"TLLhiLRjaMIeF+$k,Qni@EE"<)4`QF)Ik,hEc_Mg_MF-&$G
%>"(t8'bZ-[e=gWt<s[tAm1#[XebAK?PdWD[AueU/0r/g,\R$.l1fN;e4>;shN=7_JnQ*(7.m>03>GJjI2N?62:Mr=>8nZItE6(.U
%9r*d"T"/%_5kpO2M6l7.Xl<KjM;(^/r/j=%a9,[3KK['/c5f(qE<FjB,$Zd%LIATFa$O+;SO^='p*29e@@@#>9RUSd4tI?hJU*=Q
%o#,mjMXJDb/QR>Ug>bn^BA+S)Plg?8%)o/.4LZAL,!CSZl#BJ,)Pr3#1[2a-Ft:pteK_QppgKmgRMLW<O1:aTo+5Nn4G;kB6WiJ5
%c3o]YK4%EJ1gf1C=>*^<greX^dfrYjnc)I3,VVN05[fAr>,_!7-W]=p/mjkK":U_Z*`*nmYu9X@*cJAI1EM)R%rj;^d<=P9GdNHW
%&0<QWU[Sg"'-98JA?;C;*bqr0iq=BW:,^5CNp.%sCknM%%R5"TQDkA79Eu(G!;."^HEf6b(*2j0I=AJdC5t=o^0-IW)nnn(o4+TG
%ET@3iEV*1eiTM(0Jtotpf,Na2DC'M36D<3%45L$?o"FgGn3tH:2WTuF7eI[BN-s4qFkAg])H,a+;4N@hO1R6D+[+_2fkPCNGd6NV
%'"iA,'uEp^0UErnb*\QT1L[dY7>BkE"#WP\\]83gXBSh6X;ZmGDhmk2OQZnDAq6a3,dS;UaU?AKKg^&,qk$Z&0d_Ys-(]&kMj=/V
%]N\RPJ/<^2V][N`RA:`/FlX`<pD%hs*Hf?><_/_',gB>fnpj@h'eDTqOE"9EZE+kCq'!pc;d?W`K<[9k<"qj]>fd[[;:HRJFQKu>
%j79<Xc4nf)=A^82eIsJt$m\%KO7cu$4sYEcM&.H#$1Lnhe-YV=:=KU>9hsbpn'k*s,=G?"PDYsqQS!NX^2ir]Ya/Mh?*('(G&r]<
%ka`OtThBHeVC9m,GrFiaNhXdVmujEiPp_kAh?i>a**#oSoG#/;6j6rJXXGi'e3fJ0WOQKL#NWD0k-c7(<MZ'gY'a2K+mQtM6rf'>
%'Q$nd6Bnnu9i]-63k+3aWe00a,;NWYXZ.t7a[;T-XLLe:h,]?[Z)d*r+_o8rlADjjdHVc@<fhB[XQZ!&[K:IP8JVj3$GBQhNq'`0
%`@HBb_F"%GQ(o3)iC[13VCVl9nWaAjh8%<`;7^d)B5ucY%aoraM3I*m[DcV*4@FL2Mef,8>a@lob0e.]'W!6K1D_V_;g$JS1j'W!
%$V#CRo5`^4S%[a2@RU'Ld(EJ+&!>`Jiml-0"8tZZs5*ZBSc@RE7@s3JrC&_5r'`iLpksUSi\0RIGCKX/\Wu'k8p^"kAG_:/kahJV
%l-WkVGQ6k[g9gYC0A9BNi\/e9qMXsMf"k^hIX'(Dn5\;%nmVbd7!\Zf99sp2Q59EfHAMFa/DC$@fu+'lKlkOG8;$n.>4`U6k8orb
%_X>@q/6:duS@?8C8/C:8(*<BB6Lr>'<F8!3UfU$A_!!/r%pO;J(Q]k4Z?X/lR)LP%N8O"U?L^,I(NBN\J"[#AMmi@XJ'g/gl7Z&e
%UX<EsJc:7VM3I*MrInCUfS<"9IrUHiO3:.j^JG.5717/c?aLA=rC+<d)uYK=kV%1R(m07i1n2IAIYdXi(GClqe),q96S/"j3rQbf
%M`g<rqMTBIpksT!I6>H"^Sn?kr<9:a<dkjcnl`C!`EVt0r.UI#0=1q5d:U@AJ'hlN'7Z_KkV';0J"cPR?gq(OMXk3[5=BeoMbBAX
%#F#bk(Fl)mcj0:]=tkH"!r@iM0*-PgE:./&0C2`0(G#2&cJ)]2,`D(DZikl@O<"0%e3SClK_UIS;XkS%ZGg09NZcI'$%K3^AWQAn
%rP^:9B+Kr'oG?5S^M%sIobVJ/VZ&ntoG?5S^YiP[jS;Z&Yun7AOl$)s)JKhN4o,O,csO/!9`7BfdF;O!qnCHbBTN.E#Ds,X-URE6
%76a1dqhl7]kLo=R?e!ctc!SuRn',5#8ak/9PU"+RoTP0Ika*n#U:t[B(U02eq6c,\q:olFq&[3_Ipjo)$ff'1Zq9e`abAgT_YDMc
%(l/+-pkccDX1B&-`<q'Mo(Eld/GHen2#7TTcsO_\39DlQ@K++loG9ul^E>N1Yfmo,/'a%fq[hrX0.rDVpD:i$^IUm*rW;@-]eVqP
%76ddHMgj@=0-EcHAFY2bY_uNT(r+g4]]+.p0B*EYp^7b^?aRM5qMVdR;h&4<q?mt`?goaho),;uY_s7n&F&R8Y)t&Z0-pCPp_VjA
%=u`DYU4m:G0@G7j1r#.906j-,Oa\K2037^4Upn*`25cg!kH&1NHZMperkbr.S;t)AFPnhKAW+<BX?WV0Y!JskXND?&K?j5TSbNS:
%TYGFYr'd(ehu-!5,u=GmPG>m3XA>a`2<s8'\eX>G$@[g%p(s&HPJ$80?W`*__KtW'Cgd7Z3qO6>UVCcS?CcIP\)P&&Yn(j2ro,,)
%FFW6Zn.uDQ_-]GJUfU$A^Z[$[J'foRr.SYJ3o+lU3pgCA4iZsa(U*V)p^="I?T<c=U@#YD?aNOrq?n[u?T?WDPD>!Yk9p4^>HHJ4
%88iutNAQL8(B&r.kV$+!VZ*<DB^.5jCYn;,q?n>m7\h+3c#0e\+!SDs`=&J)legs3IqQRrSUpJ&%'4qk_#BlGqfdA;^XGF!^XFc8
%jV,[Pi;"G.ZOnF`JZ$NmSt7n1%$Lme*ZB9Lf"fb\)L1gQh9,:t'gK_/2Ahc7pVcE$#>[#"@/*:u:X;+IHIfp]ZOWRUf"mP'lrK\o
%/,(ci\&,W\(L:HoCuOU^-k+."GWOEnZ_(22L;t($T!e([caE7aM\YtG^tW;1!dN]Y4R:tj=V":mlf%)@4ZkmniTXJU:S&q/THA:n
%M\Z.,dp$9d1Yj9s?qi`cCZ64D9g&BUM.^3j49KBYaYUoWoFo&dZ-(ten])L<iccj.Kua355,`rR`:&)OIf&g4T<@)GnBL_iq=W))
%*r/bj%69@2=JkgZRe`kA1?@dXh+AafSGMEkJG+4]=XAKbTOuJ*,KJBu@8luXMLd/6rhjk6SnGcJ4AUCtX.-<Q&8=CL?9p^>>X>sH
%\>EKf(lQoU5PNVUDc0hp:b2'Y;K[Sm737okWP6%>2Z4shFcK2nN/4%Zo]Oom1C]h2^\\B.+rOs!L1EfQ^Kd2t*\Wg,VklD(qA^`)
%[RP<#"Sm/[.F6ToUT\/_185p$$bVbi`@?d:p!tCT=;R2sXDJit)L4L;oOlCHH%;>ZW\0GN^SX;fnN@aHNTie+$+2:9=m]99q?Z?H
%170p:D/BtU]$NM_>o%W3dXJID+sO]panL@]rj^;OF9r8Q^6n=D:F=DL&<Fb@,Q\(-(+4Q^`fE`44tDAPj4oOHQ&hHq+^4NB;:fk>
%_i'cm)8f[E]OVk.`95qBcAD!32LK4QdOm(;T(nm@5*qFMh14agm']oX=kQEI4S:kZ6^%S,8l`l1O%J.r:!atE;.Q&&@CPg?=D8@m
%hP0)"B+gi5f3^7!X0agWIO*dpaZNGFfInc#FAZOgY:fN6:!/CWNSms%1%EL3;?ZOhbB[kf<(o#4q%'&E7\CjEc$lqo+p,GBlgY<q
%iR)BGbH6LqghI+G<[/][<hl5;X@BgJZPn)me7sqX\s;<plAAe\]F"*rC8<"M+>ngb;WF:^b+sd='<*-;P8`VsW_mN,H6\UlCk9&^
%]i_CV4,k>YRUg%[d:l.*:*ZV@mPL`,3=Vt7Bh4(UUD$Am1L&Y:6n_STge-U^dKW\inj'%6O;sP*==re1'<3nc=]K2..p&Q%k),`e
%*`3i6'c+:+GT5Uud1@(QL2`p8B\P0t)Ju5r7RMDW)T&2q?u[Bsr1q_BX;na(`Xh*'U9i2p1k\2hd3:=X)D+W]TonaD#GE:t$4Rat
%7\66nb_m2;\'K;_B8nr>17KHAJYFpF-Wu;I3<)Z/L9/Ch3"1WN6_hKE:C2ua=LCrmVAnu43tW<qq$YI?`QVYY)m]p)][4l.(oAqX
%`*D6;DM<A@Z6-rrc,CFB,U.U-('1gsT3)I[P841iKh#^J-cQ3(FXtRl(&X0SD(NEG'3&(9oG%CL`E3?/Kb:=8!nn!>Z9k=ecqgWu
%YZPn+_7O!l.sNGA6F+pDN2"0`4GDse6F5!DTVTBaE&.?aU'Q\-p(69O-n[5$iA_2Pd1""iA;XIE:XfqLo`V`;q4X&@-F0&$>tn^A
%(ashW'/*D16]/@@GX:lq`$u?4,!W;(`IoY#XEHBC/?"DQJ@LG^:6cL[Z;jX&1V/EO*Oh3D=OBn2FrG:=/(s(NI#\b49S=W\Lup!O
%IB8][#uMdp-!heZ*$^o<n>2UDZP(*\%2bFR/&dFsm?$>p,VCe=;:q7@jJYO7X'FY_66c0`o$g1jSm?B`&\<)2W&DMG>hu>6U&j%j
%0J;KgJ/>99+i%;NHl!o]M/]bGLHMum2_f;uLnT]'WuAoB[')+iU0Xr>L`n1ri:)PP=KE:YLu&'h"gOY5?m0&5C/k-SN[*.4Z@8_k
%/=d_kLH9J`%5ufnWd>:Il&JWs!sXEHYCFdql=7)n*!3dt_\KsMq[-?7@T;lZg16bhWTHK3Q`ZL"Yo-WREBC3<76LoVg0mtRJ0BJ1
%I"1Y9a(!"IKQrE1(D'4CjrnWSB<*TSM$T1%5oh'hncAT\#X=3%HI_:$o#h[90WsG:F;M!l`@YJeLNgPql65#OjZ]9\4\/TLGW,@?
%m6j-/a5qqQV3P]"&*F0Q#Q5b[pCD(K\&,d[2%F'O!of)LP(l><jB33cqXEt,a0Rf4&K8he6HGpqgatp/$o_i*&P=.kl6/414Vb:l
%h+I6I"Z[iRRtttr"]5l;FS;je6BoLH<CMjHMcRh?18:=:A44%=OV))JBPHH,*MJP5.W>gNXWq.\bC,%#V/^/@&b00e[l2Go6=L2h
%">;S=5EeM"fNFJme=\'hAiLZW;G&K@N^Jc7PdnZ!`*rsP6@,jK/cTuEd;h#@4G4fYKQLTJ=CN+,INf:U<ff\/\!M?UZ#\bK<'W+1
%-$kE8A4J;8%hLBkc`(6F?F>*9r3F76N9dtgh8N!+<c'M[(:`-m."bhm3V3sS7kXNK>&Z-g*.!IJp!qtHPiH)%/aQN*(TYt-bhGcq
%dG.[*;W&j!S$g(*SD@Gd9.2sn&olME]nB;A,s'.2)7)cf8[;I">_aSC0C`nR+C7C&d7Y`%WL"H[)Qh.J]L4iVG_pU_i[)V6d*fiG
%?:$2DTOZVl0C]BRmNpjqUR+f+n.KTA-!m>5ak]UcI`I)-Lk0+/&hGi/$pWr%`+$\H`-?Wc98n3KecNL;QJa&mrp=$dj^d?sdTmmd
%&okB"]`^t:"31r5@Biq*%QWBPiW[@lJ<qqs]nEZS-&`'^OUi!V;9u4JU0b6RM>XZt98r2H(#?h9F)JJ'Hk0KM-$2C*@0Cl_UF0Bb
%)"&]/5VHOUoFaW40>SEI/'Np:lO`4G-*CqLWE;7O'&%r(d#NGZm3c3a?@)5Vg4>US,kkin(3M.LMcK,*jR"8-9bbN=kV.=>"=*RP
%@o9"$3U"@"G4ZF7MT&5IiM!*)8%ccL"ZhD*p(FR5j^,ePn.J2#?D?hp`(RI#\U+W-^e;Um_U2#\b]#?8UmG2b=GI`306)hgO2]+h
%QS92f7*E@$9=13_]L9?3UL(eSn.I9,$lhKoLDR#?+ii>1]\qE\n.O<GQZ*1U$&?2G*B(C.k>X*3Y?JV-ITbYV`c^'nY$A%^(NslC
%pV>ls_CG0jetAA6Ic;Yii*O8=oFb3"Q`u3k$+@'B@:$$?LG3X"ECFqE`E%MUYQoCZ/%CqMEoJD3!FEVMn.M;QSrD?sDC'S5MB.km
%]u7C:Jp7U&7PBm3Ug@L]C:#GqnIk5Ji[*:nMjG9u6VA(gGR:o_JW=0N]u2F;\X0N1]S*\FQY:^tnIf\7mU!aKn.O<(QXH6?AGAGD
%+VuZ[+i`80>[gB9E<%ZN%e()_s)p'CE\d.tl)p%m#ogZQYf&57r'VT4XA4NjD_LX4@u$U,]g+70=^t*cN@d:O[e.r!Z<jqb$&=Kl
%h,Bjr[9Tde-][$:ni_"@]e(7^#o?E3pfVf65O!(M!f@<)qHLO&K1iYW>A7EF?H6a9B&X0\Sr9-?1Z:0X$"pc9E->\;*&bBM#0_ai
%[(9e+\eX>GC3C$IXX:ak'su_l)qBVjURH/Sma>OYbB?ABGNhRSiNV:;H`H,&QAa;W34IX:]],6h#qs(gpg\7VD7:g/U@$+Z9t11@
%_IM=n()p#)+*802Z%="VGftq:NdEVVf_X$+lcYTF]:AASes@F]?[?O:a[3lFncP:^/QStMFN5JO)P_Ul+,i:o1]K^^ht^=Op?V03
%?/IWWGN8/Qf0@G?UWacT'>/qG2U>@&_oFuO1B(27]]V>(r&eL#VsF9Nc]I?lSdZ`;_sua`W(\u8B;SJH*R9/](Pp,kXsNC5oQ9B/
%N]n5l/a_,5aC7TRci))/Rl$H48"\c8P-P/VlKh@[A$f(Q3D?eT+&/N&[5$[9%l""t-5%58'f1VffQmDC(fl751W-#f6V,Pca2Y!G
%:><dM8f=tH:@B3%"tY2BW8hE@)cq>9hhtJBOmakj/ci.0SUcJNN\p.C;TZF1X.p(KrQJ"$ZeoPG=--2lIH.qKTD2GW),(sP&DoA@
%!bF4QB7.N4@6CBuE]hcUQ[(+;M\Qhdmd3RudR[(5H1S0>,(6o:kqnq#W;.SI]h*NS%`oqM=:Wl/;N]6Pg>a\s&OGiOO,)NL4tq/A
%,Z9tO/'Ehc&fJmIS\/JNJ*uK=>pbkd`kV5a-3SIZ=o'"WYmrOciO1%rl-XqVVW4GJ.C2Z3j6^FUP'"Am]_"!hX*hVgVN$NlY4,Jt
%(TT>9g"WB/P<G^XOf+S<qkOl`@<]dTK^@1-J<C+(pFK$rN?icCC?'U&Que1FmhBKbhhjPD1ql@Gg`60#Ou,Y6+%b(BeJs_<rS`f=
%AEVA&K+/,\L03k11fGQdR1RP18DkPbXFPU.=OaGu033,K)WXVOB,W&?A3p_L"P4cFC-gWSJtuU<PT].:.$,Q<bTmI$kH/\V<gVSO
%j@AI3_-.]<5iUYC*/H:I#En;C3"TMd",X8b*CtsTVJEoi45nbK'e?`pq6:2l'hIC#'hAB>'F5C[83M\WOFCY;+T:k2JO&3;+liq5
%U),=]D?KGfatj,4QiI^''-M]f-3C"3h,Jn1JHA4Z9RuW.OeI5%JEXt0N8&j[0\8-f4/P4ng(--+++E35/5mXNR1GlB7\lZ4e9\C2
%iYEX)+angNP\Q7?:;'ek3`!F^O'obKj9%eqoQ.&&ka/Eg6Q4;lj&0cKGHnHIg^Q:#@TW-FpjD?q8RaaA;'JL$*-DnkTK2;Up;(c?
%>lmK:*25Uj;@SERHo#@b]9VNt$AV1Def,Db%s!<5%679);mUI5%MqBH8FA?3CG_bW@V1P1Q0?0oL.Lr[)W.D"@PhV>(KkBAAhu9-
%)4J)EM(1md5:;LH7Z!E_*cW$TPlqu:>@P6Q(OrTcE%FX&V&BbbPTi`k(N%d#qI3neUb1\li\"2U#c=!tQ6?m\\>EJ%?E>E.,]@O>
%75E!,l1r4Q=&`hk>_s1a=gU:bS*A[)c/h%#*%.biYbIqMW[h1lTH$1ZNu+kr+ii>;]\kbF>Gnd$Na$G-U<[!3Z6Bf]Vm`<>+hFD?
%<HUaFE7G]b`JLdKjkP]s=ffW@G,()l!1k#8TkgQdVC[D&XZDoWBZ&O/C!jr3&(Vp/PL?V/CCA%m7GROG\DSmM($ij(I>IPS(KXk*
%XINrf>BViGOm7)"/CN%%BJ!nr\e(tK%9432q!'qu\e)/hmV(m[6VUH7?f%n]037F,W40G75&LpY+_q%\W\9%prUUo)^)0KdXYrN,
%76d]mMg!c_0-FBhW:>PU0T-\>(r"a3]Y\k:0SD)B4IX(tXu,Z^$:A2+YQQ(a'mA_ud`J7F%,k#ln2t^=r1q=dM\Z+#kcHQlJL9Va
%*i58p',a]4DB@>=oT2aG7aKQ>AYe(r;.dbbS3)$RS&)GL!;%M8H*MZ;!kj$%X%C26qM[J4^%mUJVnMtd4ID]9N,jUHN.+h#)?%G&
%B9X2[4p.*l/&I2ZpiP.Pj"5d/5!sYY1ZAmp5,/R4++-Ns#=%tlFYKG-4qTmQ%!>6k#%->k=>*_P6`dcC\DirFB5,b+U^+-M*i.V)
%S8DZ$c]E&,1Sd=/+YEPL%Q2ASI!N1f]iZ-`U#%unqm\pVNT%]d,UC^':iuul8p^/`#`X"*q_3aHI0Kh4*]5#/)2hMp(r"a;]Y\mP
%1ZJB?5!oYK)1D8H5,7Sq`+Pmk8V>>c!dt:!'.;%#q@'u</J*Ki53!8hP+Iq.T:l\gN#n.=cffYcqi#V93;STDVh<=R=^hC-M:?>X
%WraKlgLn/!3_srA*[\/M1[9A^mPFE!GNq!,&`PVC=m^2AMa!oK3:RljS6HS3XQF0Gp).cL4Rj:m17t6to,2C)r89Bb)#;!\B[(pZ
%<m52i4n0D;KstO)==k)hhEKtWC\h2r"+>n2b\--Ljtl!khSa'*J3G4WHba99W(DI#bI\MS`Ti![p%B9\`sq#aZim"`O;rWPe4P&[
%K_ULL;Y:ppZGgHAYinsE$(kWBX8Xi$\'K;Qn*C&gM`sKIoGN)Om67<6e&5m4%6d,uoGKbeS2<Iq1D["p,1,(W>QRXKZU^X]"8Ifr
%P)7NKH+Nk]*RJG4O$82/M#lg1;Y+?t5QlE1N#+bBWUSDMe?SMfB@OK]h.Pe7nC2*8,K+6eZ`;@8(Tors]K#F!Yaeo0?EE;PG!"(F
%!1rroA!tXsT)"='<.8YH+_O!VGigf@@m7g*M9k*1]G9bOC4V36p)-q:PNZg>q@'-dcS0\-1Q7at%&;0^(l^_S6V[,-?f%>M]>a&d
%#kdm/ho?2c1Q2L0OcUQ1#1Q7kon<+!G#IuNmBX]D5d9HLisD@:(9@EhI(.FHL$urmfE6PV$0X2Amb<.Zhku=W0HPUr$0X0iSiCG5
%dV$)/C4QZ_p)02^e%Q\4I>1b[1O;S=5,7<*mPE:.+>hE+kVIIL(k@&Z27pi-J-bf@)6\c<ZY#hPQ@*WEl-O'&f'UrVG+T7m7_`p8
%)34CeFO)iBFGn]I_J]/E*l&G]i=>!+S7FgY%AFql7N5Jpp^AO<cZ$PcVjfRCj=@kXlc!UiM"UHZ='X5<m*TIa%2aMJoeW4K_ouaq
%LH`V%oGMPtqi`]%<i?h8#9q[PB7(d[LsL#Fpl'mei%q$,d]4b6B=*l&cY/Xs5/XZ!TC08hT5Lq!+2`="N*#dLI"p,61Rpe(d<FL9
%1\s:0I"mjC1E:03b4EPCo:nKZZ!&7O]m[mHcnmmioGPr*cfcO?pl(fB8M<ok%+JGP)*CP#5X1F#(TRT]d+`3G!8=c.TH<u]#1a;A
%Y^W6ro`GZ)+/iiN5X"E<lC[AIl5-MsM.8III?3=>#SZ&+eFSEfIbG>i9H/S0h@S3.L7j"H&<sBf<j!5h"u<?jdC97IKP/UlJpP7l
%L7`Vlp!\qoSok2/X<X[9FTggL]9V[#.Y<WEXYdaf*(4LcC^KA1-k44#Ji_Hr[%10]L52(fT!\^oca<oKM\Q4P^Y<J8icjB=4R3==
%=\hjYkm?Wf4[D7)"SJiD.$#&ic;-J1^K<X\&\Y$\-.*u(#M'SG?rPE+CC9>S9gJks$6!#F:`^tgU)utPMj4?.O$<gf^XM_TAn#6@
%jr]HL45[$pIf95CCQnSf2ksaTkJ-rVa0-DQq#,[e^]2c4N/RQDs4R>BDh%^-J,9!@rUS_+B0>[=s8)>ZJ,/QJrVSn[o#ktOqCd?t
%gX#ooQ]Id=qU]deqVUhH55tK707Wj`^]*rMa5?mpfAG&>FAb3Z%tFA`s72f]oj@\_%i`U^~>
%AI9_PrivateDataEnd
